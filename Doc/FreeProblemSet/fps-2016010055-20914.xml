<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[单词接龙]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[125]]></memory_limit>

<description><![CDATA[<p>
	单词接龙是一个与我们经常玩的成语接龙相类似的游戏，现在我们已知一组单词，且给定一个开头的字母，要求出以这个字母开头的最长的“龙”（每个单词都最多在“龙”中出现两次），在两个单词相连时，其重合部分合为一部分，例如beast和astonish，如果接成一条龙则变为beastonish，另外相邻的两部分不能存在包含关系，例如at和atide间不能相连。
</p>
<p>
	<br />
</p>]]></description>
<input><![CDATA[<p>
	每个测试文件只包含一组测试数据，每组输入的第一行为一个单独的整数n（n&lt;=20）表示单词数，以下n行每行有一个单词，输入的最后一行为一个单个字符，表示“龙”开头的字母。你可以假定以此字母开头的“龙”一定存在。
</p>
<p>
	<br />
</p>]]></input> 
<output><![CDATA[<p>
	对于每组输入数据，输出以此字母开头的最长的“龙”的长度。
</p>
<p>
	下面的测试样例最后连成的“龙”为atoucheatactactouchoose。
</p>
<p>
	<br />
</p>]]></output>
<sample_input><![CDATA[5
at
touch
cheat
choose
tact
a]]></sample_input>
<sample_output><![CDATA[23]]></sample_output>
  <test_input><![CDATA[2
abababab
abababc
a
]]></test_input>
<test_output><![CDATA[19
]]></test_output>
<test_input><![CDATA[4
ABABABC
ABABABD
ABABABA
CDABABA
A
]]></test_input>
<test_output><![CDATA[43
]]></test_output>
<test_input><![CDATA[6
act
touch
cheat
choose
tact
sencitive
a
]]></test_input>
<test_output><![CDATA[31
]]></test_output>
<test_input><![CDATA[8
no
new
name
never
national
necessary
ever
me
n
]]></test_input>
<test_output><![CDATA[9
]]></test_output>
<test_input><![CDATA[6
many
youth
this
system
main
navy
m
]]></test_input>
<test_output><![CDATA[38
]]></test_output>
<test_input><![CDATA[1
envelope
e
]]></test_input>
<test_output><![CDATA[15
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛普及组 2000年NOIP全国联赛普及组]]></source>
		<solution language="C++"><![CDATA[#include <iostream>  
#include <string>  
#include <limits.h>  
#include <cstdio>  
using namespace std;  

string s[25];  
char c;  
int n,x[25],m=0;  
void y(string a,int sum)  
{  
    unsigned int i,j,k,t;  
    for(i = 0;i<n; i++)  
    {  
        if(x[i]<2)  
        {  
            int max=0;  
            for(j=1;j<=s[i].size();j++)  
            {  
                if(a.size()<s[i].size())  
                {  
                    for(k=0;k<a.size();k++)  
                    if(a[k]!=s[i][k])break;  
                    if(k ==a.size())break;  
                }  
                for(k=a.size()-j,t=0;t<j&&k<a.size();t++,k++)  
                {  
                    if(a[k]!=s[i][t])
						break;  
                }  
                if(k==a.size())
				{
					max=j;
					break;
				}  
            }  
            if(max == 0)
				continue;  
            x[i]++;  
            y(s[i],sum+a.size()-max);  
            x[i]--;  
        }  
    }  
    sum+=a.size();  
    if(sum>m)m=sum;  
}  
int main()  
{  
    int i;  
    cin>>n;  
    for(i=0;i<n;i++)  
    cin>>s[i];  
    cin>>c;  
    for(i=0;i<n;i++)  
    {  
        if(s[i][0]==c)  
        {  
            x[i]++;  
            y(s[i],0);  
            x[i]--;  
        }  
    }  
    cout<<m<<endl;  
    return 0 ;  
}  
]]></solution>
			<solution language="Pascal"><![CDATA[program shdj;
var
 a:array[1..21] of integer;
 i,m,n,ans,k:longint;
 b:array[1..21] of string;
 s,dra:string;
 c:char;
function  check(s1,s2:string):boolean;
var
 j:longint;
begin
 check:=false;
 for j:=length(s2) downto 1 do
  if (pos(copy(s2,j,length(s2)-j+1),s1)=1) and ((pos(s1,s2)=0) or (s1=s2)) then
   begin
    check:=true;
    k:=length(s2)-j+1;
    exit;
   end;
end;
procedure work(best:longint);
var
 i,j,m:longint;
begin
 for i:=1 to n+1 do
  begin
   if i=n+1 then begin if best>ans then ans:=best;exit;end;
   if (a[i]<2) and check(b[i],dra) then
     begin
      m:=k;dra:=copy(dra,length(dra)-m+1,m)+b[i];a[i]:=a[i]+1;
      work(best+length(b[i])-m);
      delete(dra,length(dra)-(length(b[i])-m)+1,length(b[i])-m);    //回溯
      dec(a[i]);   
     end;
  end;
end;
begin
 readln(n);
 for i:=1 to n do
  readln(b[i]);
 readln(c);
 for i:=1 to n do
  begin
   dra:=b[i];
   if b[i,1]=c then
    begin
     fillchar(a,sizeof(a),0);
     inc(a[i]);
     work(length(b[i]));
    end;
    end;
 writeln(ans);
end. ]]></solution>
			<solution language="Java"><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {
	public static void main(String args[]) throws Exception {
		Scanner scanner = new Scanner(System.in);
		Integer num = Integer.parseInt(scanner.nextLine());

		List<String> list = new ArrayList<String>();
		int count = 0;
		while (scanner.hasNextLine()) {
			count++;
			String input = scanner.nextLine();
			if (input == null || input.equals("") || input.length() == 0) {
				break;
			}
			list.add(input);
			list.add(input);
			if (count >= num) {
				break;
			}
		}

		String dragon = scanner.nextLine();

		int maxlen = 0;
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i).startsWith(dragon)) {
				List<String> subList = new ArrayList<String>();
				subList.addAll(list.subList(0, i));
				subList.addAll(list.subList(i + 1, list.size()));
				String ret = fun(list.get(i), list.get(i), subList);
				if (ret.length() > maxlen) {
					maxlen = ret.length();
				}
			}
		}
		System.out.println(maxlen);
	}

	public static String fun(String dragon, String tail, List<String> wordList) {
		String maxDragon = dragon;
		for (int i = 0; i < wordList.size(); i++) {
			if (match(tail, wordList.get(i))) {
				String dragonThis = connect(dragon, wordList.get(i));
				List<String> subWordList = new ArrayList<String>();
				int findi = 0;
				for (int j = 0; j < wordList.size(); j++) {
					if (wordList.get(j).equals(wordList.get(i))) {
						findi = j;
						break;
					}
				}
				subWordList.addAll(wordList.subList(0, findi));
				subWordList
						.addAll(wordList.subList(findi + 1, wordList.size()));
				dragonThis = fun(dragonThis, wordList.get(i), subWordList);

				if (dragonThis.length() > maxDragon.length()) {
					maxDragon = dragonThis;
				}
			}
		}
		return maxDragon;
	}

	public static boolean match(String start, String word) {
		boolean flag = false;
		for (int i = start.length() - 1; i >= 1; i--) {
			if (word.startsWith(start.substring(i, start.length()))) {
				flag = true;
				break;
			}
		}
		return flag;
	}

	public static String connect(String dragon, String tail) {
		for (int i = dragon.length() - 1; i >= 1; i--) {
			if (tail.startsWith(dragon.substring(i, dragon.length()))) {
				return dragon.substring(0, i) + tail;
			}
		}
		return "WTF!";
	}
}
]]></solution>
	</item>
</fps>
