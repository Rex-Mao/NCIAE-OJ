<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[ 「ZJOI2016」小星星]]></title>
<time_limit unit="s"><![CDATA[5]]></time_limit>
<memory_limit unit="mb"><![CDATA[256]]></memory_limit>

<description><![CDATA[<div class="ui bottom attached segment font-content">
	<div>
		<p>
			小 Y 是一个心灵手巧的女孩子，她喜欢手工制作一些小饰品。她有 <span class="katex"><span class="katex-mathml">nn</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 颗小星星，用 <span class="katex"><span class="katex-mathml">mm</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span></span></span></span> 条彩色的细线串了起来，每条细线连着两颗小星星。有一天她发现，她的饰品被破坏了，很多细线都被拆掉了。这个饰品只剩下了 <span class="katex"><span class="katex-mathml">n−1n-1</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span> 条细线，但通过这些细线，这颗小星星还是被串在一起，也就是这些小星星通过这些细线形成了树。小 Y 找到了这个饰品的设计图纸，她想知道现在饰品中的小星星对应着原来图纸上的哪些小星星。如果现在饰品中两颗小星星有细线相连，那么要求对应的小星星原来的图纸上也有细线相连。小 Y 想知道有多少种可能的对应方式。只有你告诉了她正确的答案，她才会把小饰品做为礼物送给你呢。
		</p>
	</div>
</div>]]></description>
<input><![CDATA[<div class="ui bottom attached segment font-content">
	<div>
		<p>
			第一行包含两个正整数 <span class="katex"><span class="katex-mathml">n,mn,m</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mpunct">,</span><span class="mord mathit">m</span></span></span></span>，表示原来的饰品中小星星的个数和细线的条数。<br />
接下来 <span class="katex"><span class="katex-mathml">mm</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span></span></span></span> 行，每行包含两个正整数 <span class="katex"><span class="katex-mathml">u,vu,v</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">u</span><span class="mpunct">,</span><span class="mord mathit">v</span></span></span></span>，表示原来的饰品中小星星 <span class="katex"><span class="katex-mathml">uu</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">u</span></span></span></span> 和 <span class="katex"><span class="katex-mathml">vv</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">v</span></span></span></span> 通过细线连了起来。<br />
这里的小星星从 <span class="katex"><span class="katex-mathml">11</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span></span></span></span> 开始标号。保证 <span class="katex"><span class="katex-mathml">u≠vu \neq v</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:-0.215em;"></span><span class="base textstyle uncramped"><span class="mord mathit">u</span><span class="mrel">≠</span><span class="mord mathit">v</span></span></span></span>，且每对小星星之间最多只有一条细线相连。 
接下来 <span class="katex"><span class="katex-mathml">n−1n-1</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span> 行，每行包含两个正整数 <span class="katex"><span class="katex-mathml">u,vu,v</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">u</span><span class="mpunct">,</span><span class="mord mathit">v</span></span></span></span>，表示现在的饰品中小星星 <span class="katex"><span class="katex-mathml">uu</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">u</span></span></span></span> 和 <span class="katex"><span class="katex-mathml">vv</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">v</span></span></span></span> 通过细线连了起来。保证这些小星星通过细线可以串在一起。
		</p>
	</div>
</div>]]></input> 
<output><![CDATA[<div class="ui bottom attached segment font-content">
	<div>
		<p>
			输出共一行，包含一个整数表示可能的对应方式的数量。
		</p>
		<p>
			如果不存在可行的对应方式则输出0。
		</p>
	</div>
</div>]]></output>
<sample_input><![CDATA[4 3
1 2
1 3
1 4
4 1
4 2
4 3]]></sample_input>
<sample_output><![CDATA[6]]></sample_output>
  <test_input><![CDATA[17 72
14 3
5 14
7 15
2 8
12 8
14 8
16 4
1 10
3 4
12 1
17 2
16 17
11 13
15 5
10 16
3 15
2 13
14 7
3 7
8 17
15 1
3 16
8 9
16 8
16 9
6 5
8 15
16 6
8 3
3 9
12 15
5 9
11 6
9 14
9 15
7 12
9 17
4 13
9 10
8 13
16 7
10 5
4 9
12 6
2 6
10 17
3 12
16 5
11 15
4 14
2 1
7 1
9 13
12 4
16 1
13 7
4 15
3 5
14 10
11 16
12 9
13 16
11 1
1 17
6 15
8 5
9 11
10 8
17 12
1 4
7 11
12 2
12 17
9 3
9 15
6 11
2 14
16 6
13 3
17 1
2 11
12 4
4 8
13 10
7 8
14 15
10 5
1 16
]]></test_input>
<test_output><![CDATA[6222109568
]]></test_output>
<test_input><![CDATA[16 40
16 13
5 10
14 7
5 13
9 6
7 12
7 6
10 11
15 1
9 15
5 1
11 4
10 15
11 9
15 13
4 3
9 12
3 6
7 5
12 3
12 4
9 16
13 12
4 10
8 10
15 14
7 15
2 8
4 16
10 3
3 9
16 15
13 7
13 6
3 11
5 4
14 13
14 16
7 10
13 1
13 3
16 8
15 4
8 13
12 4
6 9
16 9
13 1
11 10
12 14
7 3
1 2
5 3
15 11
10 5
]]></test_input>
<test_output><![CDATA[61422
]]></test_output>
<test_input><![CDATA[14 60
6 13
10 7
13 14
2 11
3 5
5 8
5 10
9 11
7 12
4 2
1 5
5 7
10 4
3 6
2 13
3 12
4 1
1 9
4 3
9 2
9 13
9 6
14 9
7 9
11 4
1 13
1 12
4 9
6 7
1 11
9 3
2 6
7 8
5 6
2 14
4 14
11 6
8 14
10 3
8 1
10 14
3 1
12 5
5 13
2 7
11 13
3 7
8 4
5 9
1 2
10 11
5 14
10 6
6 4
4 12
9 12
14 11
14 6
14 3
3 13
14 3
10 5
11 3
5 11
13 1
6 11
5 8
10 13
2 12
10 4
6 2
7 12
5 9
]]></test_input>
<test_output><![CDATA[223999622
]]></test_output>
<test_input><![CDATA[10 32
8 3
5 4
8 1
6 10
1 5
8 7
5 3
9 5
4 10
8 4
6 7
8 5
6 5
2 7
2 9
10 2
3 1
1 7
4 1
5 10
8 10
6 2
9 4
9 10
10 7
4 7
6 3
3 9
5 2
2 3
2 4
9 1
2 6
1 10
4 3
7 2
8 5
4 10
2 10
9 10
10 5
]]></test_input>
<test_output><![CDATA[97536
]]></test_output>
<test_input><![CDATA[16 82
2 14
10 9
1 6
2 11
2 3
8 14
6 16
12 9
16 2
8 3
1 4
15 16
12 11
3 5
15 7
1 10
10 4
10 15
9 15
13 1
7 1
3 12
13 7
2 1
10 13
1 11
5 1
4 16
10 16
15 1
2 12
12 13
9 1
6 14
7 2
3 7
14 4
7 9
7 10
4 9
11 4
7 16
12 6
1 14
13 6
16 12
13 11
10 3
13 9
6 11
12 10
8 4
11 3
3 16
3 13
3 9
5 6
13 16
7 8
7 5
16 9
15 14
4 15
8 11
8 5
14 3
16 8
14 10
5 15
6 9
16 5
15 2
2 10
10 6
11 14
12 5
16 1
4 13
9 5
10 8
9 2
3 4
1 7
15 4
4 16
4 5
14 5
4 1
12 10
12 6
11 5
3 5
13 16
8 11
2 14
4 10
9 4
]]></test_input>
<test_output><![CDATA[45556441120
]]></test_output>
<test_input><![CDATA[17 108
12 6
16 5
2 9
1 9
5 7
17 6
6 11
7 4
4 6
8 5
14 17
8 3
15 4
4 1
17 8
15 8
17 1
12 14
14 9
7 2
8 4
6 16
17 9
8 2
7 15
11 1
10 15
16 12
5 17
16 17
11 13
16 2
12 3
5 9
17 3
8 7
2 12
13 12
14 5
10 1
4 10
6 3
12 9
4 17
13 7
8 14
11 10
14 7
10 3
11 2
17 10
13 15
10 12
8 10
16 10
16 3
9 4
8 6
7 12
16 1
3 13
4 13
17 2
7 9
13 17
5 1
7 17
8 16
1 2
15 14
5 3
3 2
14 2
11 9
12 15
11 17
13 16
6 13
7 10
10 5
4 5
6 14
5 15
5 11
7 11
3 14
9 15
14 1
4 16
7 3
4 3
16 15
2 4
10 2
1 12
13 1
12 8
14 4
3 15
17 12
8 9
3 9
2 5
9 13
6 15
13 5
2 13
16 14
3 13
11 8
2 10
1 15
2 3
11 10
17 12
4 16
12 13
15 7
7 8
5 16
6 14
4 9
14 9
5 17
]]></test_input>
<test_output><![CDATA[7131017558340
]]></test_output>
<test_input><![CDATA[17 72
4 17
12 14
1 6
16 17
14 1
8 14
12 2
3 8
5 10
15 8
13 16
2 6
1 17
5 2
17 14
6 3
11 15
5 8
4 16
6 17
16 1
2 16
7 5
16 6
8 2
14 2
4 6
14 11
10 6
7 10
9 7
17 10
16 14
7 16
11 5
1 4
17 11
3 9
15 4
5 12
10 12
10 9
11 12
15 5
12 15
12 7
16 15
7 1
14 15
5 6
3 17
10 1
16 9
9 17
4 11
11 1
9 13
13 2
15 17
15 2
3 11
5 3
6 9
11 8
8 13
4 3
6 13
2 10
7 17
1 9
7 2
13 12
14 11
13 7
2 1
10 15
5 1
17 14
4 11
8 14
3 16
1 15
4 12
13 5
8 5
16 11
9 12
6 15
]]></test_input>
<test_output><![CDATA[7321962238
]]></test_output>
<test_input><![CDATA[14 67
12 11
5 6
5 12
3 5
2 8
9 8
4 5
11 1
6 7
3 8
11 4
1 3
13 1
4 8
3 7
14 10
1 7
12 1
11 6
12 8
9 13
12 14
7 2
3 13
4 6
8 1
11 7
5 13
10 8
11 8
1 4
13 4
8 13
6 14
3 11
7 14
12 4
6 1
4 10
1 10
12 9
8 6
10 11
4 2
3 10
6 9
5 11
9 3
7 10
6 3
6 10
12 10
9 4
10 5
11 2
7 4
7 8
11 9
14 5
12 6
12 7
14 4
3 14
14 8
8 5
9 5
1 9
1 9
4 6
2 14
12 7
3 14
14 11
10 4
14 10
5 14
8 10
4 1
13 5
10 12
]]></test_input>
<test_output><![CDATA[1105959198
]]></test_output>
<test_input><![CDATA[10 19
1 7
7 9
2 1
6 10
3 5
2 10
6 5
2 5
1 3
7 8
8 5
7 3
8 3
4 10
6 2
4 6
2 4
5 9
1 8
2 8
2 9
4 10
3 9
7 2
9 1
10 2
5 7
9 6
]]></test_input>
<test_output><![CDATA[336
]]></test_output>
<test_input><![CDATA[17 108
1 13
10 4
12 11
11 6
6 16
12 5
12 15
4 17
9 15
3 4
11 14
16 9
16 1
12 16
4 14
13 12
15 11
9 12
8 9
17 16
5 16
17 11
5 2
15 6
10 8
3 17
13 11
10 3
3 6
17 14
15 7
6 5
1 11
3 14
4 7
9 2
10 11
15 4
16 11
14 12
6 14
9 17
12 8
6 9
7 10
1 15
17 13
5 3
7 6
3 9
6 2
8 16
17 12
9 7
9 14
1 2
15 10
6 8
5 10
14 15
7 5
8 7
1 7
15 17
2 11
3 16
5 17
13 15
1 10
7 14
7 11
10 16
14 2
13 14
8 13
5 9
4 11
1 12
7 16
16 14
11 9
2 4
4 16
14 1
2 15
13 6
3 7
7 12
9 10
8 17
6 10
5 11
3 1
4 5
3 8
11 3
4 12
12 6
13 7
16 15
17 1
13 10
9 1
13 5
8 2
3 2
5 1
15 5
2 6
4 16
13 3
11 5
9 13
16 7
8 1
3 2
14 16
14 15
13 11
8 17
6 10
11 4
12 1
17 6
]]></test_input>
<test_output><![CDATA[7080849996510
]]></test_output>
<hint><![CDATA[<div class="ui bottom attached segment font-content">
	<div>
		<p>
			对于所有的数据，<span class="katex"><span class="katex-mathml">n≤17,m≤n(n−1)2n \leq 17,m \leq \frac{n(n-1)}{2}</span><span class="katex-html"><span class="strut"></span><span class="strut bottom" style="vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mrel">≤</span><span class="mord mathrm">1</span><span class="mord mathrm">7</span><span class="mpunct">,</span><span class="mord mathit">m</span><span class="mrel">≤</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;"></span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span></span></span></span><span><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;"></span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;"></span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;"></span></span></span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>。
		</p>
	</div>
</div>]]></hint>
<source><![CDATA[ZJOI2016 NOIP 省选 高级]]></source>
		<solution language="C++"><![CDATA[#include<algorithm>
#include<cstring>
#include<cctype>
#include<cstdio>
#define rep(i,x,y) for(int i=x; i<=y; ++i)
#define repd(i,x,y) for(int i=x; i>=y; --i)

using namespace std;
const int N=18,M=131080;
typedef long long LL;
bool mp[N][N];
int n,m,cnt,fa[N],dep[N],h[N],bin[N],rk[N],x,y,b[M];
LL f[N][N],ans;
struct edge{int v,n;} e[N<<1];

int getint()
{
	char ch;
	while(!isdigit(ch=getchar()));
	int x=ch-48;
	while(isdigit(ch=getchar())) x=x*10+ch-48;
	return x;
}

void addedge(int u,int v)
{
	e[cnt]=(edge){v,h[u]},h[u]=cnt++;
	e[cnt]=(edge){u,h[v]},h[v]=cnt++;
}

void dfs(int x,int Fa,int Dep)
{
	fa[x]=Fa,dep[x]=Dep;
	for(int i=h[x]; i!=-1; i=e[i].n)
		if(e[i].v!=Fa) dfs(e[i].v,x,Dep+1);
}

LL query(int s)
{
	memset(f,0,sizeof(f));
	rep(i,1,n)
		if(s&(1<<i-1))
			rep(j,1,n)
				f[j][i]=1;
	repd(i,n,2)
	{
		x=rk[i],y=fa[x];
		rep(j,1,n)
			if(s&(1<<j-1))
			{
				LL add=0;
				rep(k,1,n)
					if(s&(1<<k-1) && mp[j][k])
						add+=f[x][k];
				f[y][j]*=add;
			}
	}
	LL rt=0;
	rep(i,1,n) rt+=f[1][i];
	return rt;
}			

int main()
{
	n=getint(),m=getint(),memset(h,-1,sizeof(h));
	rep(i,1,1<<n) b[i]=b[i^(i&-i)]+1;
	rep(i,1,m) x=getint(),y=getint(),mp[x][y]=mp[y][x]=1;
	rep(i,1,n-1) addedge(getint(),getint());
	dfs(1,0,1);
	rep(i,1,n) ++bin[dep[i]];
	rep(i,1,n) bin[i]+=bin[i-1];
	rep(i,1,n) rk[bin[dep[i]]--]=i;
	rep(i,1,(1<<n)-1)
	{
		int tot=n-b[i];
		if(tot&1) ans-=query(i);
		else ans+=query(i);
	}
	printf("%lld\n",ans);
	return 0;
}]]></solution>
	</item>
</fps>
