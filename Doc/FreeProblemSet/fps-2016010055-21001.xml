<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[数字反转]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>
	给定一个整数，请将该数各个位上数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零。（参见样例2）
</p>
<p>
	<br />
</p>]]></description>
<input><![CDATA[<p>
	每组输入数据多行，每行一个整数N（-1000000000≤N≤1000000000）。
</p>
<p>
	<br />
</p>]]></input> 
<output><![CDATA[<p>
	每组输出多行，每行一个整数，表示反转后的新数。
</p>
<p>
	<br />
</p>]]></output>
<sample_input><![CDATA[123

-380]]></sample_input>
<sample_output><![CDATA[321

-83]]></sample_output>
  <test_input><![CDATA[-60000020
]]></test_input>
<test_output><![CDATA[-2000006
]]></test_output>
<test_input><![CDATA[-290

]]></test_input>
<test_output><![CDATA[-92
]]></test_output>
<test_input><![CDATA[-927
]]></test_input>
<test_output><![CDATA[-729
]]></test_output>
<test_input><![CDATA[718270
]]></test_input>
<test_output><![CDATA[72817
]]></test_output>
<test_input><![CDATA[8546
]]></test_input>
<test_output><![CDATA[6458
]]></test_output>
<test_input><![CDATA[253717
]]></test_input>
<test_output><![CDATA[717352
]]></test_output>
<test_input><![CDATA[-592900000

]]></test_input>
<test_output><![CDATA[-9295
]]></test_output>
<test_input><![CDATA[-800901860
]]></test_input>
<test_output><![CDATA[-68109008
]]></test_output>
<test_input><![CDATA[900000000
]]></test_input>
<test_output><![CDATA[9
]]></test_output>
<test_input><![CDATA[40206030
]]></test_input>
<test_output><![CDATA[3060204
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛普及组-2011年NOIP全国联赛普及组]]></source>
		<solution language="C"><![CDATA[#include<stdio.h>
int main()
{
	int a,b[20],l=0,s=0,i;
	scanf("%d",&a);
	for (i = 0;;++i)
	{
		l++;
		b[i]=a%10;
		a/=10;
		if(a==0)
			break;
		/* code */
	}
	for ( i = 0; i < l; ++i)
	{
		s=b[i]+s*10;
		/* code */
	}
	printf("%d",s );
	return 0;
}]]></solution>
			<solution language="C++"><![CDATA[#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main()
{
	char a[12];
	int i,count;
	while(scanf("%s",a)!=EOF)
	{
		if(atoi(a)==0)
		{
			printf("0\n");
			continue;
		}
		count=1;
		if(a[0]=='-')
		{
			printf("-");
			for(i=strlen(a)-1;i>=1;i--)
			{
				if(a[i]=='0'&&count==1)
				{
					continue;
				}
				if(a[i]!='0'||count==0)
				{
					count=0;
					printf("%c",a[i]);
				}
			}
		}
		else
		{
			for(i=strlen(a)-1;i>=0;i--)
			{
				if(a[i]=='0'&&count==1)
				{
					continue;
				}
				if(a[i]!='0'||count==0)
				{
					count=0;
					printf("%c",a[i]);
				}
			}
		}
		puts("");
	}
	return 0;
}]]></solution>
			<solution language="Pascal"><![CDATA[var
   s,s1,c:string;
   x,i,l:longint;
begin
 readln(s);
 if(s='0')then begin writeln(0);exit;end;
 if(s='-0')then begin writeln(0);exit;end;
 if s[1]='-'then
  begin
   c:='-';
   delete(s,1,1);
  end
 else c:='';
 l:=length(s);
 for i:=l downto 1 do
  begin
   s1:=s1+s[i];
  end;
 val(s1,x);
 str(x,s1);
 s1:=c+s1;
 writeln(s1);
end.]]></solution>
			<solution language="Java"><![CDATA[

import java.util.Scanner;

public class Main {
public static void main(String[] args) {
	Scanner in = new Scanner(System.in);
	String a = in.next();
	if(Integer.parseInt(a)>0)
	{
		StringBuilder sb = new StringBuilder(a);
		sb.reverse();
		System.out.println(Integer.parseInt(sb.toString()));
	}
	else
	{
		char[] b = a.toCharArray();
		StringBuilder sb = new StringBuilder();
		for(int i=1;i<b.length;i++)
			sb.append(b[i]);
		sb.reverse();
		System.out.println(Integer.parseInt(sb.toString())*-1);
			
	}

}
}
]]></solution>
			<solution language="Python"><![CDATA[# coding=utf-8
def main():
    def _reverse(x: int) -> int:
        sign = 1
        if x<0:
            sign = -1
            x = -x
        res = []
        while x>0:
            res.append(x%10)
            x //= 10
            
        x_ = 0
        for bit in res:
            if x_>2**31/10:
                return 0
            x_ = 10*x_ + bit 

        return sign*x_

    while True:
        temp = input()
        if temp == '':
            break
        x = int(temp)
        print(_reverse(x))

if __name__ == '__main__':
    main()]]></solution>
	</item>
</fps>
