<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[ [ZJOI2012]数列]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>
	小白和小蓝在一起上数学课，下课后老师留了一道作业，求下面这个数列的通项公式：
</p>
<pre>A(0)=0
A(1)=1
A(2i)=A(i) (对于任意 i&gt;0)
A(2i+1)=A(i)+A(i+1) (对于任意 i&gt;0)</pre>
<p>
	小白作为一个数学爱好者，很快就计算出了这个数列的通项公式。于是，小白告诉小蓝自己已经做出来了，但为了防止小蓝抄作业，小白并不想把公式公布出来。于是小白为了向小蓝证明自己的确做出来了此题以达到其炫耀的目的，想出了一个绝妙的方法：即让小蓝说一个正整数N，小白则说出 的值，如果当N很大时小白仍能很快的说出正确答案，这就说明小白的确得到了公式。但这个方法有一个很大的漏洞：小蓝自己不会做，没法验证小白的答案是否正确。作为小蓝的好友，你能帮帮小蓝吗？
</p>
<h2>
	输入输出格式
</h2>
<strong>输入格式：</strong><br />
<p>
	<br />
</p>
<p>
	输入文件第一行有且只有一个正整数T，表示测试数据的组数。
</p>
<p>
	第2～T+1行，每行一个非负整数N。
</p>
<p>
	<br />
</p>
<strong>输出格式：</strong><br />
<p>
	<br />
</p>
<p>
	输出文件共包含T行。
</p>
<p>
	第i行应包含一个不含多余前缀0的数，它的值应等于 (n为输入数据中第i+1行被读入的整数)
</p>
<p>
	<br />
</p>
<h2>
	输入输出样例
</h2>
<div class="am-g">
	<div class="am-u-md-6 copy-region">
		<strong>输入样例#1：</strong> <a class="am-badge am-radius lg-bg-orange sample-copy">复制</a> 
<pre>3
1
3
10
</pre>
	</div>
	<div class="am-u-md-6 copy-region">
		<strong>输出样例#1：</strong> <a class="am-badge am-radius lg-bg-orange sample-copy">复制</a> 
<pre>1
2
3
</pre>
	</div>
</div>
<h2>
	说明
</h2>
<p>
	对于20%的数据，N&lt;=10^8
</p>
<p>
	对于50%的数据，N&lt;=10^12
</p>
<p>
	对于100%的数据，T&lt;=20,N&lt;=10^100
</p>
<div class="lg-article-sub am-g" id="sub">
</div>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[]]></sample_output>
  <test_input><![CDATA[20
7341030631655224656058253659603406251486130681137060941957414458288095740913520924959792923235146522
4587886792821025862961442997585335180428515271533818787024196598865309629954451019302272858248225290
5761447985463164660249029082709312648910573979582375179394847021341346830895694430639770171781600195
9938092555713461791294745615290622039252914875205167069572466927065323728301407985925579398932233204
6562990320133322203496217007159896293670747839180943851118509611608366464748348643419662148263552442
9436866352605467655297779646802334708834849350975041561870682809321747385310342649160473731538888436
2434740758180059823640359211996156871075341178385961335972570363163964909606381169591243674769344451
8038093047159160358052787138642853529047025989062921411634362476009289255942130880602391988364942045
912294269412313380163130798704123437443545136213382017661489803152791172666024260412890284564624341
3631845794355143971099075093326031969294945542642510520578384884509185019367395263424303561317152590
3412155294650749709245447118064501349576781589542609543829533881138100743021295097811343701052011517
3421895008001216929762235803510653121121791273856140824873753145003578936918692864026137160553949123
7613512583899478459006318896932055941139496771257874856445079374168745394908306577804984793569140020
9678609597730495883023057495719916955639050197353225687900494637533907139853048877354763826205122503
3475158717107742209742145940842055757848061358157521032807249535401083460174110439470852504095897190
1514600972070520370802948907989084454589300640082140299178186511983265188623405022533448804052522927
6892314109057495510298493356428686553106789146456397284523764303810319718331760917184233667636360792
8010502012101445884843188176326947867499529748911977903455581190454128367598610814323964229670115993
3973818597286724507192615118580851494583601280803914087151373307750777761926413566140166589242452507
8686489384722618902727244789419566293835633799050887261825596691598783181840780623686371898396590385
]]></test_input>
<test_output><![CDATA[15781592942669068940513255034223790459608922503714180456368
6591212895459465493257140366437999715599156023436693156009
1811242602930671221792197241997199850349361129025839711513
39711353854226198694825902179578362406848558994406818823
4438537746109054104750388013913422741904295705237199845162
38978285428933694262894595700907364556213122072518612227
3314295440219318161583959689944756260125322033262105572969
4946112884478494608697875520220918920263568831427858182855
279124152795551501735423339835267967030165392931248790041
432306961320426081809955419245686251764507320311832741274939
3099155027079869406764314315971741173183118025343798527701
71545636497309043855360199816868349704445198784520763934
263387723544642428214349416532766982287766324886837853547
107122114634283976051368596293039163470256596127223325622
5337256226931438199867656482221990157213907712167285333857
118302407805777979036277863833725697973590482694549592773
1489968821990244377919209189534937736135610138681194232577
2319500626376328952217812037698801515107465708982761871812
33250478323063722696807862716683319704844044441147049606105
2996976592946122376892448285503069887737876797904223899
]]></test_output>
<test_input><![CDATA[5
88490471
11715542
32416725
67586122
45972981
]]></test_input>
<test_output><![CDATA[41765
12773
25250
12403
16930
]]></test_output>
<test_input><![CDATA[10
4200671510155286264416653526549366286235245469155168546793849385653678003906848108281939738738559073
2783809511504405428290555741089795391841078298352415319898913204328912936341508800893748634343282633
6838992542894121885426306494062177288613251432594121604176666651498796063980965853731451084833018396
437475591446387670530309941274504855155389864684125527000985906187876725502829802087287572628326689
4627270665896449385872289221430455977212405244451220942068188219350943649506555991139409266642325188
1482026303818076820279593730142077210224337519429018013378585873271678361887439764506210682383612317
3371989021509570401232835970418097040134138209159374852728449282279056032880036655598763188407185738
6977646182315849328354936851970789886651583921067047280694506234122633061912467037878024999898206670
8352348946584751161267521138730485662996687181957110227627245390950571088813557043526716207951362914
4175381214707647710855310096590878684657894989407661688638150922510716219253097130435136359110860723
]]></test_input>
<test_output><![CDATA[75905686145667266291245668201716709822752148208560279044
897995486300818437946363433642592288828437950957710824372
30035426784859583718967377302779857035983817058027987483
151210024823478592863398143844678420254525159544276845957
41970428217302019480763534998492388608384761684426254849
30198205454465286641440355057580673633269839446108667946778
8463036444508572900198097930257407658357497119275930551015
262472869426124293268711335113314376326558138708262951488
56481812128754180075221086673424041620003434821832681049611
1451036227596415992094436126250342279972048379857499039569
]]></test_output>
<test_input><![CDATA[20
11433213
97724783
20568913
56842068
83160090
66064439
87369481
89531928
51636704
27379024
45756106
6410021
33777717
62818995
52108306
15387490
16046102
93414898
38778088
43701738
]]></test_input>
<test_output><![CDATA[11410
95971
29609
34740
25952
3903
79601
25130
3273
6107
38349
9647
12326
40742
16683
18671
7353
37579
9371
49618
]]></test_output>
<test_input><![CDATA[1
3130722231088505495929862553418478239550284139240910363134770865478092142335714309177169728593145295
]]></test_input>
<test_output><![CDATA[2834799020901571528178557309878140280143867032378779420884
]]></test_output>
<test_input><![CDATA[20
8165702507346038600827602525052269815560504556393931089618318003366214155443572173174317958872032867
4887587149775152039583675269859301510809036674750942934840332793321115990359950047888221232562956581
5617798785673994219254661453204784097538906557604330148534490485724829835512215051513131277140314832
1836397273297575188065234590270652060371671272934331891882631593889596531333907912409116094475062310
1710323589440942949232435104305971728894218552820329827818011230303375840925331290583145165921567860
5165913630703177201323403730396170018574202918031929597827786132002223759885086670121020438233923889
9872438364367541413396985919798987841037332383941655382017568086163741580829805810089497171518037901
8951367927258723852550160407146514370518505538968522542728156005379161560026396548079989865494370410
4777525340538949208534448789132097655192534117978381944377645822101457361898692814573827803225259459
3362230523018911477408191216541337830102254631839664122818470497482869408908268378946741868204511404
2054364421047646370370372269730486781903642865729769153032690267699347411087923054729023127939128516
7998084194687005000135712571845717607170257369313938761547790198011132121817644307886431442519739610
5343313547742230920469890630722751724740163338534779365039877986228019053681198196344024963083606999
6993489839850133186604514293120068747122265984604015201503851330411972375105468002077720375414889612
3768907096657724453449783166841032491231538377105612206218534805305845359355680215318875833823252779
6191786956184166763344208885193337732170045190773435943561102643730078501236469678233585186456535102
2778181601589832183589344943090823153444739123878477896248370913471235499444958402618842817497217367
7179628509798786188266496851866235117125063762922069205089198862577644754598513401306167083156966328
3524244295446833447753500270263919472188087340379132232957447790085894032570735865970570655169944615
4304687406065189688550057419367646365400196273871659296954496533767258288565247580976571677027320432
]]></test_input>
<test_output><![CDATA[346358299580532417977138815634824498142092800025695049660
9815661821179744469558966797880922625828228240823912729
15008184281416932875812172599140347221562403609335336060
114094537654125465714502250961898322778036567974788396205192
803713055302114171416389570639871278921873112489403588262
87392106042350074003087556868001564257082571129336490339
28138766267376479881964974837240399564267790430097183612456
7073401839667571255374761813269050498449328712193569914397
958977019303146361497550603237017412915048598685868203613
683401614359134489059006660011019911036953105547732498692
359577616427620147121311095622097999992473473807932112981
125054697498677792909788841544458958496298462285859708118
34105807729438300327107253220901131486035412727510958953
211281430057411987122149004665089769230966001284348227069
16470913258759805194885702432516846422703929460081197315168
1243189595128108043196770982944179727718725799976287247
4794510435953691326855977806128028761144750497868626838649
6218495214216378548225540678104514883133954465987859564193
52851344112950996225784750197657235008164039481682554067
5607679128864510108756947934822976238340868800168477443
]]></test_output>
<test_input><![CDATA[12
1642935626852
25926791128
8525235918193
2896914922776
9393805219455
5667539679976
5533616144528
4126816352823
3929463051926
5788243695044
3924444475218
252830378770
]]></test_input>
<test_output><![CDATA[3440471
249461
12912163
8398360
58247956
8918235
2749757
16743840
11701433
27721547
16848366
5224985
]]></test_output>
<test_input><![CDATA[20
3112343579273
704622215352
57601350043
3861284659454
706070294841
4775629483765
5176322038975
371116062045
5883092103840
7387470398077
2654105438001
1917767666530
9599315672726
3297244423562
1142385875137
1980354601595
3018256364743
3632847122551
195227082530
8401435097058
]]></test_input>
<test_output><![CDATA[65249131
697552
7403197
459719
17934460
25833971
54557673
11572230
9218076
5688239
8084018
4782929
9863475
8203831
1552493
38958497
18501175
8681847
2160661
4429138
]]></test_output>
<test_input><![CDATA[20
2317391652852847968941169219357747989208971630014280746219269604656922647707682015498767686501634001
6509436123569265627544367091151185766404164662458513764821844819247570815276125949341942843119399860
2706505602487752821649176473381152039397399203653507805348312001586627046620494016502500260662335605
5016516240894204356973315775437889415684474659697891948791535246009979281297721899845557136266050444
5200775967539866583122619832754828310850150203426621862865083734507347462657818223230191108271807840
1517839990568224400855468766652576326605965371001809400729425217616688526986201258663553595251673039
3548169818539965967907322569971741553699233659063556337724313713376864059808642191139695883701325899
7667799342192904649488104676450895687619088809127355064443474807222368017882580002313258384571251464
3382436484949222993920367624837298106582154503373312943447592565226692429462665342868576286896454939
3652392645068055486081089899057192223291914586059421523423744881453660460986269551682252671941957387
7096974341061910906987953825774750041051029242758084978637025066738043660313878992499588868298458275
6291934911695383363817765491088558236567021075938969262850920487895694117253064246213507733790249455
3416539599911310794680724196137117359789016065734350886520711488457199506983650689358603868037839070
4481955744067504292455114863693448550067061296725882666486124540200090877184880456030850342273055459
2823784034141394908221712752133550162216507716026521339731932068802748047989595137262068457859940156
9958712225869640807135845269015389368242167037908889473792350583242506240951024135090617385153805893
9096201975806507399106042150594489037327150511254246528036151204152909446108005530122016132526059692
8067025734320230314673739832682267041439979066684184642741531584887690721859057147104434893157411995
5864858521172641274470973511989508270980355054421801153112291438076212748883818195137327070033934986
4736621792137726499769124739427497376225518957941371682488929819651682830197953753825697253279127958
]]></test_input>
<test_output><![CDATA[223526148599041357016775032426995693387888048797285958552
54075847513160888099393580127213199975738405153995778091
315496696894952564241600290965143227320334561309705628389
892143182590365514636638815378038157145937210337283063293
341741337619261401482065773788163853435878235698313233394
403907628047817752725773820495381602652055273821557027259
104796862722921607013203430619051829985271616238913357948
82147565382419289546455721720860921732501391358084313402
2287572088547837217714180717132166219588584699611638311297
9816041143449188344283490455750302237115455840931532433273
64972530789963729379445197977814708849222091203620426844117
121522206635448699198332148609126436616111367726736776181
906571979697902166965279537985880128417382494482936874547
795988366828220834565513047340611372283856279424935604225
542192972087970898801340354129853015284082069595571433500
915003562629270604244373744401249425319460428168733422424
1337312939356195405015982027575168023591292629071074457662
50507302292685629649591246396469458667028859522311322576
2774365789802360659625800725484396025247447272215894742612
4538273001246682429794346524692827130585077261118805622923
]]></test_output>
<test_input><![CDATA[4
4843869901569
834733355299
8227989186088
4216851870982
]]></test_input>
<test_output><![CDATA[14365736
4389661
7624351
6549303
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[ZJOI2012 省选 NOIP ZJOI 高级]]></source>
		<solution language="C++"><![CDATA[#include<iostream>
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<ctime>
#include<cmath>
#include<algorithm>
#include<iomanip>
#include<queue>
#include<map>
#include<bitset>
#include<stack>
#include<vector>
#include<set>
using namespace std;
#define MAXN 10010
#define MAXM 10010
#define INF 1000000000
#define MOD 1000000007
#define ll long long
#define eps 1e-8
#define MAXL 1010
char bnin[MAXL];
struct bn{
	char x[MAXL];int n;
	bn(){memset(x,0,sizeof(x));n=0;}
	bn(int X){memset(x,0,sizeof(x));n=0;while(X){x[++n]=X%10;X/=10;}}
	friend istream &operator >>(istream &input,bn &x){int i;input>>bnin;memset(x.x,0,sizeof(x.x));x.n=strlen(bnin);for(i=1;i<=x.n;i++){x.x[i]=bnin[x.n-i]-'0';}return input;}
	friend ostream &operator <<(ostream &output,bn x){int i;if(!x.n){output<<0;}for(i=x.n;i;i--){output<<int(x.x[i]);}return output;}
	void rd(){int i;scanf("%s",bnin);n=strlen(bnin);for(i=1;i<=n;i++){x[i]=bnin[n-i]-'0';}}
	void pt(){int i;if(!n){printf("0");}for(i=n;i;i--){printf("%d",x[i]);}}
	void half(){int i;for(i=n;i;i--){x[i-1]+=(x[i]%2)*10;x[i]/=2;}x[0]=0;while(!x[n]&&n){n--;}}
	bn operator =(ll y){for(this->n=1;y!=0;this->x[this->n]=y%10,y/=10,this->n++){}this->n--;return *this;}
	friend bool operator <(bn x,bn y){int i;if(x.n!=y.n){return x.n<y.n;}for(i=x.n;i;i--){if(x.x[i]!=y.x[i]){return x.x[i]<y.x[i];}}return 0;}
	friend bool operator ==(bn x,bn y){int i;if(x.n!=y.n){return 0;}for(i=x.n;i;i--){if(x.x[i]!=y.x[i]){return 0;}}return 1;}
	friend bool operator >(bn x,bn y){return !(x<y|x==y);}
	friend bool operator <=(bn x,bn y){return x<y|x==y;}
	friend bool operator >=(bn x,bn y){return x>y|x==y;}
	friend bool operator <(bn x,ll y){return x<bn(y);}
	friend bool operator ==(bn x,ll y){return x==bn(y);}
	friend bool operator >(bn x,ll y){return x==bn(y);}
	friend bool operator <=(bn x,ll y){return x==bn(y);}
	friend bool operator >=(bn x,ll y){return x==bn(y);}
	friend bool operator <(ll x,bn y){return bn(x)<y;}
	friend bool operator ==(ll x,bn y){return bn(x)==y;}
	friend bool operator >(ll x,bn y){return bn(x)==y;}
	friend bool operator <=(ll x,bn y){return bn(x)==y;}
	friend bool operator >=(ll x,bn y){return bn(x)==y;}
	friend bn operator +(bn x,bn y){bn z;int i;for(i=1;i<=x.n|i<=y.n;i++){z.x[i]+=x.x[i]+y.x[i];z.x[i+1]+=z.x[i]/10;z.x[i]%=10;}z.n=max(x.n,y.n);if(z.x[z.n+1]){z.n++;}return z;}
	friend bn operator -(bn x,bn y){bn z;int i;for(i=1;i<=x.n|i<=y.n;i++){z.x[i]+=x.x[i]-y.x[i];if(z.x[i]<0){z.x[i+1]--;z.x[i]+=10;}}z.n=max(x.n,y.n);while(!z.x[z.n]&&z.n){z.n--;}return z;}
	friend bn operator *(bn x,bn y){bn z;int i,j;for(i=1;i<=x.n;i++){for(j=1;j<=y.n;j++){z.x[i+j-1]+=x.x[i]*y.x[j];z.x[i+j]+=z.x[i+j-1]/10;z.x[i+j-1]%=10;}}z.n=x.n+y.n;while(!z.x[z.n]&&z.n){z.n--;}return z;}
	friend bn operator +(bn x,ll y){return x+bn(y);}
	friend bn operator -(bn x,ll y){return x-bn(y);}
	friend bn operator *(bn x,ll y){return x*bn(y);}
	friend bn operator +(ll x,bn y){return bn(x)+y;}
	friend bn operator -(ll x,bn y){return bn(x)-y;}
	friend bn operator *(ll x,bn y){return bn(x)*y;}
	friend bn operator /(bn x,bn y){bn z;bn l,r,mid;l=0;r=x;while(l<=r){mid=l+r;mid.half();if(mid*y<=x){z=mid;l=mid+1;}else{r=mid-1;}}return z;}
	friend bn operator /(bn x,ll y){return x/bn(y);}
	friend bn operator /(ll x,bn y){return bn(x)/y;}
	friend bn operator %(bn x,bn y){return x-(y*(x/y));}
	bn operator +=(bn x){(*this)=(*this)+x;return (*this);}
	bn operator -=(bn x){(*this)=(*this)-x;return (*this);}
	bn operator *=(bn x){(*this)=(*this)*x;return (*this);}
	bn operator /=(bn x){(*this)=(*this)/x;return (*this);}
	bn operator %=(bn x){(*this)=(*this)%x;return (*this);}
	bn operator +=(ll x){(*this)=(*this)+x;return (*this);}
	bn operator -=(ll x){(*this)=(*this)-x;return (*this);}
	bn operator *=(ll x){(*this)=(*this)*x;return (*this);}
	bn operator /=(ll x){(*this)=(*this)/x;return (*this);}
	bn operator %=(ll x){(*this)=(*this)%x;return (*this);}
	ll tonum(){ll re=0;int i;for(i=n;i;i--){re*=10;re+=x[i];}return re;}
	friend bn sqrt(bn x){bn z;bn l,r,mid;l=0;r=x;while(l<=r){mid=l+r;mid.half();if(mid*mid<=x){z=mid;l=mid+1;}else{r=mid-1;}}return z;}
};
bool jud(bn &x){
	if(!x.n){
		return 0;
	}
	return x.x[1]&1;
}
bn cal(bn x,bn X,bn Y){
	if(x==0){
		return Y;
	}
	if(jud(x)){
		x.half();
		return cal(x,X,X+Y);
	}else{
		x.half();
		return cal(x,X+Y,Y);
	}
}
bn a;
int main(){
	int tmp;
	scanf("%d",&tmp);
	while(tmp--){
		cin>>a;
		while(!jud(a)){
			a.half();
		}
		a.half();
		cout<<cal(a,bn(1),bn(1))<<endl;
	}
	return 0;
}

/*

*/
]]></solution>
	</item>
</fps>
