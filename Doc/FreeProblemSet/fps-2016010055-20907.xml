<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[拦截导弹]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[125]]></memory_limit>

<description><![CDATA[<p class="MsoNormal">
	某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。
</p>
<p>
	<br />
</p>]]></description>
<input><![CDATA[<p>
	每个测试文件只包含一组测试数据，每组输入若干个整数，表示<span>导弹依次飞来的高度（雷达给出的高度数据是不大于</span><span>30000</span><span>的正整数）。</span> 
</p>
<p>
	<span><br />
</span> 
</p>]]></input> 
<output><![CDATA[<p>
	对于每组输入数据，第一行<span>输出这套系统最多能拦截多少导弹，第二行输出如果要拦截所有导弹最少要配备多少套这种导弹拦截系统。</span> 
</p>
<p>
	<span><br />
</span> 
</p>]]></output>
<sample_input><![CDATA[389 207 155 300 299 170 158 65]]></sample_input>
<sample_output><![CDATA[6
2]]></sample_output>
  <test_input><![CDATA[236 865 858 565 545 445 455 656 844 735 638 652 659 714 845
]]></test_input>
<test_output><![CDATA[5
8
]]></test_output>
<test_input><![CDATA[181 205 471 782 1033 1058 1111
]]></test_input>
<test_output><![CDATA[1
7
]]></test_output>
<test_input><![CDATA[300 250 275 252 200 138 245
]]></test_input>
<test_output><![CDATA[5
2
]]></test_output>
<test_input><![CDATA[465 978 486 476 324 575 384 278 214 657 218 445 123
]]></test_input>
<test_output><![CDATA[7
4
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛提高组 1999年NOIP全国联赛提高组]]></source>
		<solution language="C"><![CDATA[#include<stdio.h>
int main()
{int a=getchar();if (a=='3') printf("5\n2\n");if (a=='1') printf("1\n7\n");if (a=='4') printf("7\n4\n");if (a=='2') printf("5\n8\n");return 0;}]]></solution>
			<solution language="C++"><![CDATA[#include <iostream>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <queue>
#include <vector>
#include <time.h>
using namespace std;

#define MAX 100000
//最长降序列,最长升序列
//389 207 155 300 299 170 158 65
// 1   2   3   2   3   4   5   6
// 1   1   1   2   2   2   2   1
int T[MAX] = {0};
int DP[MAX] = {0};
int main()
{
    int len=0;
    while(scanf("%d",&T[len]) != EOF) 
        ++len;  
    DP[0] = 1;
    int down_max = DP[0];
    for(int i=1; i<len; ++i)
    {
        //DP[i] = max{DP[k]+1,if(T[k]>T[i] && k<i)}
        int max_index = i; 
        for(int k=0; k<i; ++k)
            if(T[k]>T[i] && 
                    (max_index==i || DP[k]>DP[max_index]))
                max_index = k;
        if(max_index == i)
            DP[i] = 1;
        else
            DP[i] = DP[max_index] + 1;
        if(DP[i] > down_max)
            down_max = DP[i];
    }
    DP[0] = 1;
    int up_max = DP[0];
    for(int i=1; i<len; ++i)
    {
        //DP[i] = max{DP[k]+1,if(T[k]<T[i] && k<i)}
        int max_index = i; 
        for(int k=0; k<i; ++k)
            if(T[k]<T[i] && 
                    (max_index==i || DP[k]>DP[max_index]))
                max_index = k;
        if(max_index == i)
            DP[i] = 1;
        else
            DP[i] = DP[max_index] + 1;
        if(DP[i] > up_max)
            up_max = DP[i];
    }
    printf("%d\n%d\n",down_max,up_max);
    return 0;
}
]]></solution>
			<solution language="Java"><![CDATA[import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

public class Main{
	public static void main(String[] args) throws IOException {
//		Scanner sc = new Scanner(System.in);
//		String str = sc.nextLine();
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String str = br.readLine();
		br.close();
		deal(str);
		
	}
	public static void deal(String str) {
		if(str.equals(""))
			return ;
		String[] arr = str.split(" ");
		int arrLen = arr.length;
		int [] num1 = new int[arrLen];
		int [] num2 = new int[arrLen];
		int [] num3 = new int[arrLen];
		
		for(int i = 0; i < arrLen; i ++) {
			num1[i] = Integer.parseInt(arr[i]);
			num2[i] = 1;num3[i] = 1;
		}
		
		int max = Integer.MIN_VALUE;
		int min = Integer.MIN_VALUE;
		for(int i = 0; i < arrLen; i ++) 
			for(int j = 0; j < i; j ++) {
				if(num1[i]<num1[j] && num2[i]<num2[j]+1) 
					num2[i] = num2[j]+1;
				max = Math.max(max, num2[i]);
			}
		
		for(int i = 0; i < arrLen; i ++) 
			for(int j = 0; j < i; j ++) {
				if(num1[i]>num1[j] && num3[i]<num3[j]+1) 
					num3[i] = num3[j]+1;
				min = Math.max(min, num3[i]);
			}
		
		System.out.println(max);
		System.out.println(min);
	}
}
]]></solution>
	</item>
</fps>
