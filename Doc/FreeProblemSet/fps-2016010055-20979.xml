<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[传球游戏]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[50]]></memory_limit>

<description><![CDATA[<p>
	上体育课的时候，小蛮的老师经常带着同学们一起做游戏。这次，老师带着同学们一起做传球游戏。
</p>
<p>
	游戏规则是这样的：n个同学站成一个圆圈，其中的一个同学手里拿着一个球，当老师吹哨子时开始传球，每个同学可以把球传给自己左右的两个同学中的一个（左右任意），当老师再次吹哨子时，传球停止，此时，拿着球没传出去的那个同学就是败者，要给大家表演一个节目。
</p>
<p>
	聪明的小蛮提出一个有趣的问题：有多少种不同的传球方法可以使得从小蛮手里开始传的球，传了m次以后，又回到小蛮手里。两种传球的方法被视作不同的方法，当且仅当这两种方法中，接到球的同学按接球顺序组成的序列是不同的。比如有3个同学1号、2号、3号，并假设小蛮为1号，球传了3次回到小蛮手里的方式有1-&gt;2-&gt;3-&gt;1和1-&gt;3-&gt;2-&gt;1，共2种。
</p>
<p>
	<br />
</p>]]></description>
<input><![CDATA[<p>
	每组输入数据共一行，有两个用空格隔开的整数n，m（3&lt;=n&lt;=30，1&lt;=m&lt;=30）。
</p>
<p>
	<br />
</p>
<p>
	数据规模：
</p>
<p>
	40%的数据满足：3&lt;=n&lt;=30，1&lt;=m&lt;=20；
</p>
<p>
	100%的数据满足：3&lt;=n&lt;=30，1&lt;=m&lt;=30。<span style="line-height:1.5;"></span>
</p>
<p>
	<span style="line-height:1.5;"><br />
</span>
</p>]]></input> 
<output><![CDATA[<p>
	每组输出共一行，有一个整数，表示符合题意的方法数。
</p>
<p>
	<br />
</p>]]></output>
<sample_input><![CDATA[3 3]]></sample_input>
<sample_output><![CDATA[2]]></sample_output>
  <test_input><![CDATA[5 27]]></test_input>
<test_output><![CDATA[26667864
]]></test_output>
<test_input><![CDATA[10 20]]></test_input>
<test_output><![CDATA[215766
]]></test_output>
<test_input><![CDATA[15 30]]></test_input>
<test_output><![CDATA[155117522
]]></test_output>
<test_input><![CDATA[7 10]]></test_input>
<test_output><![CDATA[252
]]></test_output>
<test_input><![CDATA[30 30]]></test_input>
<test_output><![CDATA[155117522
]]></test_output>
<test_input><![CDATA[10 29]]></test_input>
<test_output><![CDATA[0
]]></test_output>
<test_input><![CDATA[3 30]]></test_input>
<test_output><![CDATA[357913942
]]></test_output>
<test_input><![CDATA[30 14]]></test_input>
<test_output><![CDATA[3432
]]></test_output>
<test_input><![CDATA[8 28]]></test_input>
<test_output><![CDATA[67117056
]]></test_output>
<test_input><![CDATA[4 3]]></test_input>
<test_output><![CDATA[0
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛普及组-2008年NOIP全国联赛普及组]]></source>
		<solution language="C"><![CDATA[int n,m;
int s(int x)
{    
	if(x<1) 
		return x+n;   
	if(x>n) 
		return x-n;  
	return x;
}
int main()
{   
	int a[31][31],i,j;
	memset(a,0,sizeof(a));
    scanf("%d%d",&n,&m);   
    a[1][2]=a[1][n]=1;
    for (i=2;i<=m;i++)    
        for (j=1;j<=n;j++) 
	        a[i][j]=a[i-1][s(j-1)]+a[i-1][s(j+1)];   
   printf("%d\n",a[m][1]);  
   return 0;
}]]></solution>
			<solution language="C++"><![CDATA[#include<stdio.h>
#include<iostream>
using namespace std;
int m,n;
int pd(int x)
{
	if(x<1)return x+n;
	if(x>n)return x-n;
	return x;
} 
int main()
{
	int f[31][31]={0},i,j;
	cin>>n>>m;
	f[1][2]=f[1][n]=1;
	for(i=2;i<=m;i++)
	{
		for(j=1;j<=n;j++)
		{
			f[i][j]=f[i-1][pd(j-1)]+f[i-1][pd(j+1)];
		}
	}
	cout<<f[m][1];
	return 0;
}]]></solution>
			<solution language="Pascal"><![CDATA[var
  n,m,i,j:longint;
  f:array[1..33,0..33]of longint;
begin
  //assign(input,'ball.in'); reset(input);
  //assign(output,'ball.out'); rewrite(output);

  readln(n,m);
  f[1,0]:=1;
  for i:=1 to m do
    for j:=1 to n do
      if j=1 then
        f[j,i]:=f[n,i-1]+f[2,i-1]
      else
        if j=n then
          f[j,i]:=f[1,i-1]+f[n-1,i-1]
        else
          f[j,i]:=f[j+1,i-1]+f[j-1,i-1];
  writeln(f[1,m]);

  //close(input);
  //close(output);
end.
]]></solution>
	</item>
</fps>
