<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[字符串的展开]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[125]]></memory_limit>

<description><![CDATA[<p>
	在初赛普及组的“阅读程序写结果”的问题中，我们曾给出一个字符串展开的例子：如果在输入的字符串中，含有类似于“d-h”或者“4-8”的字串，我们就把它当作一种简写，输出时，用连续递增的字母获数字串替代其中的减号，即将上面两个子串分别输出为“defgh”和“45678”。在本题中，我们通过增加一些参数的设置，使字符串的展开更为灵活。具体约定如下：
</p>
<p>
	(1) 遇到下面的情况需要做字符串的展开：在输入的字符串中，出现了减号“-”，减号两侧同为小写字母或同为数字，且按照ASCII码的顺序，减号右边的字符严格大于左边的字符。
</p>
<p>
	(2) 参数p1：展开方式。p1=1时，对于字母子串，填充小写字母；p1=2时，对于字母子串，填充大写字母。这两种情况下数字子串的填充方式相同。p1=3时，不论是字母子串还是数字字串，都用与要填充的字母个数相同的星号“*”来填充。
</p>
<p>
	(3) 参数p2：填充字符的重复个数。p2=k表示同一个字符要连续填充k个。例如，当p2=3时，子串“d-h”应扩展为“deeefffgggh”。减号两边的字符不变。
</p>
<p>
	(4) 参数p3：是否改为逆序：p3=1表示维持原来顺序，p3=2表示采用逆序输出，注意这时候仍然不包括减号两端的字符。例如当p1=1、p2=2、p3=2时，子串“d-h”应扩展为“dggffeeh”。
</p>
<p>
	(5) 如果减号右边的字符恰好是左边字符的后继，只删除中间的减号，例如：“d-e”应输出为“de”，“3-4”应输出为“34”。如果减号右边的字符按照ASCII码的顺序小于或等于左边字符，输出时，要保留中间的减号，例如：“d-d”应输出为“d-d”，“3-1”应输出为“3-1”。
</p>
<p>
	<br />
</p>]]></description>
<input><![CDATA[每组输入数据包括两行：<br />
<p>
	<span style="line-height:1.5;">第1行为用空格隔开的3个正整数，依次表示参数p1，p2，p3。</span>
</p>
<p>
	<span style="line-height:1.5;">第2行为一行字符串，仅由数字、小写字母和减号“-”组成。行首和行末均无空格。</span>
</p>
<p>
	<span style="line-height:1.5;"><br />
</span>
</p>
<p>
	<span style="line-height:1.5;">数据规模：</span>
</p>
<p>
	<span style="line-height:1.5;">40%的数据满足：字符串长度不超过5；</span>
</p>
<p>
	<span style="line-height:1.5;">100%的数据满足：1&lt;=p1&lt;=3，1&lt;=p2&lt;=8，1&lt;=p3&lt;=2。字符串长度不超过100。</span>
</p>
<p>
	<span style="line-height:1.5;"><br />
</span>
</p>]]></input> 
<output><![CDATA[<p>
	每组输出只有一行，为展开后的字符串。
</p>
<p>
	<br />
</p>]]></output>
<sample_input><![CDATA[1 2 1
abcs-w1234-9s-4zz

2 3 2
a-d-d

3 4 2
di-jkstra2-6]]></sample_input>
<sample_output><![CDATA[abcsttuuvvw1234556677889s-4zz

aCCCBBBd-d

dijkstra2************6]]></sample_output>
  <test_input><![CDATA[3 8 2
0-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90-90
]]></test_input>
<test_output><![CDATA[0****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90****************************************************************90
]]></test_output>
<test_input><![CDATA[3 1 1
-z-l-k-d-h-f-q-w-y-e-r-o-i-q-u-y-e-s-a-k-j-d-h-f-l-a-k-s-d-h-f-i-q-u-i-y-r-q-l-w-e-h-k-z-x-h-d-f-l-k
]]></test_input>
<test_output><![CDATA[-z-l-k-d***h-f**********q*****w*y-e************r-o-i*******q***u***y-e*************s-a*********k-j-d***h-f*****l-a*********k*******s-d***h-f**i*******q***u-i***************y-r-q-l**********w-e**h**k**************z-x-h-d*f*****l-k
]]></test_output>
<test_input><![CDATA[2 8 2
--09-8-w-er-7h-08w-e7-hc-r890-q7w-eh-rc98-07-q8-ewr-8h-c-8-294-5-dsf--k-h-2-48-3k-h-sd-fq-a-
]]></test_input>
<test_output><![CDATA[--09-8-w-er-7h-08w-e7-hcQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDr890-q7w-ehQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIrc98-07-q8-ewr-8h-c-8-2945-dsf--k-h-23333333348-3k-hRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIsdEEEEEEEEfq-a-
]]></test_output>
<test_input><![CDATA[2 8 2
a-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za-za
]]></test_input>
<test_output><![CDATA[aYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBzaYYYYYYYYXXXXXXXXWWWWWWWWVVVVVVVVUUUUUUUUTTTTTTTTSSSSSSSSRRRRRRRRQQQQQQQQPPPPPPPPOOOOOOOONNNNNNNNMMMMMMMMLLLLLLLLKKKKKKKKJJJJJJJJIIIIIIIIHHHHHHHHGGGGGGGGFFFFFFFFEEEEEEEEDDDDDDDDCCCCCCCCBBBBBBBBza
]]></test_output>
<test_input><![CDATA[2 4 2
a-b-c
]]></test_input>
<test_output><![CDATA[abc
]]></test_output>
<test_input><![CDATA[1 1 1
abcde
]]></test_input>
<test_output><![CDATA[abcde
]]></test_output>
<test_input><![CDATA[2 2 1
a-z
]]></test_input>
<test_output><![CDATA[aBBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXXYYz
]]></test_output>
<test_input><![CDATA[1 5 1
-254-243-52-345-243-5234-52-345-234-52-345-234-52345-4325-2345-2345-2345
]]></test_input>
<test_output><![CDATA[-254-2434444452345-24344444523452345-23452345-23452345-4325-2345-2345-2345
]]></test_output>
<test_input><![CDATA[1 1 1
2-43-sdf-ewr0-j-9re-j0g-9e0-9as-d09jf-9asdjf0q-w-ejr0q-59jdsnf-9z-x9v0-sd9fn--q
]]></test_input>
<test_output><![CDATA[2343-sdf-ewr0-j-9refghij0g-9e0123456789as-d09jf-9asdjf0qrstuvw-ejr0q-59jdsnf-9z-x9v0-sd9fn--q
]]></test_output>
<test_input><![CDATA[2 2 2
9-a-a
]]></test_input>
<test_output><![CDATA[9-a-a
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛提高组-2007年NOIP全国联赛提高组]]></source>
		<solution language="C"><![CDATA[#include<stdio.h>
#include<string.h>
#define N 110
int main()
{
    char a[N];
    int i,n,aa[2],m,p1,p2,j,p3;
    scanf("%d %d %d",&p1,&p2,&p3);
    scanf("%s",a);
    for(i=0;a[i]!='\0';){
        if(a[i]=='-'){
            n=i;
            if(a[n-1]>='a' && a[n+1]<='z'){
                aa[0]=a[n-1]-'a';
                aa[1]=a[n+1]-'a';
                if(aa[0]>=aa[1]) printf("-");
                else if(aa[0]==aa[1]-1) printf("");
                else{
                    //printf("%c",aa[0]+'a');
                    if(p3==1){
                        for(m=aa[0]+1;m<aa[1];m++){
                            if(p1==1)
                                for(j=1;j<=p2;j++) printf("%c",m+'a');//小写字母；
                            else if(p1==2)
                                for(j=1;j<=p2;j++) printf("%c",m+'A');
                            else
                                for(j=1;j<=p2;j++) printf("*");
                        }
                    }
                    else{
                        for(m=aa[1]-1;m>=aa[0]+1;m--){
                            if(p1==1)
                                for(j=1;j<=p2;j++) printf("%c",m+'a');//小写字母；
                            else if(p1==2)
                                for(j=1;j<=p2;j++) printf("%c",m+'A');
                            else
                                for(j=1;j<=p2;j++) printf("*");
                        }
                    }
                    //printf("%c",aa[1]+'a');
                }
            }
            else if(a[n-1]>='0' && a[n+1]<='9'){
                aa[0]=a[n-1]-'0';
                aa[1]=a[n+1]-'0';
                if(aa[0]>=aa[1]) printf("-");
                else if(aa[0]==aa[1]-1) printf("");
                else{
                    //printf("%c",aa[0]+'a');
                    if(p3==1){
                        for(m=aa[0]+1;m<aa[1];m++){
                            if(p1==1 || p1==2)
                                for(j=1;j<=p2;j++) printf("%c",m+'0');
                            else
                                for(j=1;j<=p2;j++) printf("*");
                        }
                    }
                    else{
                        for(m=aa[1]-1;m>=aa[0]+1;m--){
                            if(p1==1 || p1==2)
                                for(j=1;j<=p2;j++) printf("%c",m+'0');
                            else
                                for(j=1;j<=p2;j++) printf("*");
                        }
                    }
                    //printf("%c",aa[1]+'a');
                }
            }
            else{
                printf("%c",a[i]);
            }
            i++;
        }
        else{
            printf("%c",a[i]);
            i++;
        }
    }
    return 0;
}
]]></solution>
			<solution language="C++"><![CDATA[//先存再输出是很愚蠢的方法！！
//一边改一边输出！！ 
#include <iostream> 
#include <cstdio>
#include <cstring>
using namespace std;
int p1,p2,p3;
int flag;
char t,i,flag2;
	
char change(char c){					//p1=2填充大写字母 
	return c-32;
}

void ptkz(char p){
	int i;
	if (p1==1){
		for(i=1;i<=p2;i++){
			cout<<p;				//直接输出小写字母 
		}
	}
	if (p1==2&&p>='a'&&p<='z'){
		for(i=1;i<=p2;i++){
			cout<<change(p);		//输出大写字母 
		}
	}
	if(p1==2&&p>='0'&&p<='9'){
		for(i=1;i<=p2;i++){
			cout<<p;				//填充数字串 
		}
	}
}
void kzxh(){
	int i;
	for(i=1;i<=p2;i++){
		cout<<"*";					//填充星号串 
	}
}

int judge(char a,char b){
	if(a>='a'&&a<='z'&&b>='a'&&b<='z')
	if(a<b) return 1;
	if(a>='0'&&a<='9'&&b>='0'&&b<='9')
	if(a<b) return 1;
	return 0;
}

int main(){
	cin>>p1>>p2>>p3;
	flag2='#';		//作为一个标志使用 
	while(cin>>t){
		if(t!='-')cout<<t;		//非 '-' 则直接输出即可 
		else{
			if(cin>>t){
				flag=judge(flag2,t);
				if(flag){
					if(p3==1){
						for(i=flag2+1;i<=t-1;i++){
							if(p1!=3)ptkz(i);else kzxh();
						}
					}
					else{
						for(i=t-1;i>=flag2+1;i--){
							if(p1!=3)ptkz(i);else kzxh();
						}
					}
					cout<<t;
				}
				else cout<<"-"<<t;
			}
			else cout<<"-";
		}
		flag2=t;
	}
	cout<<endl;
	return 0;
}]]></solution>
			<solution language="Pascal"><![CDATA[var
  p1,p2,p3,i:longint;
  from,en,ch:char;
  ans:ansistring;
  s:string;

function operate(ch:char):string;
  var rt:string;
    i:longint;
  begin
    if (ch in ['a'..'z'])and(p1=2)
      then ch:=chr(ord(ch)-32);
    if p1=3 then ch:='*';
    rt:='';
    for i:=1 to p2 do rt:=rt+ch;
    exit(rt);
  end;

begin
  readln(p1,p2,p3);
  readln(s);
  ans:=''; i:=1;
  while i<=length(s) do
    begin if s[i]='-' then
      begin if (i>1)and(i<length(s))and(((s[i-1] in['0'..'9'])and(s[i+1] in ['0'..'9'])and(s[i-1]<s[i+1]))
               or ((s[i-1] in ['a'..'z'])and(s[i+1] in ['a'..'z'])and(s[i-1]<s[i+1])))
              then begin
                     from:=chr(ord(s[i-1])+1);
                     en:=chr(ord(s[i+1])-1);
                     if p3=1
                  then for ch:=from to en do
                         ans:=ans+operate(ch)
                  else for ch:=en downto from do
                         ans:=ans+operate(ch);
                   end
              else ans:=ans+'-';
       end
       else ans:=ans+s[i];
    inc(i);
  end;
  writeln(ans);
end.
]]></solution>
	</item>
</fps>
