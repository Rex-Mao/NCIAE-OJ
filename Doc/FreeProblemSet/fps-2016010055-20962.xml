<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[开心的金明]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[125]]></memory_limit>

<description><![CDATA[<p>
	金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行”。今天一早金明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的价格（都是整数元）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。
</p>
<p>
	设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，...，jk，则所求的总和为：
</p>
<p>
	v[j1]*w[j1]+v[j2]*w[j2]+ …+v[jk]*w[jk]。（其中*为乘号）
</p>
<p>
	请你帮助金明设计一个满足要求的购物单。
</p>
<p>
	<br />
</p>]]></description>
<input><![CDATA[<p>
	每组输入数据的第1行，为两个正整数，用一个空格隔开：
</p>
<p>
	N m
</p>
<p>
	<span style="line-height:1.5;">（其中N（&lt;30000）表示总钱数，m（&lt;25）为希望购买物品的个数。）</span>
</p>
<p>
	<span style="line-height:1.5;">从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有2个非负整数</span>
</p>
<p>
	<span style="line-height:1.5;">v p</span>
</p>
<p>
	<span style="line-height:1.5;">（其中v表示该物品的价格(v&lt;=10000)，p表示该物品的重要度(1~5)）</span>
</p>
<p>
	<span style="line-height:1.5;"><br />
</span>
</p>]]></input> 
<output><![CDATA[<p>
	每组输出只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;100000000）。
</p>
<p>
	<br />
</p>]]></output>
<sample_input><![CDATA[1000 5
800 2
400 5
300 5
400 3
200 2]]></sample_input>
<sample_output><![CDATA[3900]]></sample_output>
  <test_input><![CDATA[4000 15
821 3
422 5
458 5
500 3
200 2
430 4
530 3
239 3
630 4
500 2
220 3
430 3
400 5
400 5
500 3
]]></test_input>
<test_output><![CDATA[16393
]]></test_output>
<test_input><![CDATA[2000 8
800 2
400 5
400 5
500 3
200 2
430 4
540 3
239 3
]]></test_input>
<test_output><![CDATA[7937
]]></test_output>
<test_input><![CDATA[21000 23
2821 3
2422 5
6758 5
3500 3
2758 5
1200 2
430 4
530 3
239 3
2630 4
500 2
1120 3
1430 3
1420 5
400 4
1500 3
666 3
521 4
4220 1
2430 3
1400 2
3410 4
2520 3
]]></test_input>
<test_output><![CDATA[97071
]]></test_output>
<test_input><![CDATA[3000 12
800 2
400 5
400 5
500 3
200 2
430 4
530 3
239 3
630 4
500 2
220 3
430 3
]]></test_input>
<test_output><![CDATA[11430
]]></test_output>
<test_input><![CDATA[12000 18
2758 5
3500 3
1200 2
430 4
530 3
239 3
2630 4
500 2
1120 3
1430 3
1420 5
400 1
1500 3
666 3
521 4
2430 3
1400 2
3410 4
]]></test_input>
<test_output><![CDATA[51161
]]></test_output>
<test_input><![CDATA[18000 20
6758 5
3500 3
1200 2
430 4
530 3
239 3
2630 4
500 2
1120 3
1430 3
1420 5
400 4
1500 3
666 3
521 4
1220 1
2430 3
1400 2
3410 4
2520 3
]]></test_input>
<test_output><![CDATA[77744
]]></test_output>
<test_input><![CDATA[26000 24
6608 5
2821 3
4808 5
2821 3
422 5
3500 3
1200 2
430 4
3530 3
239 3
7730 4
500 2
120 3
3430 3
420 5
2500 3
2666 3
2521 4
3220 1
1430 3
1400 2
3410 4
2520 3
2500 2
]]></test_input>
<test_output><![CDATA[115934
]]></test_output>
<test_input><![CDATA[1200 5
800 2
400 5
400 5
500 3
200 2

]]></test_input>
<test_output><![CDATA[4400
]]></test_output>
<test_input><![CDATA[20000 18
821 3
7422 5
458 5
500 3
200 2
430 4
530 3
239 3
3630 4
500 2
220 3
430 3
2400 5
400 5
500 3
666 3
2521 4
3220 1
]]></test_input>
<test_output><![CDATA[87935
]]></test_output>
<test_input><![CDATA[5000 18
821 3
422 5
458 5
500 3
200 2
430 4
530 3
239 3
630 4
500 2
220 3
430 3
400 5
400 5
500 3
666 3
521 4
220 1
]]></test_input>
<test_output><![CDATA[19902
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛普及组-2006年NOIP全国联赛普及组]]></source>
		<solution language="C"><![CDATA[#include <stdio.h>   
  
int main()  
{  
    int  dp[30000];
    int n,m;
    int i,j; 
    while(scanf("%d%d",&n,&m)!=EOF)    
    {  
        for(j=1;j<=m;j++)  
        {  
            int v,p;     
            scanf("%d%d",&v,&p); 
            for(int i=n;i>=v;i--)  
                if(dp[i]<dp[i-v]+v*p)  
                    dp[i]=dp[i-v]+v*p;  
        }  
        int max=0;  
        for(i=1;i<n;i++)  
            if(dp[i]>max)  
                max=dp[i];  
        printf("%d\n",max);  
        //memset(dp,0,sizeof(dp));  
    }  
    return 0;  
}  
]]></solution>
			<solution language="C++"><![CDATA[#include <iostream>
//状态转移方程:
//F[i] = max{F[v],F[v-Ci]+Wi*Ci}
using namespace std;
int C[30];
int W[30];
int F[30000] = {0};
int main()
{
	int N,m;
	cin >> N >> m;
	for(int i=1; i<=m; ++i)
		cin >> C[i] >> W[i];
	for(int i=1; i<=m; ++i)
		for(int v=N; v>=C[i]; --v)
		{
			if(F[v-C[i]]+W[i]*C[i] > F[v])
				F[v] = F[v-C[i]]+W[i]*C[i];	
		}
	cout << F[N]<< endl;
	return 0;
}
]]></solution>
			<solution language="Pascal"><![CDATA[var n,m,i,max:longint;a,b:array[0..25]of longint;
procedure try(t,s,x:longint);
var i:longint;
begin
 if t>m then
  begin
   if (s<=n)and(x>max)then max:=x;
   exit;
  end;
 for i:=0 to 1 do
  if i=1 then try(t+1,s+a[t],x+b[t]*a[t])
  else try(t+1,s,x);
end;
begin
 read(n,m);
 for i:=1 to m do read(a[i],b[i]);
 max:=-1;
 try(1,0,0);
 writeln(max);
end.]]></solution>
	</item>
</fps>
