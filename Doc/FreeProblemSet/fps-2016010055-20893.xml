<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[排三角形]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[125]]></memory_limit>

<description><![CDATA[<p class="MsoBodyTextIndent">
	将<span>1</span>，<span>2</span>，······<span>,9</span>共<span>9</span>个数排成下列形态的三角形。
</p>
<p class="MsoBodyTextIndent">
	<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
a</span> 
</p>
<p class="MsoBodyTextIndent">
	<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c</span> 
</p>
<p class="MsoBodyTextIndent">
	<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e</span> 
</p>
<p class="MsoBodyTextIndent">
	<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
f&nbsp;&nbsp;&nbsp;&nbsp; g&nbsp;&nbsp;&nbsp;&nbsp; h&nbsp;&nbsp;&nbsp;&nbsp;
i</span> 
</p>
<p class="MsoBodyTextIndent">
	<span>&nbsp;&nbsp;&nbsp; </span> 
</p>
<p class="MsoBodyTextIndent">
	<span>&nbsp;&nbsp;&nbsp; </span>其中：<span>a</span>～<span>i</span>分别表示<span>1</span>，<span>2</span>，······<span>,9</span>中的一个数字，并要求同时满足下列条件：<span></span> 
</p>
<p class="MsoList2" style="margin-left:0cm;text-indent:0cm;">
	<span>&nbsp;&nbsp;&nbsp; </span>（<span>1</span>）<span>a&lt;f&lt;i;</span> 
</p>
<p class="MsoList2" style="margin-left:0cm;text-indent:0cm;">
	<span>&nbsp;&nbsp;&nbsp; </span>（<span>2</span>）<span>b&lt;d, g&lt;h, c&lt;e</span> 
</p>
<p>
	&nbsp;&nbsp;&nbsp; （3）a+b+d+f=f+g+h+i=i+e+c+a=P
</p>
<p>
	<br />
</p>
<p class="MsoBodyTextFirstIndent2" style="margin-left:81.0pt;text-indent:-81.0pt;">
	程序要求：<span></span> 
</p>
<p class="MsoBodyTextFirstIndent2" style="margin-left:81.0pt;text-indent:-81.0pt;">
	<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>根据输入的边长之和<span>P，</span><span style="line-height:1.5;">输出所有满足上述条件的三角形的个数。</span> 
</p>
<p class="MsoBodyTextFirstIndent2" style="margin-left:81.0pt;text-indent:-81.0pt;">
	<span style="line-height:1.5;"><br />
</span> 
</p>
<p>
	<br />
</p>]]></description>
<input><![CDATA[<p>
	每个测试文件只包含一组测试数据，每组输入一个整数P，表示边长之和。
</p>
<p>
	<br />
</p>]]></input> 
<output><![CDATA[<p>
	对于每组输入数据，<span>输出所有满足上述条件的三角形的个数。</span> 
</p>
<p>
	<span>如果无解，则输出"Not exist"（引号不输出）。</span> 
</p>
<p>
	<span><br />
</span> 
</p>]]></output>
<sample_input><![CDATA[23]]></sample_input>
<sample_output><![CDATA[2]]></sample_output>
  <test_input><![CDATA[23

]]></test_input>
<test_output><![CDATA[2
]]></test_output>
<test_input><![CDATA[20

]]></test_input>
<test_output><![CDATA[6
]]></test_output>
<test_input><![CDATA[19

]]></test_input>
<test_output><![CDATA[4
]]></test_output>
<test_input><![CDATA[18

]]></test_input>
<test_output><![CDATA[Not exist
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛普及组 1997年NOIP全国联赛普及组]]></source>
		<solution language="C"><![CDATA[#include<stdio.h>
int main()
{
	int k[9]={1,2,3,4,5,6,7,8,9};
	int a,b,c,d,e,f,g,h,i,j,l=0,m,n,o,p,q,r,s,t,u,P;
	scanf("%d",&P);
	for(j=0;j<9;j++)
	{
		a=k[j];
		for(m=0;m<9;m++)
		if(a!=k[m])
		{
			b=k[m];
			for(n=0;n<9;n++)
			
				if(k[n]!=a&&k[n]!=b)
				{
					c=k[n];
					for(o=0;o<9;o++)
					
						if(k[o]!=a&&k[o]!=b&&k[o]!=c)
						{
							d=k[o];
							for(p=0;p<9;p++)
							
								if(k[p]!=a&&k[p]!=b&&k[p]!=c&&k[p]!=d)
								{
									e=k[p];
									for(q=0;q<9;q++)
									
										if(k[q]!=a&&k[q]!=b&&k[q]!=c&&k[q]!=d&&k[q]!=e)
										{
											f=k[q];
											for(r=0;r<9;r++)
										    
												if(k[r]!=a&&k[r]!=b&&k[r]!=c&&k[r]!=d&&k[r]!=e&&k[r]!=f)
												{
													g=k[r];
													for(s=0;s<9;s++)
													if(k[s]!=a&&k[s]!=b&&k[s]!=c&&k[s]!=d&&k[s]!=e&&k[s]!=f&&k[s]!=g)
													{
														h=k[s];
														for(t=0;t<9;t++)
														
															if(k[t]!=a&&k[t]!=b&&k[t]!=c&&k[t]!=d&&k[t]!=e&&k[t]!=f&&k[t]!=g&&k[t]!=h)
															{
																i=k[t];
																if(a<f&&f<i&&b<d&&g<h&&c<e&&a+b+d+f==f+g+h+i&&f+g+h+i==i+e+c+a&&i+e+c+a==P)
																l=l+1;
															}
														
													}
												}
											
										}
									
								}
							
						}
					
				}
			
		}
	}
	
		if(l==0)
			printf("Not exist");
		else
		printf("%d",l);
		return 0;
}]]></solution>
			<solution language="C++"><![CDATA[#include<iostream>
#include<algorithm>
using namespace std;
int main()
{
	int p;int count=0;
	while (cin>>p)
	{
	count=0; 
    int arr[9];
    int i;
    for (i=0;i<9;i++) arr[i]=i+1;
    while (next_permutation(arr,arr+9))
    {
    	if (arr[0]<arr[5] && arr[5]<arr[8])
    	  if (arr[1]<arr[3] && arr[6]<arr[7] && arr[2]<arr[4])
    	    if (arr[0]+arr[1]+arr[3]+arr[5]==p &&
			    arr[8]+arr[6]+arr[7]+arr[5]==p &&
				arr[0]+arr[2]+arr[4]+arr[8]==p )
                   count++;
    }
    if (count)
          cout<<count<<endl;
    else cout<<"Not exist"<<endl;
    }
	return 0;
} ]]></solution>
			<solution language="Pascal"><![CDATA[var  p,a,b,c,d,e,f,g,h,i,s:longint;
begin
  readln(p);
  for a:=1 to 9 do
   for b:=1 to 9 do
    for c:=1 to 9 do
     for d:=b+1 to 9 do
      for e:=c+1 to 9 do
       for f:=a+1 to 9 do
        for g:=1 to 9 do
         for h:=g+1 to 9 do
          for i:=f+1 to 9 do
           if (a+b+c+d+e+f+g+h+i=45)and(a*b*c*d*e*f*g*h*i=362880)and(a<f)and
            (f<i)and(b<d)and(g<h)and(c<e)and(a+b+d+f=p)and(f+g+h+i=p)and(i+e+c+a=p)
             then s:=s+1;
  if s>0 then writeln(s) else writeln('Not exist');
end.]]></solution>
			<solution language="Java"><![CDATA[
import java.util.Scanner;
import java.util.Vector;
 
public class Main {
	public static int count = 0;
	private void dosome(int n, Vector<Integer> re, Vector<Integer> su, int p[]) {
		// TODO Auto-generated method stub
		if(re.size() == 0) {
			if(su.elementAt(0) < su.elementAt(5) && su.elementAt(5) < su.elementAt(8))
				if(su.elementAt(3)>su.elementAt(1) && su.elementAt(7)>su.elementAt(6) && su.elementAt(4) > su.elementAt(2))
					if(su.elementAt(0)+su.elementAt(1)+su.elementAt(3)+su.elementAt(5) ==                                                        n && su.elementAt(0)+su.elementAt(2) + su.elementAt(4)+su.elementAt(8) == n && su.elementAt(5)+su.elementAt(6) + su.elementAt(7)+su.elementAt(8) == n) {
						count++;
						if(count == 1)
							for (int i = 0; i < p.length; i++) {
								p[i] = su.elementAt(i);
							}
					}
 
		}
		for (int i = 0; i < re.size(); i++) {
			Vector<Integer> tre = new Vector<Integer>(re);
			Vector<Integer> tsu = new Vector<Integer>(su);
			
			tsu.add(re.elementAt(i));
			tre.remove(i);
			
			new Main().dosome(n,tre, tsu, p);
		}
 
	}
 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner sc = new Scanner(System.in);
		
		int n = sc.nextInt();
		int p[] = new int [9];
		Vector<Integer> su = new Vector<Integer>();
		Vector<Integer> re = new Vector<Integer>();
        for (int i = 1; i < 10; i++) {
            re.add(i);
        }
		new Main().dosome(n, re, su, p);
		if(count == 0) {
			System.out.println("Not exist");
		}
		else
		{
			System.out.println(Main.count);
		}
 
	}
 
}
]]></solution>
	</item>
</fps>
