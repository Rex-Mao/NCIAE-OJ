<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[乌龟棋]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>
	小明过生日的时候，爸爸送给他一副乌龟棋当作礼物。
</p>
乌龟棋的棋盘是一行N个格子，每个格子上一个分数（非负整数）。棋盘第1格是唯一的起点，第N格是终点，游戏要求玩家控制一个乌龟棋子从起点出发走到终点。<br />
……<br />
<p>
	1 2 3 4 5 …… N
</p>
<p>
	乌龟棋中M张爬行卡片，分成4种不同的类型（M张卡片中不一定包含所有4种类型的卡片，见样例），每种类型的卡片上分别标有1、2、3、4四个数字之一，表示使用这种卡片后，乌龟棋子将向前爬行相应的格子数。游戏中，玩家每次需要从所有的爬行卡片中选择一张之前没有使用过的爬行卡片，控制乌龟棋子前进相应的格子数，每张卡片只能使用一次。<span style="line-height:1.5;">游戏中，乌龟棋子自动获得起点格子的分数，并且在后续的爬行中每到达一个格子，就得到</span><span style="line-height:1.5;">该格子相应的分数。玩家最终游戏得分就是乌龟棋子从起点到终点过程中到过的所有格子的</span><span style="line-height:1.5;">分数总和。</span><span style="line-height:1.5;">很明显，用不同的爬行卡片使用顺序会使得最终游戏的得分不同，小明想要找到一种卡</span><span style="line-height:1.5;">片使用顺序使得最终游戏得分最多。</span>
</p>
<p>
	<span style="line-height:1.5;">现在，告诉你棋盘上每个格子的分数和所有的爬行卡片，你能告诉小明，他最多能得到</span><span style="line-height:1.5;">多少分吗？</span>
</p>
<p>
	<span style="line-height:1.5;"><br />
</span>
</p>]]></description>
<input><![CDATA[<p>
	每组输入数据的每行中两个数之间用一个空格隔开。第1行2个正整数N和M，分别表示棋盘格子数和爬行卡片数。第2行N个非负整数，a1a2...aN，其中ai表示棋盘第i个格子上的分数。第3行M个整数，b1b2...bM，表示M张爬行卡片上的数字。 输入数据保证到达终点时刚好用光M张爬行卡片，即N-1=∑(1-&gt;M)bi。
</p>
<p>
	<br />
</p>
<p>
	数据规模：
</p>
<p>
	<span style="line-height:1.5;">对于30%的数据有1≤N≤30，1≤M≤12；</span>
</p>
<p>
	对于50%的数据有1≤N≤120，1≤M≤50，且4种爬行卡片，每种卡片的张数不会超过20。
</p>
<p>
	对于100%的数据有1≤N≤350，1≤M≤120，且4种爬行卡片，每种卡片的张数不会超过40；
</p>
<p>
	0≤ai≤100，1≤i≤N；
</p>
<p>
	1≤bi≤4，1≤i≤M。
</p>
<p>
	输入数据保证N−1=<span>∑(1-&gt;M)bi。</span>
</p>
<p>
	<span><br />
</span>
</p>]]></input> 
<output><![CDATA[<p>
	每组输出只有1行，1个整数，表示小明最多能得到的分数。
</p>
<p>
	<br />
</p>
<p>
	下面是对样例数据的解释：
</p>
<p>
	小明使用爬行卡片顺序为1，1，3，1，2，得到的分数为6+10+14+8+18+17=73。注意，由于起点是1，所以自动获得第1格的分数6。<span style="line-height:1.5;"></span>
</p>
<p>
	<span style="line-height:1.5;"><br />
</span>
</p>]]></output>
<sample_input><![CDATA[9 5
6 10 14 2 8 8 18 5 17
1 3 1 2 1

13 8
4 96 10 64 55 13 94 53 5 24 89 8 30
1 1 1 1 1 2 4 1]]></sample_input>
<sample_output><![CDATA[73

455]]></sample_output>
  <test_input><![CDATA[60 20
54 44 41 21 99 59 44 29 72 89 15 80 42 26 99 83 35 21 90 41 68 58 54 40 98 30 22 88 14 47 100 71 21 23 53 14 33 50 85 40 30 32 45 42 47 27 18 55 73 57 43 45 88 24 38 88 67 7 99 69
3 3 1 2 1 4 2 4 3 4 4 4 2 4 1 4 3 4 3 3
]]></test_input>
<test_output><![CDATA[1667
]]></test_output>
<test_input><![CDATA[292 120
75 39 19 12 84 81 97 76 14 67 83 61 38 46 24 38 85 6 5 19 63 33 48 32 63 11 13 99 92 10 53 46 76 61 56 63 51 96 47 70 38 49 66 4 93 85 13 14 2 8 62 97 59 62 74 23 49 51 73 74 77 97 63 79 35 57 94 98 78 34 46 80 7 12 75 69 85 81 26 3 32 40 99 51 85 99 49 66 86 7 90 67 50 45 29 22 63 84 60 24 66 84 91 82 23 32 70 99 70 91 19 94 1 27 32 19 46 60 14 25 39 80 66 72 89 23 38 40 26 69 95 81 86 57 5 64 79 60 56 6 8 63 43 60 15 5 58 11 46 16 39 16 28 6 44 18 36 23 38 11 42 49 82 9 81 90 5 30 19 89 16 66 94 64 42 87 71 41 48 61 29 100 27 99 89 64 80 30 72 28 74 65 84 99 17 12 58 75 70 68 75 50 79 55 61 59 92 81 49 20 22 11 7 99 99 87 46 74 39 99 48 10 49 12 76 36 72 94 66 95 8 47 62 84 16 45 45 31 94 24 85 93 77 95 28 94 13 38 42 62 68 16 18 2 95 14 29 88 36 91 89 59 87 17 86 71 11 13 50 57 10 54 98 89 84 15 11 21 84 97 42 29 87 3 4 24 9 45 9 82 36 72
1 2 2 4 1 2 2 2 3 4 1 1 1 2 2 4 3 1 4 4 2 3 4 1 3 1 4 3 3 2 2 2 3 3 4 4 1 2 2 1 1 4 1 3 1 1 3 3 1 3 2 3 4 4 1 2 2 3 1 1 2 2 4 4 4 3 4 4 2 1 2 2 4 2 4 4 4 4 4 2 3 1 2 3 2 2 2 1 4 4 1 3 4 2 4 2 1 1 2 2 4 4 1 1 2 3 1 4 2 3 4 1 1 4 1 1 1 1 1 3
]]></test_input>
<test_output><![CDATA[9485
]]></test_output>
<test_input><![CDATA[253 100
100 85 66 12 11 3 49 71 30 36 15 83 54 10 56 86 54 27 53 100 28 58 61 94 64 2 94 78 10 68 86 97 63 85 99 53 23 88 87 48 34 1 99 47 19 59 8 84 32 43 52 42 39 37 43 99 80 11 13 9 52 12 85 68 13 10 54 3 36 83 53 75 39 84 36 19 11 76 25 98 69 67 34 78 79 74 23 66 5 6 85 43 16 95 9 66 32 80 32 30 73 79 62 20 59 2 92 78 14 92 27 55 38 8 2 22 87 36 51 7 97 13 100 92 92 46 95 45 18 22 4 34 59 25 63 39 60 15 53 71 19 35 31 33 63 46 36 28 77 20 70 14 98 57 65 68 2 20 39 8 56 4 59 79 22 61 62 64 63 86 11 76 16 86 80 27 60 36 29 7 59 41 85 32 5 45 93 47 38 94 31 3 85 36 59 97 30 82 30 15 72 91 36 68 35 53 14 77 57 74 84 7 19 44 30 51 34 83 82 74 98 72 25 98 99 68 82 84 14 9 28 56 15 12 14 90 73 100 65 7 73 65 17 75 7 25 99 12 21 23 67 55 17
4 1 2 3 3 3 4 3 1 4 1 4 1 1 1 4 3 1 1 2 4 4 1 3 3 2 2 4 4 2 2 3 2 2 4 1 2 1 2 1 2 1 1 3 3 2 4 3 4 3 1 3 2 2 1 2 4 1 1 3 2 3 1 1 4 3 3 4 1 1 3 4 4 3 1 4 4 2 4 2 3 1 2 1 4 4 4 3 1 1 4 4 2 3 3 2 4 4 4 2
]]></test_input>
<test_output><![CDATA[7861
]]></test_output>
<test_input><![CDATA[21 8
73 32 43 6 22 54 4 63 59 18 92 55 9 73 41 48 71 9 30 46 40
3 1 4 3 2 4 2 1
]]></test_input>
<test_output><![CDATA[557
]]></test_output>
<test_input><![CDATA[29 12
31 22 6 50 35 48 23 56 14 25 80 91 28 59 55 30 24 8 67 40 22 36 30 6 11 97 62 80 37
3 1 2 1 3 4 3 1 1 2 3 4
]]></test_input>
<test_output><![CDATA[790
]]></test_output>
<test_input><![CDATA[13 4
32 37 75 16 64 33 79 97 22 2 99 100 41
4 2 2 4
]]></test_input>
<test_output><![CDATA[326
]]></test_output>
<test_input><![CDATA[111 50
18 11 4 75 2 24 28 16 15 22 31 99 7 82 51 61 21 10 71 33 24 37 95 50 49 96 58 33 21 13 31 3 83 7 3 57 24 43 54 74 92 18 71 53 12 39 93 72 61 18 35 16 92 44 58 26 86 85 13 1 85 72 13 1 71 73 74 99 95 37 10 90 50 13 41 49 17 20 57 86 72 23 15 7 96 38 9 67 8 69 37 3 64 50 94 21 71 65 45 16 59 57 95 62 82 60 17 55 80 6 4
2 4 1 1 3 3 3 1 2 4 1 4 4 2 1 2 1 1 1 4 2 1 4 3 2 2 4 1 1 2 3 1 1 1 1 3 3 2 1 4 2 3 2 3 2 2 4 3 1 1
]]></test_input>
<test_output><![CDATA[3622
]]></test_output>
<test_input><![CDATA[198 80
87 74 48 57 52 11 87 51 94 47 3 96 77 2 67 16 87 89 20 61 100 95 50 67 42 29 95 68 96 13 95 54 4 81 54 55 1 20 59 13 72 2 65 18 38 12 43 29 75 3 87 81 41 89 18 10 24 63 78 62 69 69 9 37 13 67 39 60 51 25 34 7 20 10 36 17 94 84 80 96 43 27 44 33 23 23 43 97 53 55 99 13 46 95 17 83 58 88 51 77 15 18 69 93 51 99 88 34 85 27 20 58 55 86 77 49 39 45 35 77 75 83 44 38 62 3 98 67 95 68 46 66 64 72 4 41 84 97 28 65 12 95 21 63 60 69 8 52 76 19 63 69 20 24 46 48 17 58 89 78 25 63 79 82 35 73 67 88 19 96 74 97 70 25 60 70 13 66 30 91 14 25 83 39 60 23 65 8 4 38 78 40 27 61 16 97 54 58
2 4 1 4 2 1 3 2 2 4 1 4 3 4 1 4 3 2 4 4 1 2 3 2 1 1 1 1 2 3 4 2 4 4 3 2 3 3 4 3 1 3 2 1 3 2 1 3 3 3 1 3 4 3 3 2 2 1 1 3 4 2 1 2 4 3 1 4 1 1 1 1 2 4 4 4 2 2 3 2
]]></test_input>
<test_output><![CDATA[6366
]]></test_output>
<test_input><![CDATA[318 120
51 83 90 3 58 91 45 27 46 1 84 13 16 81 11 95 54 13 96 33 98 1 58 90 25 19 77 75 12 61 2 10 57 33 49 81 66 69 14 89 61 65 25 70 3 97 34 8 19 11 7 36 65 73 55 87 96 63 99 86 23 16 98 94 7 49 59 66 25 54 50 95 78 4 42 52 24 14 29 50 3 76 80 69 56 1 87 56 100 83 9 77 44 77 31 72 59 44 6 82 82 98 80 21 23 55 83 6 60 56 46 30 30 26 47 29 3 3 50 32 13 8 82 53 60 50 37 100 35 44 99 64 26 57 1 66 90 6 47 57 66 84 67 19 53 99 60 87 55 1 75 12 72 80 12 89 98 13 83 25 51 95 33 20 59 83 49 55 95 58 24 1 74 84 84 42 50 46 23 88 35 46 31 83 12 92 13 69 98 1 79 20 17 88 90 31 96 29 92 71 20 61 52 77 96 13 87 82 32 30 59 83 11 89 23 55 25 53 86 87 45 54 99 44 75 31 36 53 93 9 37 51 39 81 92 61 25 59 39 48 32 5 13 33 32 80 93 61 4 54 15 5 66 43 24 86 88 47 60 49 55 76 94 58 24 32 24 74 28 11 35 36 52 34 17 70 56 2 49 27 96 34 76 95 5 38 69 53 89 10 34 88 61 43 41 13 37 80 79 8 17 51 12 69 15 97 87 1 54 3 77 1 81 47 92 74 78 6
3 2 2 2 4 4 1 1 4 4 1 1 3 1 2 4 3 3 3 3 3 1 2 4 1 4 3 3 1 4 4 1 1 4 4 1 2 4 4 3 4 2 1 1 4 2 3 3 4 3 2 3 1 1 3 2 1 4 1 2 4 4 4 1 4 3 1 4 2 1 4 3 2 2 3 4 2 1 4 2 3 3 4 4 1 1 1 2 1 2 1 3 3 4 3 4 4 2 3 4 4 3 1 4 4 1 3 1 4 3 4 4 3 3 3 1 3 2 3 3
]]></test_input>
<test_output><![CDATA[9424
]]></test_output>
<test_input><![CDATA[295 120
13 95 4 7 55 86 71 35 96 50 68 71 11 64 33 67 69 10 35 26 31 67 3 77 44 65 45 71 86 70 77 28 51 13 3 6 75 66 46 80 100 73 96 37 64 75 8 95 10 10 19 17 96 18 14 21 56 7 52 30 50 57 97 21 21 53 42 98 51 94 64 38 42 8 75 27 89 64 78 27 51 8 40 60 71 100 84 11 43 61 65 56 81 45 80 97 11 80 83 3 90 41 36 1 7 60 77 19 65 74 16 78 65 77 74 24 75 82 32 78 92 60 90 96 24 87 87 70 46 73 81 72 22 7 53 15 51 83 2 98 37 73 39 89 68 68 25 49 17 59 57 48 100 43 62 4 51 2 95 34 30 88 91 31 36 21 93 42 41 39 54 83 100 90 13 81 11 9 69 75 32 23 45 91 66 94 80 34 85 98 26 42 35 94 3 38 43 2 47 36 14 72 65 32 79 52 56 32 90 9 7 81 9 94 95 37 35 14 78 43 46 16 58 94 75 33 4 90 80 2 22 99 17 33 4 3 85 11 66 2 43 83 45 80 64 21 19 100 23 42 91 26 76 23 9 50 9 68 14 86 6 34 40 88 71 18 33 93 55 84 57 45 75 96 16 93 100 12 16 12 85 98 15 49 4 47 89 49 99 96 85 64 38 36 40
2 2 2 1 3 3 1 1 4 4 1 1 2 4 2 2 1 4 2 4 3 2 1 3 4 3 3 3 2 1 1 2 4 4 2 4 1 1 3 2 2 3 1 4 1 2 1 3 3 1 4 3 4 4 4 4 4 2 3 4 1 3 2 4 4 1 1 2 4 1 1 3 1 4 2 4 1 3 2 2 3 2 1 2 1 3 3 2 4 3 3 1 1 1 2 1 3 4 3 3 2 1 3 3 1 4 4 1 3 3 2 2 2 3 2 3 2 4 2 3
]]></test_input>
<test_output><![CDATA[9527
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛提高组-2010年NOIP全国联赛提高组]]></source>
		<solution language="C"><![CDATA[#include <stdio.h>
#define N 500
int q[N],map[N],s[45][45][45][45]={0};
int max(int a,int b)
{if(a>b) return a;
 else return b;
 
    }
int main()
{
    int i,j,l,k,n,m,a=0,b=0,c=0,d=0;
    scanf("%d%d",&n,&m);
    for(i=0;i<n;i++)
    scanf("%d",&map[i]);
    
    
    for(i=0;i<m;i++)
    {scanf("%d",&q[i]);
     if(q[i]==1)a++;
     if(q[i]==2)b++;
     if(q[i]==3)c++;
     if(q[i]==4)d++;}
     s[a][b][c][d]=map[0];
     for(i=a;i>=0;i--){
        for(j=b;j>=0;j--){
           for(l=c;l>=0;l--){
             for(k=d;k>=0;k--){
               s[i][j][l][k]=max(s[i][j][l][k],s[i+1][j][l][k]+map[1*(a-i)+2*(b-j)+3*(c-l)+4*(d-k)]);
               s[i][j][l][k]=max(s[i][j][l][k],s[i][j+1][l][k]+map[1*(a-i)+2*(b-j)+3*(c-l)+4*(d-k)]);
               s[i][j][l][k]=max(s[i][j][l][k],s[i][j][l+1][k]+map[1*(a-i)+2*(b-j)+3*(c-l)+4*(d-k)]);
               s[i][j][l][k]=max(s[i][j][l][k],s[i][j][l][k+1]+map[1*(a-i)+2*(b-j)+3*(c-l)+4*(d-k)]);
             
             }
           }
        }
     }
     printf("%d",s[0][0][0][0]);
    
    return 0;}
]]></solution>
			<solution language="C++"><![CDATA[#include <iostream>
#define MAX(A,B) ((A)>(B)?(A):(B))
using namespace std;
int T[1000];
int card[5] = {0};
int DP[40][40][40][40] = {0};

int main()
{
        int N,M,t;
        cin >> N >> M;
        for(int i=1; i<=N; ++i)
                cin >> T[i];
        for(int i=0; i<M; ++i)
        {
                cin >> t;
                ++card[t];
        }
        DP[0][0][0][0] = T[1];
        for(int a=0; a<=card[1]; ++a)
                for(int b=0; b<=card[2]; ++b)
                        for(int c=0; c<=card[3]; ++c)
                                for(int d=0; d<=card[4]; ++d)
        {
                int t = T[1*a+2*b+3*c+4*d+1];
                if(a>0) DP[a][b][c][d] = MAX(DP[a-1][b][c][d]+t,DP[a][b][c][d]);
                if(b>0) DP[a][b][c][d] = MAX(DP[a][b-1][c][d]+t,DP[a][b][c][d]);
                if(c>0) DP[a][b][c][d] = MAX(DP[a][b][c-1][d]+t,DP[a][b][c][d]);
                if(d>0) DP[a][b][c][d] = MAX(DP[a][b][c][d-1]+t,DP[a][b][c][d]);
        }
        cout << DP[card[1]][card[2]][card[3]][card[4]] << endl;
        return 0;
}
]]></solution>
			<solution language="Pascal"><![CDATA[var
   f:array[-1..41,-1..41,-1..41,-1..41]of longint;
   p,a,b:array[0..10000]of longint;
   i,n,m,j,k,l:longint;
begin
 readln(n,m);
 fillchar(p,sizeof(p),0);
 for i:=1 to n do read(a[i]);
 for i:=1 to m do
  begin
   read(b[i]);
   inc(p[b[i]]);
  end;
// f[0,0,0,0]:=a[1];
 for i:=0 to p[1] do
  for j:=0 to p[2] do
   for k:=0 to p[3] do
    for l:=0 to p[4] do
     begin
      if f[i-1,j,k,l]+a[i+j*2+k*3+l*4+1]>f[i,j,k,l]
       then f[i,j,k,l]:=f[i-1,j,k,l]+a[i+j*2+k*3+l*4+1];
      if f[i,j-1,k,l]+a[i+j*2+k*3+l*4+1]>f[i,j,k,l]
       then f[i,j,k,l]:=f[i,j-1,k,l]+a[i+j*2+k*3+l*4+1];
      if f[i,j,k-1,l]+a[i+j*2+k*3+l*4+1]>f[i,j,k,l]
       then f[i,j,k,l]:=f[i,j,k-1,l]+a[i+j*2+k*3+l*4+1];
      if f[i,j,k,l-1]+a[i+j*2+k*3+l*4+1]>f[i,j,k,l]
       then f[i,j,k,l]:=f[i,j,k,l-1]+a[i+j*2+k*3+l*4+1];
     end;
 writeln(f[p[1],p[2],p[3],p[4]]);
end.]]></solution>
	</item>
</fps>
