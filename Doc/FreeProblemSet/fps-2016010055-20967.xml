<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[作业调度方案]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[125]]></memory_limit>

<description><![CDATA[<p>
	我们现在要利用m台机器加工n个工件，每个工件都有m道工序，每道工序都在不同的指定的机器上完成。每个工件的每道工序都有指定的加工时间。
</p>
<p>
	每个工件的每个工序称为一个操作，我们用记号j-k表示一个操作，其中j为1到n中的某个数字，为工件号；k为1到m中的某个数字，为工序号，例如2-4表示第2个工件第4道工序的这个操作。在本题中，我们还给定对于各操作的一个安排顺序。
</p>
<p>
	例如，当n=3，m=2时，“1-1，1-2，2-1，3-1，3-2，2-2”就是一个给定的安排顺序，即先安排第1个工件的第1个工序，再安排第1个工件的第2个工序，然后再安排第2个工件的第1个工序，等等。
</p>
<p>
	一方面，每个操作的安排都要满足以下的两个约束条件。
</p>
(1) 对同一个工件，每道工序必须在它前面的工序完成后才能开始；<br />
<p>
	<span style="line-height:1.5;">(2) 同一时刻每一台机器至多只能加工一个工件。</span>
</p>
<p>
	另一方面，在安排后面的操作时，不能改动前面已安排的操作的工作状态。
</p>
<p>
	由于同一工件都是按工序的顺序安排的，因此，只按原顺序给出工件号，仍可得到同样的安排顺序，于是，在输入数据中，我们将这个安排顺序简写为“1 1 2 3 3 2”。
</p>
<p>
	还要注意，“安排顺序”只要求按照给定的顺序安排每个操作。不一定是各机器上的实际操作顺序。在具体实施时，有可能排在后面的某个操作比前面的某个操作先完成。
</p>
<p>
	例如，取n=3，m=2，已知数据如下：
</p>
<p>
	<table class="MsoNormalTable ke-zeroborder" border="0" cellspacing="0" cellpadding="0">
		<tbody>
			<tr>
				<td width="91" rowspan="2" style="border:solid windowtext 1.0pt;">
					<p class="MsoNormal" align="center" style="text-align:center;">
						<span style="font-size:12.0pt;font-family:宋体;">工件号<span></span></span>
					</p>
				</td>
				<td width="182" colspan="2" style="border:solid windowtext 1.0pt;">
					<p class="MsoNormal" align="center" style="text-align:center;">
						<span style="font-size:12.0pt;font-family:宋体;">机器号</span><span style="font-size:12.0pt;font-family:&quot;">/</span><span style="font-size:12.0pt;font-family:宋体;">加工时间<span></span></span>
					</p>
				</td>
			</tr>
			<tr>
				<td width="91" style="border:solid windowtext 1.0pt;">
					<p class="MsoNormal" align="center" style="text-align:center;">
						<span style="font-size:12.0pt;font-family:宋体;">工序</span><span style="font-size:12.0pt;font-family:&quot;">1</span><span style="font-size:12.0pt;font-family:宋体;"></span>
					</p>
				</td>
				<td width="91" style="border:solid windowtext 1.0pt;">
					<p class="MsoNormal" align="center" style="text-align:center;">
						<span style="font-size:12.0pt;font-family:宋体;">工序</span><span style="font-size:12.0pt;font-family:&quot;">2</span><span style="font-size:12.0pt;font-family:宋体;"></span>
					</p>
				</td>
			</tr>
			<tr>
				<td width="91" style="border:solid windowtext 1.0pt;">
					<p class="MsoNormal" align="center" style="text-align:center;">
						<span style="font-size:12.0pt;font-family:&quot;">1</span><span style="font-size:12.0pt;font-family:宋体;"></span>
					</p>
				</td>
				<td width="91" style="border:solid windowtext 1.0pt;">
					<p class="MsoNormal" align="center" style="text-align:center;">
						<span style="font-size:12.0pt;font-family:&quot;">1/3</span><span style="font-size:12.0pt;font-family:宋体;"></span>
					</p>
				</td>
				<td width="91" style="border:solid windowtext 1.0pt;">
					<p class="MsoNormal" align="center" style="text-align:center;">
						<span style="font-size:12.0pt;font-family:&quot;">2/2</span><span style="font-size:12.0pt;font-family:宋体;"></span>
					</p>
				</td>
			</tr>
			<tr>
				<td width="91" style="border:solid windowtext 1.0pt;">
					<p class="MsoNormal" align="center" style="text-align:center;">
						<span style="font-size:12.0pt;font-family:&quot;">2</span><span style="font-size:12.0pt;font-family:宋体;"></span>
					</p>
				</td>
				<td width="91" style="border:solid windowtext 1.0pt;">
					<p class="MsoNormal" align="center" style="text-align:center;">
						<span style="font-size:12.0pt;font-family:&quot;">1/2</span><span style="font-size:12.0pt;font-family:宋体;"></span>
					</p>
				</td>
				<td width="91" style="border:solid windowtext 1.0pt;">
					<p class="MsoNormal" align="center" style="text-align:center;">
						<span style="font-size:12.0pt;font-family:&quot;">2/5</span><span style="font-size:12.0pt;font-family:宋体;"></span>
					</p>
				</td>
			</tr>
			<tr>
				<td width="91" style="border:solid windowtext 1.0pt;">
					<p class="MsoNormal" align="center" style="text-align:center;">
						<span style="font-size:12.0pt;font-family:&quot;">3</span><span style="font-size:12.0pt;font-family:宋体;"></span>
					</p>
				</td>
				<td width="91" style="border:solid windowtext 1.0pt;">
					<p class="MsoNormal" align="center" style="text-align:center;">
						<span style="font-size:12.0pt;font-family:&quot;">2/2</span><span style="font-size:12.0pt;font-family:宋体;"></span>
					</p>
				</td>
				<td width="91" style="border:solid windowtext 1.0pt;">
					<p class="MsoNormal" align="center" style="text-align:center;">
						<span style="font-size:12.0pt;font-family:&quot;">1/4</span><span style="font-size:12.0pt;font-family:宋体;"></span>
					</p>
				</td>
			</tr>
		</tbody>
	</table>
</p>
<p>
	则对于安排顺序“1 1 2 3 3 2”，下图中的两个实施方案都是正确的。但所需要的总时间分别是10与12。
</p>
<p>
	当一个操作插入到某台机器的某个空档时（机器上最后的尚未安排操作的部分也可以看作一个空档），可以靠前插入，也可以靠后或居中插入。为了使问题简单一些，我们约定：在保证约束条件（1）（2）的条件下，尽量靠前插入。并且，我们还约定，如果有多个空档可以插入，就在保证约束条件（1）（2）的条件下，插入到最前面的一个空档。于是，在这些约定下，上例中的方案一是正确的，而方案二是不正确的。
</p>
<p>
	显然，在这些约定下，对于给定的安排顺序，符合该安排顺序的实施方案是唯一的，请你计算出该方案完成全部任务所需的总时间。
</p>
<p>
	<br />
</p>]]></description>
<input><![CDATA[<p>
	每组输入数据的第1行为两个正整数，用一个空格隔开：
</p>
<p>
	m n
</p>
<p>
	<span style="line-height:1.5;">（其中m（&lt;20）表示机器数，n（&lt;20）表示工件数）</span>
</p>
<p>
	<span style="line-height:1.5;">第2行：m*n个用空格隔开的数，为给定的安排顺序。</span>
</p>
接下来的2n行，每行都是用空格隔开的m个正整数，每个数不超过20。<span style="line-height:1.5;">其中前n行依次表示每个工件的每个工序所使用的机器号，第1个数为第1个工序的机器号，第2个数为第2个工序机器号，等等。</span>后n行依次表示每个工件的每个工序的加工时间。<br />
<p>
	<span style="line-height:1.5;">可以保证，以上各数据都是正确的，不必检验。</span>
</p>
<div>
	<br />
</div>]]></input> 
<output><![CDATA[<p>
	每组输出只有一个正整数，为最少的加工时间。
</p>
<p>
	<br />
</p>]]></output>
<sample_input><![CDATA[2 3
1 1 2 3 3 2
1 2
1 2
2 1
3 2
2 5
2 4]]></sample_input>
<sample_output><![CDATA[10]]></sample_output>
  <test_input><![CDATA[7 4
4 3 3 2 1 4 4 2 1 3 4 3 1 2 1 1 3 3 2 2 4 1 2 2 1 4 3 4 
1 2 3 4 5 6 7
2 3 4 5 7 1 6
1 2 3 4 7 6 5
4 5 6 7 1 2 3
3 4 5 6 2 8 1
4 4 6 5 9 2 1
3 4 2 5 6 8 3
8 4 7 3 6 5 9
]]></test_input>
<test_output><![CDATA[45
]]></test_output>
<test_input><![CDATA[2 3
1 1 2 3 3 2
1 2 
1 2 
2 1
3 2 
2 6 
2 4
]]></test_input>
<test_output><![CDATA[11
]]></test_output>
<test_input><![CDATA[3 3
1 1 1 2 3 3 2 2 3
1 2 3
2 1 3 
2 3 1
7 2 4 
3 2 5 
3 2 3
]]></test_input>
<test_output><![CDATA[18
]]></test_output>
<test_input><![CDATA[3 8
6 4 5 1 7 8 4 2 6 5 2 4 1 2 6 8 3 7 1 3 3 7 5 8 
1 2 3
1 3 2
3 2 1
2 1 3
3 1 2
1 2 3
3 1 2
1 2 3
4 5 2
3 5 3
6 4 2
4 5 6
3 1 7
7 5 3
4 4 5
8 5 9
]]></test_input>
<test_output><![CDATA[47
]]></test_output>
<test_input><![CDATA[15 15
2 2 1 15 4 8 7 14 11 10 8 3 9 6 6 9 11 11 14 2 10 12 7 5 9 2 7 12 12 13 6 3 2 5 14 10 2 6 1 7 10 10 1 8 9 5 4 12 14 5 10 3 15 11 14 9 13 13 4 15 4 4 13 9 9 4 3 1 14 8 8 11 11 12 9 12 6 1 3 12 5 2 15 4 2 5 14 4 8 13 7 10 15 13 5 13 13 9 14 2 3 8 3 10 5 7 1 15 5 6 11 8 6 12 1 3 14 12 2 13 3 9 7 9 15 1 7 2 11 6 1 5 14 5 2 2 4 11 11 10 8 10 12 11 13 15 6 12 2 11 15 4 6 9 5 9 6 14 1 15 15 7 3 7 5 8 1 9 6 7 8 15 10 13 4 3 13 12 13 3 1 13 7 6 1 10 7 5 4 7 9 10 1 4 11 12 3 15 14 8 1 13 6 14 11 4 7 3 10 15 8 12 5 12 3 10 6 14 11 14 8 2 8 4 15 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
2 3 4 5 6 1 8 7 9 10 11 12 13 14 15
14 15 3 4 5 6 7 8 9 10 11 12 13 1 2
8 9 10 11 12 13 14 15 1 2 3 4 5 6 7 
10 11 12 13 1 2 3 4 5 6 7 8 9 14 15
13 14 15 1 2 3 4 5 6 7 8 9 10 11 12
3 4 5 6 7 8 9 1 2 10 11 12 13 14 15
1 2 3 4 5 6 7 8 12 13 14 15 9 10 11
1 2 3 4 5 6 7 8 9 15 10 11 12 13 14
7 8 9 10 11 12 13 14 15 1 2 3 4 5 6 
13 14 15 1 2 3 4 5 6 7 8 9 10 11 12
3 4 5 6 7 8 9 1 2 10 11 12 13 14 15
5 6 7 8 12 13 1 2 3 4 14 15 9 10 11
7 8 9 15 10 11 12 13 1 2 3 4 5 6 14
7 8 9 2 3 4 5 10 11 12 13 14 15 1 6 
4 5 6 8 9 10 12 13 15 9 8 6 4 10 12
14 15 6 8 19 4 12 13 15 9 8 6 14 5 4
4 5 6 8 9 10 12 13 5 19 8 6 14 10 12
14 3 16 8 9 10 12 13 15 9 8 6 14 10 9
15 5 16 8 9 10 2 13 15 9 18 6 4 10 12
8 15 6 18 9 10 12 13 15 9 8 6 4 10 14
7 15 6 8 19 6 12 13 7 9 8 6 4 10 12
14 5 6 8 9 10 12 13 15 9 8 6 4 10 5
6 5 6 8 9 13 12 13 15 9 8 6 4 10 17
8 5 6 8 9 11 12 10 15 9 8 6 4 10 12
4 5 6 8 9 10 12 13 15 9 8 6 4 10 12
10 15 6 8 19 14 12 13 15 19 8 6 14 5 4
7 5 6 8 9 10 12 13 5 19 8 6 14 10 12
8 3 16 8 9 10 12 13 15 19 8 6 14 13 9
9 5 16 8 9 10 2 13 15 9 18 6 4 11 12
]]></test_input>
<test_output><![CDATA[286
]]></test_output>
<test_input><![CDATA[8 9
2 8 8 4 7 2 6 3 9 3 3 2 1 6 5 5 9 9 6 8 2 8 9 7 1 3 3 6 7 6 9 3 5 1 7 2 4 3 8 1 4 1 4 6 8 9 4 6 6 7 2 5 2 7 9 4 4 1 1 5 2 5 4 1 7 5 8 5 7 8 3 9 
1 2 3 4 5 6 7 8
1 2 4 5 6 7 8 3
3 4 5 6 7 8 1 2 
5 6 7 8 1 2 3 4
4 5 6 7 1 2 3 8
1 2 3 4 8 7 6 5
1 2 4 3 5 6 8 7
3 4 5 6 7 8 1 2
4 5 3 2 1 6 7 8
5 6 7 8 9 10 3 4
9 3 5 6 7 8 10 4
10 3 9 5 1 5 6 7 
14 5 9 8 3 5 10 7
12 5 6 7 8 9 4 7
5 6 7 8 9 13 4 2 10
5 6 7 8 9 3 4 10
10 12 13 4 5 6 7 8
4 5 6 3 2 10 7 6

]]></test_input>
<test_output><![CDATA[116
]]></test_output>
<test_input><![CDATA[15 10
2 1 4 7 6 9 7 3 5 6 8 9 2 8 6 5 2 6 9 10 3 2 6 2 5 1 8 1 7 4 3 10 5 8 3 8 7 10 4 4 4 7 8 4 1 10 7 9 9 7 5 1 10 2 6 2 5 4 7 6 8 10 5 10 8 2 2 5 3 5 1 4 5 9 6 9 1 9 2 3 7 6 8 1 2 8 1 4 5 2 2 9 8 7 8 9 10 5 2 9 4 6 4 6 10 1 10 4 3 5 1 5 6 7 8 3 3 10 9 3 1 6 1 8 4 3 7 1 3 9 3 10 7 1 6 9 4 3 8 10 7 5 3 6 10 9 7 2 4 10 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
2 3 4 5 6 1 8 7 9 10 11 12 13 14 15
14 15 3 4 5 6 7 8 9 10 11 12 13 1 2
8 9 10 11 12 13 14 15 1 2 3 4 5 6 7 
10 11 12 13 1 2 3 4 5 6 7 8 9 14 15
13 14 15 1 2 3 4 5 6 7 8 9 10 11 12
3 4 5 6 7 8 9 1 2 10 11 12 13 14 15
1 2 3 4 5 6 7 8 12 13 14 15 9 10 11
1 2 3 4 5 6 7 8 9 15 10 11 12 13 14
7 8 9 10 11 12 13 14 15 1 2 3 4 5 6 
4 5 6 8 9 10 12 13 15 9 8 6 4 10 12
14 15 6 8 19 4 12 13 15 9 8 6 14 5 4
4 5 6 8 9 10 12 13 5 19 8 6 14 10 12
14 3 16 8 9 10 12 13 15 9 8 6 14 10 9
15 5 16 8 9 10 2 13 15 9 18 6 4 10 12
8 15 6 18 9 10 12 13 15 9 8 6 4 10 14
7 15 6 8 19 6 12 13 7 9 8 6 4 10 12
14 5 6 8 9 10 12 13 15 9 8 6 4 10 5
6 5 6 8 9 13 12 13 15 9 8 6 4 10 17
8 5 6 8 9 11 12 10 15 9 8 6 4 10 12
]]></test_input>
<test_output><![CDATA[233
]]></test_output>
<test_input><![CDATA[3 3
1 1 1 3 3 2 3 2 2
1 2 3
1 2 3 
2 3 1
5 4 2 
2 3 2 
4 3 4
]]></test_input>
<test_output><![CDATA[14
]]></test_output>
<test_input><![CDATA[10 10
2 5 8 9 3 7 7 10 2 6 3 8 10 2 6 2 1 9 1 4 9 6 4 10 9 5 5 8 5 2 8 10 8 7 1 2 3 6 5 8 9 6 9 3 3 4 1 6 7 7 2 10 3 8 9 1 3 1 6 3 5 8 9 10 7 3 5 7 5 9 2 4 6 1 7 8 4 3 10 1 8 1 6 4 2 4 4 10 1 7 5 4 9 6 4 7 10 2 5 10 
1 2 3 4 5 6 7 8 9 10
1 2 4 3 6 5 8 7 9 10
3 4 5 6 7 8 9 10 1 2
4 5 6 7 1 2 3 8 9 10
10 9 8 7 6 5 4 3 2 1
4 3 5 2 6 1 7 8 9 10
5 6 4 3 2 1 7 8 9 10
1 2 3 4 5 10 9 8 7 6
3 4 5 6 7 8 9 10 1 2
4 5 6 3 8 9 10 2 1 7
6 7 8 9 12 10 11 4 5 6
6 8 18 17 16 3 4 5 6 18
5 6 7 8 10 17 16 5 6 9
6 9 2 8 3 7 5 8 10 11 
5 8 6 9 3 9 10 10 12 7
4 3 9 8 10 12 14 15 8 6
2 3 4 5 6 7 8 10 2 4
4 6 7 8 9 3 2 10 13 14
5 6 7 8 9 3 15 6 4 3
4 5 9 8 7 6 18 17 5 4
]]></test_input>
<test_output><![CDATA[185
]]></test_output>
<test_input><![CDATA[7 8
6 8 4 8 3 3 6 3 2 1 6 7 6 6 6 5 2 8 1 3 3 8 7 3 4 1 7 2 4 5 1 1 4 4 8 7 4 7 2 5 2 7 4 5 1 2 6 2 5 1 5 8 5 7 3 8 
1 2 3 4 5 6 7
2 3 4 5 6 7 1
4 5 6 7 3 2 1
1 2 3 4 7 6 5
1 2 3 4 6 5 7
4 5 3 2 1 6 7
7 5 6 4 3 2 1
2 3 4 5 1 6 7
5 6 8 9 4 3 6
5 6 7 8 9 10 13
3 4 11 3 4 5 6
10 3 5 6 11 12 8
4 5 6 7 8 19 2
4 5 8 7 9 4 10
3 5 9 8 6 7 8
5 8 6 7 10 3 4
]]></test_input>
<test_output><![CDATA[109
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛提高组-2006年NOIP全国联赛提高组]]></source>
		<solution language="C++"><![CDATA[#include <iostream>
#include <algorithm>
#include <set>
#include <iterator>
using namespace std;

const int N = 27;
int a[N * N], Machine[N][N], Time[N][N], Cur[N], Last[N];
struct Range
{
	int Begin, Last;
	Range() {Begin = Last = 0;}
	Range(int a, int b) {Begin = a; Last = b;}
	friend bool operator < (const Range& a, const Range& b) {return a.Begin < b.Begin;}
} c;
set<Range> s[N];
set<Range>::iterator I;

int main()
{
	int m, n, i, j, Res = 0;
	
	cin >> m >> n;
	for (i = 0; i < m * n; ++i) cin >> a[i];
	for (i = 1; i <= n; ++i)
		for (j = 1; j <= m; ++j) cin >> Machine[i][j];
	for (i = 1; i <= n; ++i)
		for (j = 1; j <= m; ++j) cin >> Time[i][j];
	
	for (i = 1; i <= m; ++i) s[i].insert(Range(0, N * N));
	for (i = 0; i < m * n; ++i)
	{
		const int& k = a[i];
		const int& b = Machine[k][++Cur[k]];
		int& l = Last[k];
		const int& t = Time[k][Cur[k]];
		for (I = s[b].begin(); I != s[b].end(); ++I)
			if (I -> Begin >= l && I -> Last >= t)
			{
				c = *I; s[b].erase(I);
				l = (c.Begin += t); c.Last -= t;
				if (c.Last) s[b].insert(c);
				break;
			}
			else if (I -> Begin < l && I -> Begin + I -> Last >= t + l)
			{
				c = *I; s[b].erase(I);
				s[b].insert(Range(c.Begin, l - c.Begin));
				c.Last -= l - c.Begin + t;
				c.Begin = (l += t);
				s[b].insert(c);
				break;
			}
	}
	
	for (i = 1; i <= m; ++i) Res = max(Res, s[i].rbegin() -> Begin);
	cout << Res << endl;
	
	return 0;
} 
]]></solution>
			<solution language="Pascal"><![CDATA[var
 m,n,i,j,k,x,max:longint;
 a:array[1..1000] of longint;
 machine:array[1..100,0..400] of longint;
 p,t:array[1..100] of longint;
 f:array[1..100,1..100,1..2] of longint;
 flag:boolean;
 begin
 readln(m,n);
 fillchar(a,sizeof(a),0);
 fillchar(machine,sizeof(machine),0);
 fillchar(p,sizeof(p),0);
 fillchar(t,sizeof(t),0);
 fillchar(f,sizeof(f),0);
 for i:=1 to m*n do read(a[i]);
 for i:=1 to n do
   for j:=1 to m do
    read(f[i,j,1]);
 for i:=1 to n do
   for j:=1 to m do
    read(f[i,j,2]);
 for i:=1 to m*n do
 begin
   inc(p[a[i]]);
   x:=f[a[i],p[a[i]],1];
   for j:=t[a[i]]+1 to machine[x,0]+1 do
   begin
    flag:=true;
    for k:=1 to f[a[i],p[a[i]],2] do
     if machine[x,j+k-1]=1 then
     begin
      flag:=false;
      break;
     end;
    if flag then break;
   end;
   for k:=j to j+f[a[i],p[a[i]],2]-1 do machine[x,k]:=1;
   if k>machine[x,0] then machine[x,0]:=k;
   t[a[i]]:=k;
 end;
 max:=-maxlongint;
 for i:=1 to m do if machine[i,0]>max then max:=machine[i,0];
 writeln(max);
 end.]]></solution>
	</item>
</fps>
