<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[Hanoi双塔问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[125]]></memory_limit>

<img><src><![CDATA[http://tk.hustoj.com:80/attached/image/20140115/20140115155355_41381.jpg]]></src><base64><![CDATA[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]]></base64></img><description><![CDATA[<p>
	给定A、B、C三根足够长的细柱，在A柱上放有2n个中间有孔的圆盘，共有n个不同的尺寸，每个尺寸都有两个相同的圆盘，注意这两个圆盘是不加区分的（下图为n=3的情形）。现要将这些圆盘移到C柱上，在移动过程中可放在B柱上暂存。要求：
</p>
<p style="text-align:center;">
	<img src="http://tk.hustoj.com:80/attached/image/20140115/20140115155355_41381.jpg" alt="" />
</p>
<p style="text-align:left;">
	（1）每次只能移动一个圆盘；<br />
<span style="line-height:1.5;">（2）A、B、C三根细柱上的圆盘都要保持上小下大的顺序；</span>
</p>
<p style="text-align:left;">
	<span style="line-height:1.5;">任务：设An为2n个圆盘完成上述任务所需的最少移动次数，对于输入的n，输出An。</span>
</p>
<p style="text-align:left;">
	<span style="line-height:1.5;">提示：<span>设法建立An与An-1的递推关系式。</span></span>
</p>
<p style="text-align:left;">
	<span style="line-height:1.5;"><br />
</span>
</p>]]></description>
<input><![CDATA[<p>
	每组输入数据为一个正整数n，表示在A柱上放有2n个圆盘。
</p>
<p>
	<br />
</p>
<p>
	数据规模：
</p>
<p>
	对于50%的数据，1&lt;=n&lt;=25；
</p>
<p>
	<span style="line-height:1.5;">对于100%的数据，1&lt;=n&lt;=200；</span>
</p>
<p>
	<br />
</p>]]></input> 
<output><![CDATA[<p>
	每组输出仅一行，包含一个正整数，为完成上述任务所需的最少移动次数An。
</p>
<p>
	<br />
</p>]]></output>
<sample_input><![CDATA[1

2]]></sample_input>
<sample_output><![CDATA[2

6]]></sample_output>
  <test_input><![CDATA[190

]]></test_input>
<test_output><![CDATA[3138550867693340381917894711603833208051177722232017256446
]]></test_output>
<test_input><![CDATA[15
]]></test_input>
<test_output><![CDATA[65534
]]></test_output>
<test_input><![CDATA[150

]]></test_input>
<test_output><![CDATA[2854495385411919762116571938898990272765493246
]]></test_output>
<test_input><![CDATA[25]]></test_input>
<test_output><![CDATA[67108862
]]></test_output>
<test_input><![CDATA[60
]]></test_input>
<test_output><![CDATA[2305843009213693950
]]></test_output>
<test_input><![CDATA[90
]]></test_input>
<test_output><![CDATA[2475880078570760549798248446
]]></test_output>
<test_input><![CDATA[18
]]></test_input>
<test_output><![CDATA[524286
]]></test_output>
<test_input><![CDATA[3]]></test_input>
<test_output><![CDATA[14
]]></test_output>
<test_input><![CDATA[40
]]></test_input>
<test_output><![CDATA[2199023255550
]]></test_output>
<test_input><![CDATA[8
]]></test_input>
<test_output><![CDATA[510
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛普及组-2007年NOIP全国联赛普及组]]></source>
		<solution language="C++"><![CDATA[#include<cstdio>
#include<string>
#include<cstring>
#include<iostream>
#include<istream>
using namespace std;
const int maxn = 100;
struct bign {
    int len, s[maxn];
    bign() { memset(s, 0, sizeof(s)); len = 1; }
    bign(int num) { *this = num; }
    bign(const char* num) { *this = num; }
    string str() const {
        string res = "";
        for (int i = 0; i < len; i++) res = (char)(s[i]+'0') + res;
        if (res == "") res = "0";
        return res;
    }
    bign operator = (const char* num) {
        len = strlen(num);
        for (int i = 0; i < len; i++) s[i] = num[len-i-1] - '0';
        return *this;
    }
    bign operator = (int num) {
        char s[maxn];
        sprintf(s, "%d", num);
        *this = s;
        return *this;
    }
    bign operator + (const bign& b) const {
        bign c;
        c.len = 0;
        for (int i = 0, g = 0; g || i < max(len, b.len); i++) {
            int x = g;
            if (i < len) x += s[i];
            if (i < b.len) x+=b.s[i];
            c.s[c.len++] = x % 10;
            g = x / 10;
        }
        return c;
    }
    bign operator += (const bign& b) {
        *this = *this + b;
        return *this;
    }
    bool operator < (const bign& b) const {
        if (len!=b.len) return len < b.len;
        for (int i = len-1; i >= 0; i--) 
            if (s[i]!=b.s[i]) return s[i] < b.s[i];
        return false;
    }
    bool operator > (const bign& b) const { return b < *this; }
    bool operator <= (const bign& b) const { return !(b < *this); }
    bool operator >= (const bign& b) const { return !(*this < b); }
    bool operator != (const bign& b) const { return b < *this || *this < b; }
    bool operator == (const bign& b) const { return !(b < *this) && !(*this < b); }
};
istream& operator >> (istream &in, bign& x) {
    string s;
    in >> s;
    return in;
}
ostream& operator << (ostream &out, const bign& x) {
    out << x.str();
    return out;
}
bign ans[210];
int main() {
    int n;
    ans[1] = 2;
    for (int i = 2; i <= 200; i++) {
         ans[i] = ans[i-1] + ans[i-1] + 2;
//       cout << ans[i] << endl;
    }
    while (cin >> n) cout << ans[n] << endl;
    return 0;
}
]]></solution>
			<solution language="Pascal"><![CDATA[var a,b:array[0..100] of integer;
    i,j,n:integer;
begin
 read(n);
 b[100]:=1;
 for i:=1 to n do
  begin
   for j:=1 to 100 do b[j]:=b[j]*2;
   for j:=100 downto 1 do if b[j]>9 then
    begin
     b[j]:=b[j]-10;
     b[j-1]:=b[j-1]+1;
    end;
   for j:=1 to 100 do a[j]:=a[j]+b[j];
   for j:=100 downto 1 do if a[j]>9 then
    begin
     a[j]:=a[j]-10;
     a[j-1]:=a[j-1]+1;
     end;
   end;
 j:=1;
 while a[j]=0 do j:=j+1;
 for i:=j to 100 do write(a[i]);
end.]]></solution>
	</item>
</fps>
