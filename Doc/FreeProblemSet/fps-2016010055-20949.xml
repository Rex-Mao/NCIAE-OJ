<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[津津的储蓄计划]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[125]]></memory_limit>

<description><![CDATA[<p>
	津津的零花钱一直都是自己管理。每个月的月初妈妈给津津300元钱，津津会预算这个月的花销，并且总能做到实际花销和预算的相同。
</p>
<p>
	为了让津津学习如何储蓄，妈妈提出，津津可以随时把整百的钱存在她那里，到了年末她会加上20％还给津津。因此津津制定了一个储蓄计划：每个月的月初，在得到妈妈给的零花钱后，如果她预计到这个月的月末手中还会有多于100元或恰好100元，她就会把整百的钱存在妈妈那里，剩余的钱留在自己手中。
</p>
<p>
	例如11月初津津手中还有83元，妈妈给了津津300元。津津预计11月的花销是180元，那么她就会在妈妈那里存200元，自己留下183元。到了11月月末，津津手中会剩下3元钱。
</p>
<p>
	津津发现这个储蓄计划的主要风险是，存在妈妈那里的钱在年末之前不能取出。有可能在某个月的月初，津津手中的钱加上这个月妈妈给的钱，不够这个月的原定预算。如果出现这种情况，津津将不得不在这个月省吃俭用，压缩预算。
</p>
现在请你根据2004年1月到12月每个月津津的预算，判断会不会出现这种情况。如果不会，计算到2004年年末，妈妈将津津平常存的钱加上20％还给津津之后，津津手中会有多少钱。&nbsp;<br />
<div>
	<br />
</div>]]></description>
<input><![CDATA[<p>
	每组输入包括12行数据，每行包含一个小于350的非负整数，分别表示1月到12月津津的预算。&nbsp;
</p>
<p>
	<br />
</p>]]></input> 
<output><![CDATA[<p>
	每组输出包括一行，这一行只包含一个整数。如果储蓄计划实施过程中出现某个月钱不够用的情况，输出-X，X表示出现这种情况的第一个月；否则输出到2004年年末津津手中会有多少钱。&nbsp;
</p>
<p>
	<br />
</p>]]></output>
<sample_input><![CDATA[290
230
280
200
300
170
340
50
90
80
200
60
]]></sample_input>
<sample_output><![CDATA[-7
]]></sample_output>
  <test_input><![CDATA[290
230
280
200
300
170
330
50
90
80
200
60
]]></test_input>
<test_output><![CDATA[1580
]]></test_output>
<test_input><![CDATA[288
334
214
73
19
21
198
175
271
320
193
62
]]></test_input>
<test_output><![CDATA[-2
]]></test_output>
<test_input><![CDATA[288
225
151
95
279
203
65
300
266
232
199
60
]]></test_input>
<test_output><![CDATA[1477
]]></test_output>
<test_input><![CDATA[288
339
342
2
39
245
99
269
92
167
198
61
]]></test_input>
<test_output><![CDATA[-2
]]></test_output>
<test_input><![CDATA[288
99
55
330
129
63
232
144
97
254
191
63
]]></test_input>
<test_output><![CDATA[1975
]]></test_output>
<test_input><![CDATA[288
110
310
188
168
161
32
332
89
298
201
60
]]></test_input>
<test_output><![CDATA[-3
]]></test_output>
<test_input><![CDATA[288
93
278
51
110
189
331
50
277
57
186
64
]]></test_input>
<test_output><![CDATA[1946
]]></test_output>
<test_input><![CDATA[288
219
24
166
259
329
165
207
95
35
194
62
]]></test_input>
<test_output><![CDATA[1857
]]></test_output>
<test_input><![CDATA[288
213
246
237
240
105
265
113
274
188
190
63
]]></test_input>
<test_output><![CDATA[1398
]]></test_output>
<test_input><![CDATA[290
230
280
200
300
170
340
50
90
80
200
60
]]></test_input>
<test_output><![CDATA[-7
]]></test_output>
<hint><![CDATA[290<br />
230<br />
280<br />
200<br />
300<br />
170<br />
330<br />
50<br />
90<br />
80<br />
200<br />
<p>
	60
</p>
<p>
	-------------
</p>
<p>
	1580
</p>]]></hint>
<source><![CDATA[NOIP全国联赛提高组 2004年NOIP全国联赛提高组]]></source>
		<solution language="C"><![CDATA[#include<stdio.h>
int main()
{
	int a[13],s,i,k,x;
	for(i=0;i<12;i++)
		scanf("%d",&a[i]);
	s=0;k=0;x=0;
	for(i=0;i<12;i++)
	{
		if(s+300>=a[i])
		{
			s+=300-a[i];
			while(s>=100)
			{
				s=s-100;
				k++;
			}
		}
		else
		{
			printf("%d",-(i+1));
			x++;
			break;
		}
	}
	if(x==0)
		printf("%d",k*120+s);
	return 0;
}]]></solution>
			<solution language="C++"><![CDATA[#include <iostream>
using namespace std;
int P[12];
int fun(int P[])
{
	int L=0;
	int M=0;
	for(int i=0;i<12;i++)
	{
		if((L+300-P[i])<0){
			cout<<"-"<<i+1<<endl;
			return 0;
		}
		else
		{
			M+=((L+300-P[i])/100);
			L=(L+300-P[i])%100;
		}
	}
	cout<<M*120+L<<endl;
	return 1;
}
int main()
{
	while((cin>>P[0]))
	{
		for(int i=1;i<12;i++)
			cin>>P[i];
		fun(P);
	}
	return 0;
}]]></solution>
			<solution language="Pascal"><![CDATA[var     i:integer;s,x:int64;a:array[1..12]of integer;
begin
  for i:=1 to 12 do readln(a[i]);
  for i:=1 to 12 do
   begin
     x:=x+300-a[i];
     if (x>0)and(x>100) then begin s:=s+x div 100*100;x:=x mod 100;end
       else if x<0 then begin writeln('-',i);exit;end;
   end;
  s:=s+s div 5;
  writeln(s+x);
end.
]]></solution>
	</item>
</fps>
