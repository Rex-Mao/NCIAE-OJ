<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[ [ZJOI2008]杀蚂蚁]]></title>
<time_limit unit="s"><![CDATA[3]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>
	<br />
</p>
<p style="color:#333333;font-family:&quot;font-size:15px;">
	注意在(0,0)已经有蚂蚁的时候是不会生成新蚂蚁的
</p>
<p style="color:#333333;font-family:&quot;font-size:15px;">
	还有如果有蚂蚁扛着蛋糕，但是不在某个炮的范围内，炮仍然会打最近的蚂蚁
</p>
<p style="color:#333333;font-family:&quot;font-size:15px;">
	<span style="font-family:&quot;"> </span>
</p>
<h2 style="font-size:1.25em;color:#333333;font-family:&quot;">
	题目描述<span style="font-family:&quot;font-size:12px;font-weight:normal;"></span> 
</h2>
<p>
	<br />
</p>
<p>
	<br />
</p>
<p>
	最近，佳佳迷上了一款好玩的小游戏：antbuster。
</p>
<p>
	游戏规则非常简单：在一张地图上，左上角是蚂蚁窝，右下角是蛋糕，蚂蚁会源源不断地从窝里爬出来，试图把蛋糕搬回蚂蚁窝。而你的任务，就是用原始资金以及杀蚂蚁获得的奖金造防御塔，杀掉这些试图跟你抢蛋糕的蚂蚁~
</p>
<p>
	为了拿到尽可能高的分数，佳佳设计了很多种造塔的方案，但在尝试了其中的一小部分后，佳佳发现，这个游戏实在是太费时间了。为了节省时间，佳佳决定写个程序，对于每一种方案，模拟游戏进程，根据效果来判断方案的优劣。
</p>
<p>
	根据自己在游戏中积累的一些经验，以及上网搜到的一些参数，佳佳猜了蚂蚁爬行的算法，并且假设游戏中的蚂蚁也是按这个规则选择路线：
</p>
<p>
	1、每一秒钟开始的时候，蚂蚁都在平面中的某个整点上。如果蚂蚁没有扛着蛋糕，它会在该点留下2单位的信息素，否则它会留下5单位的信息素。然后蚂蚁会在正北、正南、正东、正西四个方向中选择一个爬过去。
</p>
<p>
	2、选择方向的规则是：首先，爬完一个单位长度后到达的那个点上，不能有其他蚂蚁或是防御塔，并且那个点不能是蚂蚁上一秒所在的点（除非上一个时刻蚂蚁就被卡住，且这个时刻它仍无法动），当然，蚂蚁也不会爬出地图的边界（我们定义这些点为不可达点）。如果此时有多个选择，蚂蚁会选择信息素最多的那个点爬过去。
</p>
<p>
	3、如果此时仍有多种选择，蚂蚁先面向正东，如果正东不是可选择的某个方向，它会顺时针转90°，再次判断，如果还不是，再转90°...直到找到可以去的方向。
</p>
<p>
	4、如果将每只蚂蚁在洞口出现的时间作为它的活动时间的第1秒，那么每当这只蚂蚁的活动时间秒数为5的倍数的时候，它先按规则1~3确定一个方向，面对该方向后逆时针转90°，若它沿当前方向会走到一个不可达点，它会不停地每次逆时针转90°，直到它面对着一个可达的点，这样定下的方向才是蚂蚁最终要爬去的方向。
</p>
<p>
	5、如果蚂蚁的四周都是不可达点，那么蚂蚁在这一秒内会选择停留在当前点。下一秒判断移动方向时，它上一秒所在点为其当前停留的点。
</p>
<p>
	6、你可以认为蚂蚁在选定方向后，瞬间移动到它的目标点，这一秒钟剩下的时间里，它就停留在目标点。
</p>
<p>
	7、蚂蚁按出生的顺序移动，出生得比较早的蚂蚁先移动。
</p>
<p>
	然后，是一些有关地图的信息：
</p>
<p>
	1、 每一秒，地图所有点上的信息素会损失1单位，如果那个点上有信息素的话。
</p>
<p>
	2、 地图上某些地方是炮台。炮台的坐标在输入中给出。
</p>
<p>
	3、 地图的长、宽在输入中给出，对于n * m的地图，它的左上角坐标为（0，0），右下角坐标为（n，m）。蚂蚁洞的位置为（0，0），蛋糕的位置为（n，m）。
</p>
<p>
	4、 你可以把蚂蚁看做一个直径为1单位的圆，圆心位于蚂蚁所在的整点。
</p>
<p>
	5、 游戏开始时，地图上没有蚂蚁，每个点上的信息素含量均为0。
</p>
<p>
	一些有关炮塔的信息：
</p>
<p>
	1、 炮塔被放置在地图上的整点处。
</p>
<p>
	2、 为了简单一些，我们认为这些炮塔都是激光塔。激光塔的射速是1秒/次，它的攻击伤害为d/次，攻击范围为r。你可以认为每秒蚂蚁移动完毕后，塔才开始攻击。并且，只有当代表蚂蚁的圆的圆心与塔的直线距离不超过r时，塔才算打得到那只蚂蚁。
</p>
<p>
	3、 如果一只蚂蚁扛着蛋糕，那么它会成为target，也就是说，任何打得到它的塔的炮口都会对准它。如果蛋糕好好地呆在原位，那么每个塔都会挑离它最近的蚂蚁进行攻击，如果有多只蚂蚁，它会选出生较早的一只。
</p>
<p>
	4、 激光塔有个比较奇怪的特性：它在选定了打击目标后，只要目标在其射程内，塔到目标蚂蚁圆心的连线上的所有蚂蚁（这里“被打到”的判定变成了表示激光的线段与表示蚂蚁的圆有公共点）都会被打到并损d格血，但激光不会穿透它的打击目标打到后面的蚂蚁。
</p>
<p>
	5、 尽管在真实游戏中，塔是可以升级的，但在这里我们认为塔的布局和等级就此定了下来，不再变动。
</p>
<p>
	再介绍一下蚂蚁窝：
</p>
<p>
	1、 如果地图上的蚂蚁不足6只，并且洞口没有蚂蚁，那么窝中每秒会爬出一只蚂蚁，直到地图上的蚂蚁数为6只。
</p>
<p>
	2、 刚出生的蚂蚁站在洞口。
</p>
<p>
	3、 每只蚂蚁有一个级别，级别决定了蚂蚁的血量，级别为k的蚂蚁的血量为$int(4*1.1^k)$ （int(x)表示对x取下整）。每被塔打一次，蚂蚁的血减少d。注意，血量为0的蚂蚁仍能精力充沛地四处乱爬，只有一只蚂蚁的血被打成负数时，它才算挂了。
</p>
<p>
	4、 蚂蚁的级别是这样算的：前6只出生的蚂蚁是1级，第7~12只是2级，依此类推。
</p>
<p>
	最后给出关于蛋糕的介绍：
</p>
<p>
	1、 简单起见，你可以认为此时只剩最后一块蛋糕了。如果有蚂蚁走到蛋糕的位置，并且此时蛋糕没有被扛走，那么这只蚂蚁就扛上了蛋糕。蚂蚁被打死后蛋糕归位。
</p>
<p>
	2、 如果一只扛着蛋糕的蚂蚁走到蚂蚁窝的位置，我们就认为蚂蚁成功抢到了蛋糕，游戏结束。
</p>
<p>
	3、 蚂蚁扛上蛋糕时，血量会增加int（该蚂蚁出生时血量 / 2），但不会超过上限。
</p>
<p>
	整理一下1秒钟内发生的事件：
</p>
<p>
	1秒的最初，如果地图上蚂蚁数不足6，一只蚂蚁就会在洞口出生。
</p>
<p>
	接着，蚂蚁们在自己所在点留下一些信息素后，考虑移动。先出生的蚂蚁先移动。
</p>
<p>
	移动完毕后，如果有蚂蚁在蛋糕的位置上并且蛋糕没被拿走，它把蛋糕扛上，血量增加，并在…
</p>
<h2>
	输入输出格式
</h2>
<strong>输入格式：</strong><br />
<p>
	<br />
</p>
<p>
	输入的第一行是2个用空格隔开的整数，n、m，分别表示了地图的长和宽。
</p>
<p>
	第二行是3个用空格隔开的整数，s、d、r，依次表示炮塔的个数、单次攻击伤害以及攻击范围。
</p>
<p>
	接下来s行，每行是2个用空格隔开的整数x、y，描述了一个炮塔的位置。当然，蚂蚁窝的洞口以及蛋糕所在的位置上一定没有炮塔。
</p>
<p>
	最后一行是一个正整数t，表示我们模拟游戏的前t秒钟。
</p>
<p>
	<br />
</p>
<strong>输出格式：</strong><br />
<p>
	<br />
</p>
<p>
	如果在第t秒或之前蚂蚁抢到了蛋糕，输出一行“Game over after x seconds”，其中x为游戏结束的时间，否则输出“The game is going on”。
</p>
<p>
	如果游戏在t秒或之前结束，输出游戏结束时所有蚂蚁的信息，否则输出t秒后所有蚂蚁的信息。格式如下：
</p>
<p>
	第一行是1个整数s，表示此时活着的蚂蚁的总数。
</p>
<p>
	接下来s行，每行5个整数，依次表示一只蚂蚁的年龄（单位为秒）、等级、当前血量，以及在地图上的位置（a，b）。输出按蚂蚁的年龄递减排序。
</p>
<p>
	<br />
</p>
<h2>
	输入输出样例
</h2>
<div class="am-g">
	<div class="am-u-md-6 copy-region">
		<strong>输入样例#1：</strong> <a class="am-badge am-radius lg-bg-orange sample-copy">复制</a> 
<pre>3 5
1 1 2
2 2
5
</pre>
	</div>
	<div class="am-u-md-6 copy-region">
		<strong>输出样例#1：</strong> <a class="am-badge am-radius lg-bg-orange sample-copy">复制</a> 
<pre>The game is going on
5
5 1 3 1 4
4 1 3 0 4
3 1 3 0 3
2 1 3 0 2
1 1 4 0 1
</pre>
	</div>
</div>
<h2>
	说明
</h2>
<p>
	样例说明：
</p>
<p>
	3*5的地图，有1个单次伤害为1、攻击范围为2的激光炮塔，它的位置为（2，2），模拟游戏的前5秒。5秒内有5只蚂蚁出生，都是向东爬行，其中第1~4只在路过（0，2）点时被激光塔伤了1格血。在第5秒的时候，最早出生的蚂蚁按移动规则1~3本来该向东移动，但由于规则4的作用，它在发现向北和向西移动都会到达不可达点后，最终选择了向南移动。
</p>
<p>
	数据说明：
</p>
<p>
	100%的数据满足1 ≤ n,m ≤ 8，s ≤ 20，t ≤ 200,000
</p>
<div class="lg-article-sub am-g" id="sub">
</div>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[]]></sample_output>
  <test_input><![CDATA[3 5
1 1 2
2 2
3]]></test_input>
<test_output><![CDATA[The game is going on
3
3 1 3 0 3
2 1 3 0 2
1 1 4 0 1]]></test_output>
<test_input><![CDATA[3 3
2 5 3
1 1
1 2
475]]></test_input>
<test_output><![CDATA[The game is going on
6
36 31 61 3 1
35 31 41 1 3
26 31 16 1 0
17 32 74 3 2
11 32 79 2 0
7 32 79 3 3
]]></test_output>
<test_input><![CDATA[8 6
20 2 2
1 3
1 5
2 4
3 1
3 4
3 5
4 1
4 2
4 4
4 5
5 1
5 2
5 5
6 2
7 1
7 3
1 4
2 5
6 1
7 2
50000]]></test_input>
<test_output><![CDATA[Game over after 970 seconds
5
99 43 72 0 0
98 44 55 2 1
55 44 133 6 0
23 44 173 8 0
21 44 191 2 0
]]></test_output>
<test_input><![CDATA[2 5
6 1 3
0 1
1 1
1 3
1 4
2 3
2 4
200000]]></test_input>
<test_output><![CDATA[The game is going on
6
15311 86 13525 1 5
12518 86 10203 0 5
9447 87 12495 0 4
6371 87 13461 0 3
3295 87 14586 0 2
219 87 15873 1 2
]]></test_output>
<test_input><![CDATA[8 8
2 10 1
7 8
8 6
5]]></test_input>
<test_output><![CDATA[The game is going on
5
5 1 4 1 4
4 1 4 0 4
3 1 4 0 3
2 1 4 0 2
1 1 4 0 1
]]></test_output>
<test_input><![CDATA[8 7
7 10 3
0 6
2 5
3 3
7 4
5 1
6 7
8 6
200000]]></test_input>
<test_output><![CDATA[Game over after 51398 seconds
6
5131 97 2954 5 3
3559 97 1374 0 0
3529 97 14274 4 7
2051 97 25854 7 3
1679 98 34115 5 5
1176 98 36565 5 6
]]></test_output>
<test_input><![CDATA[4 7
0 0 0
60200]]></test_input>
<test_output><![CDATA[Game over after 60200 seconds
6
60199 1 4 0 0
60198 1 4 2 6
60197 1 4 4 7
60196 1 4 2 1
60195 1 4 3 5
60194 1 4 4 5
]]></test_output>
<test_input><![CDATA[4 4
4 10 5
1 1
2 2
1 2
2 1
1000]]></test_input>
<test_output><![CDATA[Game over after 831 seconds
6
110 49 86 2 3
88 49 26 0 1
77 49 286 3 1
58 50 29 0 0
22 50 419 4 3
10 50 469 3 2
]]></test_output>
<test_input><![CDATA[7 7
3 1 1
6 7
4 3
1 2
200000]]></test_input>
<test_output><![CDATA[Game over after 8406 seconds
6
699 32 0 2 7
684 32 50 0 0
611 32 26 4 7
220 32 63 6 5
170 32 65 2 3
152 33 76 2 5
]]></test_output>
<test_input><![CDATA[6 4
1 10000 10
2 2
256]]></test_input>
<test_output><![CDATA[The game is going on
0
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[ZJOI2008 省选 高级]]></source>
		<solution language="C++"><![CDATA[#include<cstdio>
using namespace std;
struct ANT{
    int x,y,time,blo,blo_up,lv,lx,ly,next;
    bool cake;
};
struct Tour{
    int x,y;
};
ANT ant[200010];
int tot,many,target,top=0;
Tour tour[22];
int n,m,s,d,r,t;
int ma_su[10][10];
int ma_th[10][10];
int xx[4]={0,1,0,-1};
int yy[4]={1,0,-1,0};
void Init();
void work();
void born();
double Sqr(int );
void put_su();
void run();
void hurt();
bool cmp(int ,int ,int ,int ,int ,int );
bool check();
void print();
int main()
{
    Init();
    work();
}
void Init(){
    int i,j,k;
    scanf("%d%d",&n,&m);
    scanf("%d%d%d",&s,&d,&r);
    for(i=1;i<=s;i++){
        scanf("%d%d",&tour[i].x,&tour[i].y);
        ma_th[tour[i].x][tour[i].y]=-1;
    }
    scanf("%d",&t);
    tot=many=target=0;
    return ;
}
void work(){
    int i,j,T=0;
    while(++T<=t){
        born();
        put_su();
        run();
        hurt();
        if(check()){
            printf("Game over after %d seconds\n",T);
            print();
            return;
        }
        for(i=0;i<=n;i++)
            for(j=0;j<=m;j++)
                ma_su[i][j]-=(ma_su[i][j]!=0?1:0);
        for(i=1;i<=tot;i++)
            ant[i].time++;
    }
    printf("The game is going on\n");
    print();
    return;
}
void born(){
    if(!ma_th[0][0]&&many<6){
        ant[top].next=++tot;
        ant[tot].lv=(tot-1)/6+1;
        ant[tot].blo=ant[tot].blo_up=int(4*Sqr(ant[tot].lv));
        ant[tot].time=0;
        ant[tot].x=ant[tot].y=0;ant[tot].lx=ant[tot].ly=-1;
        ma_th[0][0]=tot;
        many++;
        top=tot;
    }
}
double Sqr(int m){
    double ans=1,x=1.1;
    while(m){
        if(m&1)
            ans*=x;
        m>>=1;
        x*=x;
    }
    return ans;
}
void put_su(){
    int i;
    for(i=1;i<=tot;i++)
        if(ant[i].blo>=0)
            ma_su[ant[i].x][ant[i].y]+=(ant[i].cake?5:2);
}
void run(){
    int i,j,k,fx,X,Y,max;
    for(i=ant[0].next;i;i=ant[i].next){
        fx=-1;max=-1;
        for(j=0;j<=3;j++){
            X=ant[i].x+xx[j];
            Y=ant[i].y+yy[j];
            if(X<=n&&X>=0&&Y<=m&&Y>=0&&(X!=ant[i].lx||Y!=ant[i].ly)&&(!ma_th[X][Y])&&ma_su[X][Y]>max){
                max=ma_su[X][Y];
                fx=j;
            }
        }
        if(fx!=-1){
               if(!((ant[i].time+1)%5))
                   for(j=1;j<=4;j++){
                       fx=(fx+4-1)%4;
                       X=ant[i].x+xx[fx];
                    Y=ant[i].y+yy[fx];
                       if(X<=n&&X>=0&&Y<=m&&Y>=0&&(X!=ant[i].lx||Y!=ant[i].ly)&&(!ma_th[X][Y]))
                           break;
                   }
               ma_th[ant[i].x][ant[i].y]=0;
               ant[i].lx=ant[i].x;ant[i].ly=ant[i].y;
               ant[i].x+=xx[fx];ant[i].y+=yy[fx];
           }
           else{
               ant[i].lx=-1;
               ant[i].ly=-1;
        }
        if(ant[i].x==n&&ant[i].y==m&&!target){
            target=i;
            ant[i].cake=true;
            ant[i].blo=ant[i].blo+ant[i].blo_up/2<ant[i].blo_up?ant[i].blo+ant[i].blo_up/2:ant[i].blo_up;
        }
        ma_th[ant[i].x][ant[i].y]=i;
    }
}
void hurt(){
    int i,j,k,len,targ=-1,X,Y;
    for(i=1;i<=s;i++){
        X=ant[target].x-tour[i].x;Y=ant[target].y-tour[i].y;
        if(!target||X*X+Y*Y>r*r){
            len=10010;
            for(j=ant[0].next;j;j=ant[j].next)
                if((tour[i].x-ant[j].x)*(tour[i].x-ant[j].x)+(tour[i].y-ant[j].y)*(tour[i].y-ant[j].y)<len){
                    targ=j;len=(tour[i].x-ant[j].x)*(tour[i].x-ant[j].x)+(tour[i].y-ant[j].y)*(tour[i].y-ant[j].y);
                }
        }
        else
            targ=target;
        X=ant[targ].x-tour[i].x;Y=ant[targ].y-tour[i].y;
        if(X*X+Y*Y<=r*r)
        for(j=ant[0].next;j;j=ant[j].next)
            if(cmp(ant[j].x,ant[j].y,tour[i].x,tour[i].y,ant[targ].x,ant[targ].y))
                ant[j].blo-=d;
    }
    j=0;
    for(i=ant[j].next;i;i=ant[i].next)
            if(ant[i].blo<0){
                ma_th[ant[i].x][ant[i].y]=0;many--;
                ant[j].next=ant[i].next;
                if(i==target)
                    ant[i].cake=false;
                if(i==top)
                    top=j;
            }
            else
                j=i;
    if(!ant[target].cake)
        target=0;
}
bool cmp(int ax,int ay,int tx,int ty,int targx,int targy){
    double t_ax=ax-tx,t_ay=ay-ty,targ_ax=ax-targx,targ_ay=ay-targy,t_targx=targx-tx,t_targy=targy-ty;
    double R=(t_ax*t_targx+t_ay*t_targy)/(t_targx*t_targx+t_targy*t_targy);
    if(R<=0)return (t_ax*t_ax+t_ay*t_ay)<=0.25; 
    if(R>=1)return (targ_ax*targ_ax+targ_ay*targ_ay)<=0.25;
    double px=tx+(targx-tx)*R;
    double py=ty+(targy-ty)*R;
    return (ax-px)*(ax-px)+(ay-py)*(ay-py)<=0.25;
}
bool check(){
    return (target&&!ant[target].x&&!ant[target].y);
}
void print(){
    int i;
    printf("%d\n",many);
    for(i=ant[0].next;i;i=ant[i].next)
        printf("%d %d %d %d %d\n",ant[i].time,ant[i].lv,ant[i].blo,ant[i].x,ant[i].y);
}]]></solution>
	</item>
</fps>
