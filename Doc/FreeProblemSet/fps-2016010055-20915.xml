<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[进制转换]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[125]]></memory_limit>

<description><![CDATA[<p>
	我们可以用这样的方式来表示一个十进制数： 将每个阿拉伯数字乘以一个以该数字所处位置的（值减1）为指数，以10为底数的幂之和的形式。例如：123可表示为1*10<span style="line-height:15px;"><sup>2</sup>+2*</span>10<span style="line-height:15px;"><sup>1</sup></span>+3*10<span style="line-height:15px;"><sup>0</sup></span>这样的形式。
</p>
<p>
	与之相似的，对二进制数来说，也可表示成每个二进制数码乘以一个以该数字所处位置的（值-1）为指数，以2为底数的幂之和的形式。一般说来，任何一个正整数R或一个负整数-R都可以被选来作为一个数制系统的基数。如果是以R或-R为基数，则需要用到的数码为 0，1，....R-1。例如，当R=7时，所需用到的数码是0，1，2，3，4，5和6，这与其是R或-R无关。如果作为基数的数绝对值超过10，则为了表示这些数码，通常使用英文字母来表示那些大于9的数码。例如对16进制数来说，用A表示10，用B表示11，用C表示12，用D表示13，用E表示14，用F表示15。<br />
在负进制数中是用-R作为基数，例如-15（十进制）相当于110001（-2进制），并且它可以被表示为2的幂级数的和数：
</p>
<p>
	<br />
</p>
<p class="MsoNormal">
	110001=1*(-2)<span style="line-height:15px;"><sup>5</sup>+1*(-2</span>)<span style="line-height:15px;"><sup>4</sup></span>+0*(-2)<span style="line-height:15px;"><sup>3</sup></span>+0*(-2)<span style="line-height:15px;"><sup>2</sup></span>+0*(-2)<span style="line-height:15px;"><sup>1</sup></span><span style="line-height:1.5;">+1*(-2)</span><sup><span style="line-height:15px;">0</span><span style="line-height:1.5;"></span></sup> 
</p>
<p class="MsoNormal">
	<sup><span style="line-height:1.5;">设计一个程序，读入一个十进制数和一个负进制数的基数，并将此十进制数转换为此负进制下的数：-R∈｛-2，-3，-4，...，-20｝。</span></sup> 
</p>
<p class="MsoNormal">
	<sup><span style="line-height:1.5;"><br />
</span></sup> 
</p>
<p>
	<br />
</p>
<p>
	<br />
</p>]]></description>
<input><![CDATA[<p>
	每个测试文件只包含一组测试数据，每组<span style="line-height:1.5;">输入两个整数，</span>第一个是十进制数N（-32768&lt;=N&lt;=32767）；第二个是负进制数的基数-R。
</p>
<p>
	<br />
</p>]]></input> 
<output><![CDATA[<p>
	对于每组输入数据，输出此负进制数及其基数，若此基数超过10，则参照16进制的方式处理。
</p>
<p>
	<br />
</p>]]></output>
<sample_input><![CDATA[30000 -2
]]></sample_input>
<sample_output><![CDATA[30000=11011010101110000(base-2)
]]></sample_output>
  <test_input><![CDATA[27993 -8
]]></test_input>
<test_output><![CDATA[27993=72651(base-8)
]]></test_output>
<test_input><![CDATA[-569 -2
]]></test_input>
<test_output><![CDATA[-569=1011011011(base-2)
]]></test_output>
<test_input><![CDATA[-304 -20
]]></test_input>
<test_output><![CDATA[-304=GG(base-20)
]]></test_output>
<test_input><![CDATA[-37336 -16
]]></test_input>
<test_output><![CDATA[-37336=AFE8(base-16)
]]></test_output>
<test_input><![CDATA[683 -2
]]></test_input>
<test_output><![CDATA[683=11111111111(base-2)
]]></test_output>
<hint><![CDATA[<table style="width:50%;" cellpadding="2" cellspacing="0" border="1" bordercolor="#000000">
	<tbody>
		<tr>
			<td>
				-20000 -2<br />
			</td>
			<td>
				-20000=1111011000100000(base-2)<br />
			</td>
		</tr>
		<tr>
			<td>
				28800 -16<br />
			</td>
			<td>
				28000=19180(base-16)<br />
			</td>
		</tr>
		<tr>
			<td>
				-25000 -16<br />
			</td>
			<td>
				-25000=7FB8(base-16)<br />
			</td>
		</tr>
	</tbody>
</table>
<br />]]></hint>
<source><![CDATA[NOIP全国联赛提高组 2000年NOIP全国联赛提高组]]></source>
		<solution language="C"><![CDATA[#include<stdio.h>
#include<string.h>
char base[21]="0123456789ABCDEFGHIJ";
int main(){
	int N,b,r,i;
	char ans[30]={0};
	while(scanf("%d%d",&N,&b)==2){
		printf("%d=",N);
		i=0;
		while(N!=0){
			r=N%b;
			N=N/b;
			if(r<0){
				r-=b;
				N++;
			}
			ans[i++]=base[r];
		}
		for(i=strlen(ans)-1;i>=0;i--){
			printf("%c",ans[i]);
		}
		printf("(base%d)\n",b);
	}
	return 0;
}]]></solution>
			<solution language="C++"><![CDATA[#include <iostream>
#include <string>
using namespace std;
const char nc[20] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
string ans;
int main()
{
	int m, n, k, t, s;
	for(;cin >> m >> n;)
	{
		ans = "";
		s = m;
		for(;m != 0;)
		{
			k = m % n;
			t = m / n;
			if(k < 0)
			{
				k -= n;
				t++;
			}
			m = t;
			ans.push_back(nc[k]);
		}
		cout << s << "=";
		int i = ans.length() - 1;
		while(i >= 0)
		{
			cout << ans[i];
			i--;
		}
		cout << "(base" << n << ")" << endl;
	}
	return 0;
}]]></solution>
	</item>
</fps>
