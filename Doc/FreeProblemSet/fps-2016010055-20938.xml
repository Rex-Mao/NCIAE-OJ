<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[麦森数]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[125]]></memory_limit>

<description><![CDATA[<p class="a">
	形如<span>2<i><sup>P</sup></i>-1</span>的素数称为麦森数，这时<span>P</span>一定也是个素数。但反过来不一定，即如果<span>P</span>是个素数，<span>2<i><sup>P</sup></i>-1</span>不一定也是素数。到<span>1998</span>年底，人们已找到了<span>37</span>个麦森数。最大的一个是<span>P=3021377</span>，它有<span>909526</span>位。麦森数有许多重要应用，它与完全数密切相关。
</p>
<p class="a">
	<span style="line-height:1.5;">任务：从文件中输入</span><span style="line-height:1.5;">P</span><span style="line-height:1.5;">（</span><span style="line-height:1.5;">1000&lt;P&lt;3100000</span><span style="line-height:1.5;">），计算</span><span style="line-height:1.5;">2<i><sup>P</sup></i>-1</span><span style="line-height:1.5;">的位数和最后</span><span style="line-height:1.5;">500</span><span style="line-height:1.5;">位数字（用十进制高精度数表示）。</span>
</p>
<p class="a">
	<span style="line-height:1.5;"><br />
</span>
</p>]]></description>
<input><![CDATA[<p>
	每组输入只包含一个整数<span>P</span>（<span>1000&lt;P&lt;3100000</span>）。
</p>
<p>
	<br />
</p>]]></input> 
<output><![CDATA[<p class="a">
	第一行：十进制高精度数<span>2<i><sup>P</sup></i>-1</span>的位数。
</p>
<p class="a">
	<span style="line-height:1.5;">第</span><span style="line-height:1.5;">2-11</span><span style="line-height:1.5;">行：十进制高精度数</span><span style="line-height:1.5;">2<i><sup>P</sup></i>-1</span><span style="line-height:1.5;">的最后</span><span style="line-height:1.5;">500</span><span style="line-height:1.5;">位数字。（每行输出</span><span style="line-height:1.5;">50</span><span style="line-height:1.5;">位，共输出</span><span style="line-height:1.5;">10</span><span style="line-height:1.5;">行，不足</span><span style="line-height:1.5;">500</span><span style="line-height:1.5;">位时高位补</span><span style="line-height:1.5;">0</span><span style="line-height:1.5;">）</span>
</p>
<p class="a">
	<span style="line-height:1.5;">不必验证</span><span style="line-height:1.5;">2<i><sup>P</sup></i>-1</span><span style="line-height:1.5;">与</span><span style="line-height:1.5;">P</span><span style="line-height:1.5;">是否为素数。</span>
</p>
<p class="a">
	<span style="line-height:1.5;"><br />
</span>
</p>]]></output>
<sample_input><![CDATA[1279]]></sample_input>
<sample_output><![CDATA[386
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000104079321946643990819252403273640855
38615262247266704805319112350403608059673360298012
23944173232418484242161395428100779138356624832346
49081399066056773207629241295093892203457731833496
61583550472959420547689811211693677147548478866962
50138443826029173234888531116082853841658502825560
46662248318909188018470682222031405210266984354887
32958028878050869736186900714720710555703168729087]]></sample_output>
  <test_input><![CDATA[ 
3217]]></test_input>
<test_output><![CDATA[969
50116412703509705427773477972349821676443446668383
11932254009964899405179024162405651905448369080961
60616257430423617218633394158524264312087372665919
62061753535748892894599629195183082621860853400937
93283942026186658614250325145077309627423537682293
86494071277008460771242118230808041392980870575047
13825264571448379371125032081826126566649084251699
45395188778961365024840573937859459944433523118828
01236604062624686092121503499375847822922371443396
28858485938215738821232393687046160677362909315071]]></test_output>
<test_input><![CDATA[ 
3021377]]></test_input>
<test_output><![CDATA[909526
11913281261611537667213798436049305566736876178255
88332272350690015415089402574152885277835931459133
40309734813994510763562374502553333760767267082261
94805056498068234364270236322187114005959098576373
86600852826717764565800819358859665607143791528714
49648414600032153277107696032667644008966901945306
68310460272117099806449192863428911515984207543022
30411839060484427823257208111447478189918377204959
69880392336860732039112145134495381589829360634296
37539718233655887458210261770225422631973024694271]]></test_output>
<test_input><![CDATA[ 
4423]]></test_input>
<test_output><![CDATA[1332
78488728982288156282600813831296143663845945431144
04375382154287127774560644785856415921332844358020
64227146949130917627164470416896780700967735904298
08909616750452927258000843500344831628297089902728
64998199438764723457427626372969484830475091717418
61811306885187927486226122933413689280566343844666
46326572476167275660839105650528975713899320211121
49579531142794625455330538706782106760176875097786
61004600146021384084480212250536890547937420030957
22096732954750721718115531871310231057902608580607]]></test_output>
<test_input><![CDATA[ 
1398269]]></test_input>
<test_output><![CDATA[420921
92869344833113191277605527242976118990404140986313
46330749925695301108480232906107137430361697673618
71144770733906268348075510403943006530506145641931
82006175949117804409602179968745683820822290035183
96656802758480090633946212021626368853976964240906
84926123783162226894580700026998715604381463221056
69416714078407660964902145192226084466445066843466
08284609080353564816395117984170112944662406744358
62878919205295726467356339554077345627396842746095
03632628077779067477683462531985532025868451315711]]></test_output>
<test_input><![CDATA[ 
11213]]></test_input>
<test_output><![CDATA[3376
37229319592369288171375276702260450911735069504025
01666775521493207364365419948847701036390937200575
78999895807757751266211130579057174494172220160705
30243916116705990451304256206318289297738303095152
43054977223951496482160183862886144630193601771054
67775031092630309947473976185762073734477254414271
35362428360863669327157635983045447971816718801639
86954752514630565557184371791687566914032072497856
85867185275866024396023352835139449800643270302781
04224144971883680541689784796267391476087696392191]]></test_output>
<test_input><![CDATA[86243]]></test_input>
<test_output><![CDATA[25962
79703690602567473816512335624372076379566082030679
12439206620235758650147895166177535866385795630368
34055378477781370640297039260367479584587420897320
52549318161396475554914563870886654597859221632902
34690334971548318468117832228572631424866778315564
60602846450000517145589171992401648810902661369025
73707212409831769690354034882497230519475241696380
43767876677292778517229159025657351862519228939958
84693761059056977054150896001780329459143532013769
15456322320250960867906195719699857021709433438207]]></test_output>
<test_input><![CDATA[ 
756839]]></test_input>
<test_output><![CDATA[227832
18288448825429774219846956862417770870640302475247
92828312585598040121588421297674731878093115313182
16753914541797571068392534875840214937021204750378
89055619401647443568291937923950889819022384242323
28767636683196318572845992994357198238764218257600
09234774987448978769799124034384499030364505405943
84275497234460834579807796823701486980464630401353
54915833132974601389482848422119619724789014565809
44396409267168409183491136926492417685905113427201
26927068487680404055813342880902603793328544677887]]></test_output>
<test_input><![CDATA[ 
607]]></test_input>
<test_output><![CDATA[183
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000531137992816767098689588206552468
62732959311772703192319944413820040355986085224273
91625022652292856688893294862465010153465793376527
07239409519978766587351943831270835393219031728127]]></test_output>
<test_input><![CDATA[ 
2976211
]]></test_input>
<test_output><![CDATA[895929
09706254902780580488538638337749488166014345988326
02775279611779313026429691390417911643979834461015
82796840762652659657879019767719300642845223087116
62403659439552250198135538452083443036688067014742
34849992771496671872080263423105090982169268837394
90349237844608937582631965760646844828980604713404
94758793031585694216573044384886437022298236407514
12669234650178896555557671246448254579285995086138
17684057898736849005201669426891137948698576073174
93902398262481988755867710259809742681891351298047]]></test_output>
<test_input><![CDATA[ 
1279]]></test_input>
<test_output><![CDATA[386
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000104079321946643990819252403273640855
38615262247266704805319112350403608059673360298012
23944173232418484242161395428100779138356624832346
49081399066056773207629241295093892203457731833496
61583550472959420547689811211693677147548478866962
50138443826029173234888531116082853841658502825560
46662248318909188018470682222031405210266984354887
32958028878050869736186900714720710555703168729087]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛普及组-2003年NOIP全国联赛普及组 一本通 一本通2018-第七章-分治算法]]></source>
		<solution language="C++"><![CDATA[#include<stdio.h>
#include<math.h>
#include<string.h>
int a[501],t[501],n[501];
void suanfa(int p)
{
	int i,j,q;
	memset(a,0,sizeof(a));
	memset(t,0,sizeof(t));
	memset(n,0,sizeof(n));
	t[500]=1,a[500]=2;
	if(p!=1)
	{
		while(p)
		{
			if(p&1)
			{
				memset(n,0,sizeof(n));
				for(i=500;i>=1;i--)
				{
					for(j=500,q=i;j>=1;j--,q--)
					{
						if(q==0)
							break;
						n[q]=n[q]+t[i]*a[j];
					}
				}
				for(i=500;i>=1;i--)
				{
					if(n[i]>=10)
					{
						n[i-1]=n[i]/10+n[i-1];
						n[i]=n[i]%10;
					}
				}
				for(i=500;i>=1;i--)
					t[i]=n[i];
			}
			memset(n,0,sizeof(n));
			for(i=500;i>=1;i--)
			{
				for(j=500,q=i;j>=1;j--,q--)
				{
					if(q==0)
							break;
					n[q]=n[q]+a[i]*a[j];
				}
			}
			for(i=500;i>=1;i--)
			{
				if(n[i]>=10)
				{
					n[i-1]=n[i]/10+n[i-1];
					n[i]=n[i]%10;
				}
			}
			for(i=500;i>=1;i--)
				a[i]=n[i];
			p>>=1;
		}
	}
	t[500]--;
	for(i=1;i<=500;i++)
	{
		printf("%d",t[i]);
		if(i%50==0)
			puts("");
	}
}
int main()
{
	int p;
	scanf("%d",&p);
	printf("%d\n",int(p*log10(2)+1));
	suanfa(p);
	return 0;
}]]></solution>
			<solution language="Pascal"><![CDATA[var n,i:longint;s:array[1..1000]of longint;o:array[1..500]of longint;
procedure sl(n:longint);
var i,j:longint;
begin
  if n=0 then exit;
  sl(n div 2);
  for i:=1 to 500 do 
    for j:=1 to 500 do
	  if n mod 2=0 then s[i+j-1]:=s[i+j-1]+o[i]*o[j]
	  else s[i+j-1]:=s[i+j-1]+o[i]*o[j]*2;
  for i:=1 to 500 do
    begin
      o[i]:=s[i] mod 10;
	  s[i+1]:=s[i+1]+s[i] div 10;
	end;
  fillchar(s,sizeof(s),0);
end;
begin
  read(n);
  writeln(trunc(ln(2)/ln(10)*n)+1);
  o[1]:=1;
  sl(n);
  for i:=500 downto 2 do 
    begin  
	  write(o[i]);
	  if i mod 50=1 then writeln;
	end;
  writeln(o[1]-1);
end.]]></solution>
	</item>
</fps>
