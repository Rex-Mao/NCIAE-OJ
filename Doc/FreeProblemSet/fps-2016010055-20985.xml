<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[多项式输出]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[125]]></memory_limit>

<img><src><![CDATA[http://tk.hustoj.com:80/attached/image/20140117/20140117144252_80279.jpg]]></src><base64><![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCAAnAcUDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9UjSE0p4Fcl8R/iXoHws8LXfiDxLdvZaXbKzPKkEkrfKhcgKik9FPt71L0GtTqS+cY5HrRu56/rXzN+zzpl3+0D4T8PfFnX9a1Ww1241l9XtLKyleGOysdrpBpzIy4KNE6SSlRl5P4iFAHf6x8QLjxf8AGeT4baBdvaLo2nRar4j1CA4lhSZitraxn+F5Nkjs2MqiADBcFatZ26k36o9cDZoLgDOa5nWfiN4W8M+INJ0HVfEWl6drequI7DTbm8RLm6Y5wI4ydzfdboOxqvceK9A8Yanr/hDTfFEMXiPToY3vrbTLtDe6eJMmJ2XnaTjIDAgjqMHlegzsAc96WvLvgv8AFG48ZXXizwxrfkp4w8H6iNN1RYF2R3CPGJLe6RcnaksTA7cnayuuTtzXpnmHP3c/TmmBLRUZf2P5GjfxnFAElFc74o8eaH4Kgt5db1K304XDFYVlYl5CMZ2oAWYDcCSBgA5OKuaL4n0rxGLptK1G11JLWc2072kyyrFKACUYqSAwBGR1GRmgDWophfGPeuW0f4qeEPEN/rdlpfijR9SudEUNqkVpfRyGxB3czYPyfcfr02nNAHUufc/gKbk5xk/jXkXj28tfjj4J8JSeC9RttZ0XVNatrg69p0gmht7eB2klkR1ONxMXlA84aTkHBra+CGk3tj4X1O+1C0vNOutX1i91E2F6W32yPKVjXDE4yiK5xwWdiOtFtLiPRx0paiMmB0rB0TxvYa/4j8Q6JbLOL3QpYIbsyJhC0sKzJsOfm+Vhnpg8UDOjoqMuQOmT6Vz+t/EHw/4b1az0zUtWtbTULsjybaR/nIJIDEDO1SQRubC5GM5o3A6SiszQ/EOneJtNh1HSb631PT5s+Vd2kolikwSpKsvBGQRkelaIJz0oAdRSMcCsHxj468P/AA+0SXWPE2t6foGlxna15qV0lvEDgnG5iBnAPA54oA3CTTQ+T/F+Vcze/ErwrYX3h2xufEWmQ3niPP8AY9u92gfUQE3kwDOXG3ByOOR6ivHNf8Ca9rHjrWL86ff21prXivTYY/s4dPs9pZRiV7x2VusrxtEpxja4znPCtfQTelz6Lzx1rndL8d6Pq/jDV/DFrdSPrGkwQXN5A0EiCOOYuI2DsArZMb/dJxjmsXWvBni3UtTubmy8fXWl2krbo7NNJtJREPQM6lj+Ncv4Rivrb9pPxlLcafqrWcvhzSrWLVJrB47WeaGS5aVUkxsyBNGcDuSB904FuEr20/rU9lWnVEH46c1gav450/RfFWgeH7hZ/t2ti5NqUTMY8hA772zxwwxwc0xnSUVGHJ6jFPHIoAWim55oLYoAdRXOx+NrCXxzP4UVZv7Uh06PVGYp+68l5XiXDZ+9ujbjHTFbvm8Zxx9aAJaK53xR490LwYls2tanb6eblisMcrEvLggEqgBYgZGSBgZGSKu6N4m0vxGlw+lajaanHbztbTPaTLKscq43IxUkBhkZHUd6ANWisjxH4p0jwfpE+q67qllo2mQYMt5f3CwQx5OBl2IAyeKxLj4v+C7XSvDWpzeKtHi0/wASzRW+jXL3qCPUZJRmNIDn94WHQCha7AdlRUYkzWBpHjnT9b8V+IPD9us4v9E+zG6LpiM+ehdNhzzwDnpg0AdHRUZfHasDXviB4f8ADGpWWn6nq1rZ314wENvI/wA7AkgMQMlVyMbmwueM0AdHRWZoXiHTfE2nJf6Tf22p2Ls6pdWcolicqxVgGXIOGBBx3BrToAKKKYWxQA+ioJ7qO2heWV1jjjUs7u2FUAZJJPQAVy+j/Fnwhr1xBBY+ItPuJri4NrbxrOA1xJtL4iBx5g2qzbkyMKTnANAHX0UincM01n20APpDUbzBELNlQBkk8AfjWB4H8cWXxA8NWuvaZDdJpt2zm2kuoTEZ41cqsqg87HA3ITjKspwM0Ab5bBPzUqt15rwr9of4qapoXjj4WfDjw/ePpmseO9Xlhn1CFQ0trp9tEZrlosghZGGyNWIO3eWxkCqmn+Pr34YftRaR8MJ7+81Lw14r0CbVdIOpXT3NxZXls+J4RNITJJG8bK43sxVkYA4YAJa/12E9P6+R9Bg5opqtgdKKYXFLDHWvnb9uvWL1f2ftQ8LaSzjWfG+oWfhOzEZ5Y3cypN+HkiXPoK961ie7ttNvJbG2W8vEhdoLd5BGJZApKoW/hBOBntnNePaJ4X1z4xeJ/h14t8Y6DL4YTwvbPfjRLh1cnWJYvKduCcxwIZlRzguZd2AAMrd6jvbU9f0bSrfQtHs9NtF8u1s4EtoU/uoihVH5AV80/s0rJD+1l+1HFeqy3x1TRplMh5NsbEiLH+zw3619SAYGK8u8R/Dy60T4rxfEjw5bLdX11YLo+u6WrBGv7VHLwSxsePOhZnwGIDo7LkELTXxXZDXu27HAftz2kOufAXW5tE8u68Z6BLHr2jNa+W9xbXNi63Lvz90LGrBs9pAMEsAfSPhD4e8Ctptt4u8MaVpsWpa9ptrd3epwQoLu7jlUzo08gG5yxkZst6+mK3dH+FvhLRNX8SarYeHdPtdR8Rvv1e5SAb707Nn70nqNvBHQ/Wm6B4O0X4SeB00bwZ4ahtNNsUP2XR9MVIg7E9MsQBknlmPA+mKUXZNP+u5T1seCfCuOY/8ABQP45SW277EvhrQVu8fd+0Ycx599gavQ/wBpTwzD4l0PRopvAni7x2sdy7i38I+If7Ilg+TG+R/tdtvU9Au5sHnA610Xwg+F7eBv+Ej1nU5YbzxZ4p1E6prF3AD5e8KI4YIs8+XDEqoueSQzEAsa9GA4pfZjHsPq3/XY+GD8KbL/AKN3+NX/AIcs/wDy5r7U0GL7PoWnRC2nswtvGv2a5l82WL5QNjvubcw6E7jkgnJ61qEDHQVGRnNN7C8z5T+E/wAXdKi+GHj34/8AiGX7Zf6hcaoun2uR51vp1hJKkNlCpPylvJaWT1aQs3CjHbfsTeEl8Hfs1eD45hGmp6lFJrOohWyRdXcjXEise5XzAnPPygV19p+zp8M9PbxW1t4I0WBvFSyprTR2oU3qyj96rkdA/VguATyearfFuzu/D/w803w/4PWXStRur+y03TRp8hgW3HmhnZiAfkWJJGYfxAY700+neyB6u/q/69D024uYbaCSaaWOKGNS7ySMFVQBkkk8AV8l/FzTNEX9sP4e3rWsVx4c8V2N14T8QAJGbS9uY0+3WUEo/wCWhASTIPG1gpyCRXsnw5tD8QvDnjmHxBLJrnh/VdWvbCKz1FQyG0RVtpExgfu5HSZwvYSACtm/+BvgLU/B2ieFLrwlpM/hzRJ4bnTtLe2BgtpYs7HVfUZbk9cnOcmktGm/601B6po3/Bvh3w/4X8OWmneF9PsNL0OMNJbWumxLFbqHYuxRV4ALMTx61thdvbikiQJhVwFAwFAxipccUAcX8SdH8bazpNtF4I8S6T4Z1BZt09xrGjtqUcke0/IqLPCVOcHduPAIxzmvnbwB4M+OMvxT+KEdr8T/AAfBex3lgLueTwVK6TsbGIoUT7eNgC4BBLZIzxnFfXTDPFZmneGtN0rVdU1K0tIoL7U3jkvJ1B3TsiCNC30RQo9hRsVfSxk+JfEk/wAP/hrquv6y66ncaJpMt9ePaQmJbhoYS7lIyzFQxU4XJxkDJ618p+JPHH/Cvv2HtX8V3Ey698RfiLo6Xc8sDgy3F1qIWGEAg5WCAXEcaDoAgA+Zjn7RuLaO6gkhmjSWGVSjo6hlZSMEEHggjtXm2jfs0fC7w94Vm8Nab4F0Sy0Oa8iv5LKG22o80cnmxuecnY4yozgdhii17p9bf8ES0s/68jb+D/g/T/h18LfCPhjTJIpLHSNKtrGKSLG2QRxBS+R13EE57kmuzVgRnINeXfFO+1K18Q+BtN0W6uNMQXs19fzQMVhjsLeBvNDoAQ+WeJVX1Of4SKz/AIfT+PtU+FnhjUNOvtOuLy/Sa9mbxEs0kqQyyNJBHujK5KRsqEsOdtU9W5EpcqSPUdY8R6VoJsl1PU7TT2vZ1tLVbmdYzPMxwsaAkbmPZRk1l+N5vD8/h7UrDxD9luNOuLWRbi0nCuZYm+QgIeW3FgoAHJYDqa8a+PWrX2i+E/BEvjW90SC9Xxvo8kUlisiRrElyjO37wkgqAxYjgL1r2DVPhx4Z8QeL9H8V6hodjeeI9IhkhsNSmhDTWySEFwhPTJA56jtjNS1dWZV7M+cP2J/Bvh/UvhtpFv4t0q01Hx54D1m88M293qsUct5ZCyZhBHEw+5tt5UJ29d5JzxX1rtAA+X8q5zQPhv4Y8MeJ9d8R6VoVjYa7rsiSalqEEIWa6ZVCqXbvgAfzOTXTrVSblqyUrbDemODTdgznHP0qWipKMrxDband6HqEGi3kGm6tJA6Wl5dWxuIYJSp2u8QZC6g4JUMuemRXyr428GfHGP4x/DWK4+J3hCa/kXVPstwngqVI4cQRl96fbyX3DAGGXGO/Svr1hzWVe+GdM1LWdN1a5s4ptR00Si0uGB3Q+YoWTb/vAAH6UbDTsY/w60nxho+hyQ+NPEOmeJdVM7Ml3pOktp0SxYGEMbTSksCGO7dzkDHGT0lvq9lcm6WG7gla1fy7gJKrGFsZw+D8pwQcHHBqxtwK5bSfhh4U0GTxM+n6DY2reJp2udZMcWPt0jJsZpf7xK5B+p9TQSjabxDpY0yLUjqNoNPl2+XdGdPKfccLh84OSQBg81m+O9P8S6r4buLfwlrVhoGtsyGK/wBT05r+BAGBYGFZYi2VyAd4wTnnpWNP8DfAd38PNP8AAk3hXTJfB9g0TW2jPDm3iMb+YhC56huevc5613QAxgYo3GfI1t4M+OP/AA0NqEC/E/weNUHha2drs+CpfKMP2ycKgj+35DBtxLbuQQMcZr6d8JWOu6d4asrbxLqlprOtopF1fWFkbOGVtxwVhMkhTjAxvPIz3xVpfDWmr4ik10WcQ1eS1Wya7AO8wK7OsfXoGZj9TWiVypFNu6sD1Z8nfCz4xaXYfBjxt+0H4gk/tDVNXOpz2NoGHnQafZSSpb2MQP3eITLJ0+eRmbgDHZfsmadpXwe/Ze8DrrupWGlz3kX22/uLq4WNTfXkpmeMsx5cPLsA6/KBXb2f7OPwy06LxXHa+B9Et08VeaNZEdqF+2iT/WB8dAx5IXAJ561yf7V0Wj+F/wBnm/tAlrp9jBd6bFaxbQFXbewNhR6hVY8dlJ9acbXS72X+ZL7+p7Dr2o6XY2cv9rT2sVr5TySJdFdrRqMudp6gA88d6+Tf2RvAPhWaDxb4S8V6DZ3eo+BPF0tr4ft9at45JdOspWF/YiAHPltiUng5/dgHhMD6b13wD4S+IOp+HNe1XRtP1y70WVrzSL2eMSm2eRQDJGenICnPsD1AqWx+G3hjTvHOo+MrbQ7KHxTqNvHa3erLEPtE0ScIjN6AcfQDPQUlo7jepX+I+k+MtY0S3h8E+I9K8Nams4ea71fSH1KN4trAoI1nhKtuKnduPAIxzkfOPgfwb8cZfjF8S4rf4neEIb+MaX9quJPBUrxzZt2KbE+3jZtGQcls9eOlfXmMisux8N6Zpus6nq1rZxQajqXlfbLhAd0/lqVj3f7qkgUiltYzrzVrzwb4Bn1PX7iPVLzStNe5vp7K3MKXDxRF5GjiLMUDFThdzYyBk18pSfEuPwJ+xJrnxMv5E1zx/wCPtFbVXEDgyyy3gEdtAvOVgtxNFGB0G0/xPz9nzRJPG0cihkYbWVhkEdwR3rzTSf2Z/hboXhfUfDmneBNEstE1C5S8u7OC1CpNKkolQtznCuAyjOAegFJ63T6/0xLSw/4RaJoXwQ+A/hLR5tQtbTSdB0e2tZbx5FWNnVAHfPQlpNx45JPcmvRNN1S01ixgvbG5iu7SdBJFPC4ZHU9CCOorzD4yWrabqHw71aR1tfDGia79q1QhdsUEX2O4jikfHARJXjJJ4XgnpkWfgLZ38PhnXLq6DR2Oo+IdT1DTInUrts5bhmiYKQMB/mkA9JBWjfNeRMVypI9P3j1prc1xHw4+Hr+Bb3xZdSarqGoHXtYl1UW95eSXKWYZEXyoi/3UJQttGFUtgDAye3FRco8C+Omr/wDCYfGT4afCmebydE1pL7XdZiJ2/b7ayEeyzJ7o8sqM6/xJEQeCc8vp2raX8U/25bN7RYm0z4feFHS2uQRsnvL98fuR0KpBBIAw/vNjjr7n8Qfg94K+Kr6S3i/wzpviJtKn+1WRv4BJ5EmMEr7EYypyDgZBwKt2HgXwz4Y17V/Etlo9nYatfQRR3t/DCFklihTbGpx2VOABjgAdqE7a9r/iJq+nodOki9AwJpr8kHtXz58H9U8Wan4m8G22qatqaeZpeoa9dWV1KZB9luLgLYwyMy5aRV3MTkFNm3kHJ+hD06U2gPzs+J3gKDW/EcXhHSvgl8XINa1CU314f+FgmTdpqTAXDxxnVTGvmbhGokAGHYgEpivo79mHwNZeDr/Vo7H4XeOPh7CLWKJG8U+KP7WglRTxHCgvrgRlRjkKvGBk9K9xs/C+l2PiDUNbgsoo9W1COKG5u8EvJHFu8tCSeAu9yAMDLE9TmtcAYoWmgPU+Wv2kNEn0f9qf9nDxzKp/sW11LUdAu5v4YJry2xbFvQO6FMnuVHcUeOdAn8Zf8FA/hpPZKXg8HeEtRv8AUpFGVhN2/kQRsezNtkYDqQhPSvpHxB4c03xTpVzpmr2UGpadcrtltbmMOjjIIyD3BAIPUEAjBFU/CXgbQ/BFrPBounx2X2hxJcS5aSa4cAANJK5LyEAAAsxIAAHAoi+W3lf8Qkr389DeUcYopyjAooANg9KQRKOgoooGLsGaTyx6UUUAKEA7UhjU9R+tFFAChQvSnUUUAFN2CiigA2ijYKKKAE8sf/rNLsFFFAAFAPSloooAQrmjaKKKAF20mwUUUAGwUbQKKKAE8sfT6Gl2AUUUALtFAGKKKAFooooAQrmkCgUUUAG2goD2oooANopdtFFKwABik2iiimAFAaTyx9PocUUUAHlgdqXYM9KKKADaMUbAKKKADaKNgoooANgx/hQEAFFFAAEA7Uu2iigBNtG0UUUAJ5Y/yacFxRRQAbaKKKAE2igLg0UUAOooooA//9k=]]></base64></img><description><![CDATA[<p>
	一元n次多项式可用如下的表达式表示：
</p>
<p style="text-align:center;">
	<img src="http://tk.hustoj.com:80/attached/image/20140117/20140117144252_80279.jpg" alt="" />
</p>
<p style="text-align:left;">
	其中，a<sub>i</sub>x<sup>i</sup>称为i次项，a<sub>i</sub>称为i次项的系数。给出一个一元多项式各项的次数和系数，请按照如下规定的格式要求输出该多项式：
</p>
<p style="text-align:left;">
	1. 多项式中自变量为x，从左到右按照次数递减顺序给出多项式。
</p>
<p style="text-align:left;">
	2. 多项式中只包含系数不为0的项。
</p>
<p style="text-align:left;">
	3. 如果多项式n次项系数为正，则多项式开头不出现“+”号，如果多项式n次项系数为负，则多项式以“-”号开头。
</p>
<p style="text-align:left;">
	4. 对于不是最高次的项，以“+”号或者“-”号连接此项与前一项，分别表示此项系数为正或者系数为负。紧跟一个正整数，表示此项系数的绝对值（如果一个高于0次的项，其系数的绝对值为1，则无需输出1）。如果x 的指数大于1，则接下来紧跟的指数部分的形式为“x^b”，其中b为x的指数；如果x的指数为1，则接下来紧跟的指数部分形式为“x”；<span style="line-height:1.5;">如果x的指数为0，则仅需输出系数即可。</span>
</p>
<p style="text-align:left;">
	5. 多项式中，多项式的开头、结尾不含多余的空格。
</p>
<p style="text-align:left;">
	<br />
</p>]]></description>
<input><![CDATA[<p>
	每组输入数据共有2行。
</p>
<p>
	第一行1个整数n，表示一元多项式的次数。
</p>
<p>
	第二行有n+1个整数，其中第i个整数表示第n-i+1次项的系数，每两个整数之间用空格隔开。
</p>
<p>
	<br />
</p>
<p>
	数据规模：
</p>
<p>
	<p class="MsoNormal">
		<span>1</span>≤<span>n</span>≤<span> 100</span>，多项式各次项系数的绝对值均不超过<span>100</span>。
	</p>
	<p class="MsoNormal">
		<span style="line-height:1.5;"></span>
	</p>
</p>]]></input> 
<output><![CDATA[<p>
	每组输出共1行，按题目所述格式输出多项式。
</p>
<p>
	<br />
</p>]]></output>
<sample_input><![CDATA[5
100 -1 1 -3 0 10

3
-50 0 0 1]]></sample_input>
<sample_output><![CDATA[100x^5-x^4+x^3-3x^2+10

-50x^3+1]]></sample_output>
  <test_input><![CDATA[99
-1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 100 1 8
]]></test_input>
<test_output><![CDATA[-x^99-7x^50+100x^2+x+8
]]></test_output>
<test_input><![CDATA[30
-2 -2 4 2 3 -4 4 0 5 1 3 -5 -4 -1 1 2 -5 -5 5 0 -1 -5 5 1 -4 -4 2 4 -1 0 -5
]]></test_input>
<test_output><![CDATA[-2x^30-2x^29+4x^28+2x^27+3x^26-4x^25+4x^24+5x^22+x^21+3x^20-5x^19-4x^18-x^17+x^16+2x^15-5x^14-5x^13+5x^12-x^10-5x^9+5x^8+x^7-4x^6-4x^5+2x^4+4x^3-x^2-5
]]></test_output>
<test_input><![CDATA[20
2 -2 4 2 3 -4 4 0 5 1 3 -5 -4 -1 1 2 -5 -5 5 0 -1
]]></test_input>
<test_output><![CDATA[2x^20-2x^19+4x^18+2x^17+3x^16-4x^15+4x^14+5x^12+x^11+3x^10-5x^9-4x^8-x^7+x^6+2x^5-5x^4-5x^3+5x^2-1
]]></test_output>
<test_input><![CDATA[40
1 0 5 -2 -1 -5 4 -2 -4 1 -2 -5 4 2 -4 5 -4 -3 0 -4 -4 -1 -5 -3 3 1 5 1 5 2 4 2 0 2 -3 3 5 -2 3 -2 1
]]></test_input>
<test_output><![CDATA[x^40+5x^38-2x^37-x^36-5x^35+4x^34-2x^33-4x^32+x^31-2x^30-5x^29+4x^28+2x^27-4x^26+5x^25-4x^24-3x^23-4x^21-4x^20-x^19-5x^18-3x^17+3x^16+x^15+5x^14+x^13+5x^12+2x^11+4x^10+2x^9+2x^7-3x^6+3x^5+5x^4-2x^3+3x^2-2x+1
]]></test_output>
<test_input><![CDATA[3
-50 0 0 1
]]></test_input>
<test_output><![CDATA[-50x^3+1
]]></test_output>
<test_input><![CDATA[80
3 4 -5 1 5 -5 4 -5 -2 3 -1 -5 -4 -3 -4 -1 -2 -2 -2 0 3 -4 -4 2 4 -3 -2 -1 4 -3 0 4 0 -5 5 5 3 4 -2 2 4 -1 1 3 -3 -2 4 1 5 4 3 -5 -4 -5 3 2 -3 -1 -1 -3 3 2 -1 -5 3 -2 4 3 1 -2 0 -1 5 0 -1 0 -3 2 0 -2 -1
]]></test_input>
<test_output><![CDATA[3x^80+4x^79-5x^78+x^77+5x^76-5x^75+4x^74-5x^73-2x^72+3x^71-x^70-5x^69-4x^68-3x^67-4x^66-x^65-2x^64-2x^63-2x^62+3x^60-4x^59-4x^58+2x^57+4x^56-3x^55-2x^54-x^53+4x^52-3x^51+4x^49-5x^47+5x^46+5x^45+3x^44+4x^43-2x^42+2x^41+4x^40-x^39+x^38+3x^37-3x^36-2x^35+4x^34+x^33+5x^32+4x^31+3x^30-5x^29-4x^28-5x^27+3x^26+2x^25-3x^24-x^23-x^22-3x^21+3x^20+2x^19-x^18-5x^17+3x^16-2x^15+4x^14+3x^13+x^12-2x^11-x^9+5x^8-x^6-3x^4+2x^3-2x-1
]]></test_output>
<test_input><![CDATA[10
-5 -3 4 -5 -5 -4 5 1 5 0 -3
]]></test_input>
<test_output><![CDATA[-5x^10-3x^9+4x^8-5x^7-5x^6-4x^5+5x^4+x^3+5x^2-3
]]></test_output>
<test_input><![CDATA[99
-1 5 -4 -2 1 -5 3 4 -1 4 -5 -5 4 -1 3 2 -1 -2 3 -4 1 1 -5 -2 -1 2 1 -4 -1 -1 -2 -1 5 -3 4 1 2 2 2 -2 -1 3 -1 -2 0 5 -4 -3 -1 3 2 -5 -3 -3 -3 2 0 2 -3 1 5 0 2 -2 0 -3 -3 -3 -5 -4 -4 -3 3 1 1 2 2 -1 0 -5 -4 0 -3 -5 0 -2 -2 -2 4 -1 -1 2 -5 4 1 -5 2 1 4 -3
]]></test_input>
<test_output><![CDATA[-x^99+5x^98-4x^97-2x^96+x^95-5x^94+3x^93+4x^92-x^91+4x^90-5x^89-5x^88+4x^87-x^86+3x^85+2x^84-x^83-2x^82+3x^81-4x^80+x^79+x^78-5x^77-2x^76-x^75+2x^74+x^73-4x^72-x^71-x^70-2x^69-x^68+5x^67-3x^66+4x^65+x^64+2x^63+2x^62+2x^61-2x^60-x^59+3x^58-x^57-2x^56+5x^54-4x^53-3x^52-x^51+3x^50+2x^49-5x^48-3x^47-3x^46-3x^45+2x^44+2x^42-3x^41+x^40+5x^39+2x^37-2x^36-3x^34-3x^33-3x^32-5x^31-4x^30-4x^29-3x^28+3x^27+x^26+x^25+2x^24+2x^23-x^22-5x^20-4x^19-3x^17-5x^16-2x^14-2x^13-2x^12+4x^11-x^10-x^9+2x^8-5x^7+4x^6+x^5-5x^4+2x^3+x^2+4x-3
]]></test_output>
<test_input><![CDATA[3
1 -100 0 0
]]></test_input>
<test_output><![CDATA[x^3-100x^2
]]></test_output>
<test_input><![CDATA[50
4 2 -5 5 -3 -5 4 -4 -3 2 4 -5 1 4 2 -3 -3 -3 4 4 -5 3 -5 5 -2 4 -5 0 -1 5 2 -2 -5 4 -4 -1 4 -4 -5 -5 -3 -5 2 -3 -5 1 -1 4 -1 -5 3
]]></test_input>
<test_output><![CDATA[4x^50+2x^49-5x^48+5x^47-3x^46-5x^45+4x^44-4x^43-3x^42+2x^41+4x^40-5x^39+x^38+4x^37+2x^36-3x^35-3x^34-3x^33+4x^32+4x^31-5x^30+3x^29-5x^28+5x^27-2x^26+4x^25-5x^24-x^22+5x^21+2x^20-2x^19-5x^18+4x^17-4x^16-x^15+4x^14-4x^13-5x^12-5x^11-3x^10-5x^9+2x^8-3x^7-5x^6+x^5-x^4+4x^3-x^2-5x+3
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛普及组-2009年NOIP全国联赛普及组]]></source>
		<solution language="C"><![CDATA[#include <stdio.h>

typedef struct
{
	int x, y;
} bdd;

int main()
{
	int i, j, k, m, n;
	bdd r[1000];
	while (scanf("%d", &n) != EOF)
	{
		for (i = 0; i <= n; ++i)
		{
			scanf("%d", &r[i].x);
			r[i].y = n - i;
		}
		if (0 == n)
		{
			printf("%d\n", r[0].x);
		}
		else
		{
			if (r[0].x)
			{
				if (1 == r[0].x)
				{
					printf("x^%d", r[0].y);
				}
				else if (-1 == r[0].x)
				{
					printf("-x^%d", r[0].y);
				}
				else
				{
					printf("%dx^%d", r[0].x, r[0].y);
				}
			}
			for (i = 1; i < n; ++i)
			{
				if (r[i].x)
				{
					if (-1 == r[i].x)
					{
						printf("-x");
						if (1 != r[i].y)
						{
							printf("^%d", r[i].y);
						}
					}
					else if (1 == r[i].x)
					{
						printf("+x");
						if (1 != r[i].y)
						{
							printf("^%d", r[i].y);
						}
					}
					else
					{
						printf("%+dx", r[i].x);
						if (1 != r[i].y)
						{
							printf("^%d", r[i].y);
						}
					}
				}
			}
			if (r[n].x)
			{
				printf("%+d\n", r[n].x);	
			}
			else
			{
				putchar('\n');
			}
		}
	}
	return 0;
}]]></solution>
			<solution language="C++"><![CDATA[#include<iostream>
#include<string>
using namespace std;
int main()
{
	int n; string str="x^";
	while (cin>>n)
	{
		int first=1;
		while (n!=-1)
		{
			int a; cin>>a;
			if ( first && a )//1
			{
				if (a<0) { cout<<"-";a=-a; }
				if (a==1) cout<<str<<n;
				else cout<<a<<str<<n; 
				goto end;
			} 
			if ( n==1 && a)
			{
				if (a<0) { cout<<"-";a=-a; } else cout<<"+";
				if (a==1) cout<<"x";
				else cout<<a<<"x";goto end;
			}
			if ( n==0 && a)
			{
				if (a>0) cout<<"+"; cout<<a; goto end;
			}
			if (a)
			{
				if (a<0) { cout<<"-";a=-a; } else cout<<"+";
				if (a==1) cout<<str<<n;
				else cout<<a<<str<<n;
				goto end;
			}
			
		end:	first=0;n--;
		}
		cout<<endl;
	}
	return 0;
} ]]></solution>
			<solution language="Pascal"><![CDATA[var i,j,m,n,k,ans:longint;
begin
  readln(n);
  for i:=n downto 0 do
  begin
    read(k);
    if k=0 then continue ;
    if k<0 then write('-');
    if (k>0) and (i<>n) then write('+');
    if (k<>1) and (k<>-1) or (i=0) then write(abs(k));
    if i>1 then write('x^',i);
    if i=1 then write('x');
  end;
end.]]></solution>
			<solution language="Java"><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {
	public static void main(String args[]) throws Exception {
		// 输入范围
		Scanner scanner = new Scanner(System.in);
		String input = scanner.nextLine();
		Integer n = Integer.parseInt(input);

		input = scanner.nextLine();
		String[] array = input.split(" ");
		List<Integer> numList = new ArrayList<Integer>();
		for (int i = 0; i < array.length; i++) {
			numList.add(Integer.parseInt(array[i]));
		}

		String output = "";
		int head = 0;

		for (int i = 0; i < numList.size(); i++) {

			if (numList.get(i) <= -2) {
				output += String.valueOf(numList.get(i));
			} else if (numList.get(i) == -1) {
				if (n == 0) {
					output += "-1";
				} else {
					output += "-";
				}
			} else if (numList.get(i) == 0) {
				head++;
			} else if (numList.get(i) == 1) {
				if (n == 0) {
					if (i == head) {
						output += "1";
					} else {
						output += "+1";
					}
				} else {
					if (i != head) {
						output += "+";
					}
				}
			} else if (numList.get(i) > 1) {
				if (i != head) {
					output += "+";
				}
				output += numList.get(i);
			}

			if (numList.get(i) != 0) {
				if (n != 0) {
					output += "x";
				}
			}

			if (numList.get(i) != 0) {
				if (n > 1) {
					output += "^" + n;
				}
			}
			n--;
		}

		System.out.println(output);

	}
}
]]></solution>
	</item>
</fps>
