<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[奖学金]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[125]]></memory_limit>

<description><![CDATA[<p>
	某小学最近得到了一笔赞助，打算拿出其中一部分为学习成绩优秀的前5名学生发奖学金。期末，每个学生都有3门课的成绩:语文、数学、英语。先按总分从高到低排序，如果两个同学总分相同，再按语文成绩从高到低排序，如果两个同学总分和语文成绩都相同，那么规定学号小的同学 排在前面，这样，每个学生的排序是唯一确定的。<span style="line-height:1.5;">&nbsp;</span>
</p>
任务：先根据输入的3门课的成绩计算总分，然后按上述规则排序，最后按排名顺序输出前五名名学生的学号和总分。注意，在前5名同学中，每个人的奖学金都不相同，因此，你必须严格按上述规则排序。例如，在某个正确答案中，如果前两行的输出数据（每行输出两个数：学号、总分）是：&nbsp;<br />
<p>
	<span style="line-height:1.5;">7 279</span>
</p>
5 279&nbsp;<br />
<p>
	<span style="line-height:1.5;">这两行数据的含义是：总分最高的两个同学的学号依次是7号、5号。这两名同学的总分都是 279 （总分等于输入的语文、数学、英语三科成绩之和） ，但学号为7的学生语文成绩更高一些。如果你的前两名的输出数据是：</span>
</p>
<p>
	5 279&nbsp;
</p>
<p>
	7 279<span style="line-height:1.5;">&nbsp;</span>
</p>
<p>
	则按输出错误处理，不能得分。
</p>
<p>
	<br />
</p>]]></description>
<input><![CDATA[<p>
	每组输入数据包含n+1行：
</p>
<p>
	第1行为一个正整数n，表示该校参加评选的学生人数。
</p>
第2到n+1行，每行有3个用空格隔开的数字，每个数字都在0到100之间。第j行的3个数字依次表示学号为j-1的学生的语文、数学、英语的成绩。每个学生的学号按照输入顺序编号为1~n（恰好是输入数据的行号减1）。<br />
<p>
	<span style="line-height:1.5;">所给的数据都是正确的，不必检验。</span>
</p>
<p>
	<br />
</p>
<p>
	数据规模：
</p>
<p>
	50%的数据满足各学生的总成绩各不相同；
</p>
<p>
	100%的数据满足：6&lt;=n&lt;=300 。
</p>
<p>
	<br />
</p>]]></input> 
<output><![CDATA[<p>
	每组输出共有5行，每行是两个用空格隔开的正整数，依次表示前5名学生的学号和总分。
</p>
<p>
	<br />
</p>]]></output>
<sample_input><![CDATA[6
90 67 80
87 66 91
78 89 91
88 99 77
67 89 64
78 89 98

8
80 89 89
88 98 78
90 67 80
87 66 91
78 89 91
88 99 77
67 89 64
78 89 98]]></sample_input>
<sample_output><![CDATA[6 265
4 264
3 258
2 244
1 237

8 265
2 264
6 264
1 258
5 258]]></sample_output>
  <test_input><![CDATA[140
79 74 31
92 91 57
46 76 84
43 54 43
75 83 93
86 51 48
68 35 34
78 69 78
77 40 53
91 93 58
88 57 89
77 53 42
93 52 63
77 43 55
85 92 55
60 34 32
79 41 50
38 76 60
87 43 39
88 67 66
40 55 60
60 50 96
63 54 99
93 48 56
72 68 51
40 41 60
56 61 73
55 83 98
75 62 95
31 80 77
62 56 74
91 71 39
99 92 58
91 30 85
30 84 39
72 70 40
84 94 73
96 71 56
77 87 84
78 55 42
81 38 33
89 60 96
70 87 40
36 69 72
72 45 40
89 44 66
85 63 76
77 74 53
65 92 48
44 74 81
66 69 79
82 85 81
58 44 81
83 49 51
96 88 45
39 40 59
64 64 81
41 36 43
46 50 63
80 49 38
66 89 93
97 64 52
78 46 46
97 60 36
40 61 36
44 36 37
64 48 98
87 77 69
37 71 52
61 96 91
30 94 69
96 32 37
43 80 52
96 53 39
35 92 87
70 33 88
45 58 80
33 95 99
60 66 66
75 85 52
72 63 49
59 75 71
61 72 44
30 81 91
93 55 35
39 75 94
58 43 56
92 57 53
91 74 55
46 96 86
73 52 61
88 60 85
62 31 80
98 46 57
69 62 97
93 92 76
47 89 48
41 39 40
37 71 75
68 51 52
84 40 82
85 80 57
55 75 61
36 61 76
44 47 94
66 50 76
31 50 67
92 51 35
89 55 62
45 53 77
79 88 41
59 43 95
99 84 63
98 89 54
50 99 56
37 66 48
59 46 98
79 77 82
77 73 74
59 39 65
52 38 63
42 34 31
99 95 35
83 81 43
78 30 93
44 49 75
67 55 79
88 52 63
41 47 38
93 59 87
85 74 48
40 37 44
44 32 44
86 35 46
72 37 83
92 98 62
79 79 79
87 49 56
73 39 80
59 90 61
]]></test_input>
<test_output><![CDATA[96 261
136 252
37 251
5 251
33 249
]]></test_output>
<test_input><![CDATA[180
79 91 82
75 94 52
82 46 88
43 49 45
62 89 82
49 57 48
61 69 75
47 92 38
86 68 81
98 96 98
50 79 75
46 99 67
94 30 79
36 85 74
51 97 69
76 65 72
86 42 32
48 73 88
78 85 55
35 89 64
56 95 38
85 90 68
30 37 76
91 84 68
35 77 83
89 40 48
43 57 34
98 82 46
77 43 99
65 33 63
79 83 88
82 72 88
68 62 39
77 69 30
31 80 71
92 43 57
96 80 82
36 30 57
78 65 39
80 90 53
91 90 42
64 50 82
42 81 44
83 45 95
98 97 97
84 38 64
74 66 97
80 65 62
88 39 36
82 49 61
61 32 61
58 47 43
67 73 83
72 65 51
54 71 59
75 97 48
71 51 46
52 85 99
65 96 30
53 77 80
77 44 91
46 37 81
41 71 96
96 38 62
50 65 56
82 68 52
48 84 62
73 53 80
56 42 40
63 51 55
31 70 84
72 98 55
34 99 87
96 78 71
64 51 99
52 64 30
58 79 83
86 60 69
77 82 94
98 67 91
63 49 45
52 95 93
56 87 52
56 97 59
68 67 46
55 42 50
45 97 59
83 83 77
88 55 94
80 81 73
46 84 93
41 49 41
74 86 36
86 70 36
40 63 58
49 35 74
33 33 32
67 42 31
99 62 79
48 74 44
54 92 43
70 75 39
37 77 69
72 69 50
40 58 94
86 54 88
41 95 65
44 49 90
58 65 70
31 77 64
47 36 56
35 83 61
57 53 66
74 65 37
72 31 32
70 76 61
73 85 36
88 34 60
44 59 99
85 34 99
35 55 40
65 76 30
79 56 64
95 45 40
61 74 62
67 91 94
81 78 71
46 84 76
93 59 31
95 99 98
57 87 91
44 72 92
39 33 43
37 97 41
89 71 65
35 84 40
99 84 52
35 85 84
74 71 91
91 85 58
73 79 93
78 80 56
86 95 95
35 85 40
64 46 95
74 98 87
71 97 52
67 70 63
96 71 58
65 63 69
64 41 46
39 54 72
92 47 87
76 53 67
63 86 57
60 93 42
50 85 57
90 64 70
68 31 91
55 51 39
89 50 30
82 54 97
92 52 52
47 76 52
83 56 76
43 75 34
38 62 33
63 31 63
84 53 41
38 74 52
93 95 88
89 41 33
74 59 36
57 73 88
44 63 86
35 37 40
92 61 87
99 30 88
81 49 37
50 49 63

]]></test_input>
<test_output><![CDATA[10 292
45 292
130 292
171 276
143 276
]]></test_output>
<test_input><![CDATA[20
78 85 84
90 50 39
51 34 57
87 83 35
40 50 47
34 55 58
50 71 52
49 64 69
85 59 44
73 46 95
45 82 91
95 99 96
31 35 53
84 70 85
94 99 98
37 76 40
58 59 92
41 43 45
50 80 63
62 48 68
]]></test_input>
<test_output><![CDATA[15 291
12 290
1 247
14 239
11 218
]]></test_output>
<test_input><![CDATA[270
79 51 81
97 83 71
95 51 30
95 35 49
43 34 68
68 58 30
93 40 98
32 34 67
59 57 54
33 44 81
52 36 54
83 85 82
77 56 90
91 92 94
44 77 55
63 77 90
50 60 42
69 64 36
92 98 78
89 58 67
66 77 76
44 32 83
85 42 78
63 80 31
31 79 83
39 50 99
34 73 48
42 98 32
79 45 63
68 63 92
68 78 94
92 72 57
59 40 30
55 83 93
76 72 54
50 86 37
77 93 88
61 44 54
64 55 41
96 41 37
49 84 64
69 93 49
45 92 79
51 65 91
55 49 52
66 53 95
69 41 42
67 52 75
65 32 78
95 35 97
38 59 41
72 41 68
61 40 87
39 88 72
61 62 64
85 51 40
37 66 78
71 37 43
81 85 79
90 97 90
49 98 61
63 52 99
96 91 42
92 68 88
97 96 58
75 87 79
40 40 95
61 46 64
59 50 46
81 64 99
34 35 48
84 38 70
38 37 69
66 57 90
65 98 53
80 56 81
78 48 50
60 48 74
76 82 79
43 89 71
81 37 42
48 43 38
30 51 34
76 42 48
32 65 78
89 57 94
81 88 34
84 35 47
78 68 86
32 49 55
66 85 61
60 93 93
90 88 95
66 89 91
56 74 79
48 99 98
80 30 49
85 71 71
83 36 98
42 98 83
32 47 36
31 84 79
47 49 82
83 71 54
50 65 38
98 75 72
45 46 34
99 44 48
68 34 63
80 30 34
87 43 70
55 53 48
33 46 71
58 98 86
71 46 57
89 84 57
84 33 35
79 53 61
38 78 94
70 52 45
91 47 60
49 39 45
93 83 83
87 83 38
52 89 61
90 48 80
40 86 76
40 43 86
70 60 31
50 50 70
47 94 85
53 50 89
72 57 57
34 67 86
97 32 46
89 71 46
46 63 59
89 68 63
36 44 30
69 55 33
95 65 38
61 38 59
51 60 68
62 47 99
40 34 87
65 84 84
53 71 82
99 43 30
50 74 43
91 99 99
95 81 83
91 81 79
58 41 84
58 42 34
90 74 70
30 54 81
80 75 95
64 59 78
62 66 61
48 88 32
34 56 98
94 55 42
84 92 53
82 57 92
53 88 67
57 93 70
30 76 62
63 65 83
31 66 75
57 43 32
49 46 93
95 39 96
97 99 88
62 83 91
50 85 69
62 61 94
57 46 73
30 35 54
37 65 62
97 69 59
57 74 74
48 54 57
61 94 61
91 59 41
77 86 98
85 32 76
80 40 63
99 60 49
48 54 79
38 88 30
60 44 67
87 99 44
56 31 55
82 55 63
94 33 47
51 56 56
71 44 53
53 78 56
36 84 57
73 39 49
55 45 91
36 85 53
51 59 41
72 81 39
93 58 76
58 85 77
87 85 79
88 46 96
86 61 77
70 65 52
42 94 62
75 96 46
99 98 59
70 30 65
87 65 96
54 90 88
83 83 34
35 67 56
45 86 78
86 74 67
50 74 65
51 76 94
35 68 72
70 40 71
56 68 51
39 99 32
75 45 86
94 45 32
92 77 31
97 56 70
89 49 35
85 78 94
77 39 37
82 82 99
39 77 90
40 47 32
45 42 33
79 78 34
91 49 45
72 49 84
34 59 71
45 91 34
46 69 55
30 51 51
45 36 98
52 49 45
40 31 60
69 30 81
55 73 97
42 74 34
67 91 38
66 67 70
53 79 65
53 81 77
52 66 62
87 42 50
67 44 90
77 40 99
54 30 95
68 90 92
94 99 45
43 32 72
85 52 83
33 86 69
98 94 45
59 70 38
38 76 81
38 79 56
63 50 89
68 73 54
53 56 64
]]></test_input>
<test_output><![CDATA[150 289
173 284
14 277
60 277
93 273
]]></test_output>
<test_input><![CDATA[110
79 36 64
30 74 75
33 80 43
65 61 41
37 40 53
74 63 53
48 69 34
87 31 83
60 57 56
52 92 36
80 68 34
73 92 37
62 80 48
54 84 63
73 40 39
73 31 61
44 52 79
54 54 94
90 94 86
31 89 64
32 40 83
94 50 80
45 73 58
58 92 95
82 68 94
69 69 87
66 71 68
79 41 62
75 36 59
41 34 62
98 73 71
33 95 87
38 57 76
48 70 67
78 68 41
78 77 71
31 43 91
46 44 77
55 91 49
67 47 84
43 51 42
78 92 37
71 61 43
95 68 48
67 81 32
48 33 39
57 31 66
92 84 72
84 75 47
37 98 49
68 86 64
60 32 44
74 58 81
33 35 96
57 57 45
58 97 44
51 60 82
35 64 94
66 95 83
55 92 40
94 37 45
91 53 32
49 45 98
85 32 91
45 51 88
96 99 81
43 64 81
57 67 72
83 31 39
66 72 87
66 72 76
72 85 74
98 68 85
49 60 94
85 45 30
39 76 83
73 76 35
53 34 36
81 94 70
80 46 76
71 52 65
68 40 37
60 84 71
80 74 65
96 44 30
59 79 91
91 42 48
98 82 90
94 94 63
93 70 54
39 78 98
59 57 72
84 84 99
33 48 68
31 67 91
91 49 88
63 47 69
37 64 41
65 63 88
66 32 96
86 98 86
30 90 98
92 96 51
65 97 42
97 54 51
66 98 92
95 88 60
45 31 97
51 68 33
51 46 88
]]></test_input>
<test_output><![CDATA[66 276
88 270
19 270
101 270
93 267
]]></test_output>
<test_input><![CDATA[7
78 98 93
61 45 51
53 94 49
91 93 32
69 39 70
80 92 92
79 95 88
]]></test_input>
<test_output><![CDATA[1 269
6 264
7 262
4 216
3 196
]]></test_output>
<test_input><![CDATA[10
78 44 40
91 91 83
98 51 54
61 88 33
77 46 83
76 93 67
66 68 61
76 35 69
68 79 36
90 90 84
]]></test_input>
<test_output><![CDATA[2 265
10 264
6 236
5 206
3 203
]]></test_output>
<test_input><![CDATA[220
79 57 69
95 33 85
65 74 61
82 39 48
33 64 57
73 39 69
34 56 82
96 43 52
81 53 71
65 74 58
96 59 98
99 77 55
90 95 95
81 37 83
35 34 73
33 98 46
70 36 92
37 40 92
78 75 91
88 89 42
54 40 38
78 37 95
61 96 82
63 56 83
99 71 94
99 89 87
53 30 68
46 71 77
55 72 37
34 98 93
59 79 72
67 68 61
67 65 67
48 33 32
97 61 79
62 33 90
93 52 93
84 56 41
89 77 98
39 35 84
39 94 76
72 62 97
56 49 83
74 35 96
33 37 40
32 86 99
92 76 31
36 55 93
50 60 54
52 67 32
40 62 69
70 83 71
31 52 50
61 42 57
31 59 78
36 95 76
37 95 56
86 44 53
54 73 87
79 50 48
57 69 90
81 79 80
61 84 45
36 97 42
62 34 88
66 81 33
59 56 80
44 99 38
48 92 69
35 84 87
58 67 76
70 87 35
52 54 96
78 80 63
38 69 67
34 65 65
76 79 77
39 33 93
82 85 84
48 83 52
45 84 97
71 48 76
72 92 61
72 32 47
32 52 64
72 74 96
71 32 84
60 90 84
82 48 43
64 38 72
78 53 67
80 83 50
89 98 93
65 57 88
31 84 56
35 90 46
48 63 38
40 40 48
37 37 83
76 56 46
59 83 40
97 55 98
39 92 94
59 54 39
82 64 82
32 85 95
33 47 45
65 80 53
74 91 74
82 54 76
94 63 72
43 97 99
75 98 95
33 77 63
78 92 56
44 70 40
37 76 91
57 69 35
65 60 91
72 75 52
30 98 96
32 56 32
98 36 70
55 69 90
42 52 74
87 61 83
59 77 94
82 46 49
75 58 39
83 50 62
58 50 68
61 39 44
47 35 36
89 76 93
94 85 46
85 98 90
58 37 77
69 71 49
31 63 36
88 86 97
34 37 44
33 32 37
76 72 62
82 45 83
75 67 64
81 59 55
64 89 96
51 54 43
50 33 42
58 88 90
44 40 42
87 54 92
87 38 49
53 34 40
52 47 73
53 47 98
37 42 32
68 35 75
92 53 97
63 76 60
34 43 73
87 58 72
44 32 69
87 45 90
94 34 56
70 93 69
79 46 60
31 63 71
36 66 55
39 52 75
62 86 47
72 87 90
49 35 39
70 42 79
50 33 72
91 56 98
37 72 93
71 55 54
78 69 67
65 51 45
91 51 73
79 39 37
38 72 39
64 68 67
89 58 86
43 67 76
57 69 39
32 61 69
72 49 72
94 48 51
86 67 93
89 44 42
84 87 55
82 33 86
93 87 36
79 73 98
90 40 64
55 41 68
60 36 74
69 44 33
57 86 63
65 63 52
50 45 64
32 94 58
96 72 76
50 75 71
38 66 70
80 84 51
76 31 64
63 81 74
61 45 53
32 63 94
61 60 99
79 92 44
80 39 62
40 54 75
70 41 46
50 57 58
57 45 54
63 86 61
97 69 56
]]></test_input>
<test_output><![CDATA[13 280
93 280
26 275
136 273
140 271
]]></test_output>
<test_input><![CDATA[30
78 51 71
41 59 72
34 62 31
56 74 37
81 96 92
58 37 80
94 58 59
98 84 84
80 44 34
44 35 97
95 96 94
76 41 86
88 42 57
84 89 84
75 43 98
31 48 61
95 96 93
72 46 47
61 85 49
81 69 42
71 56 88
97 77 93
87 92 92
38 85 55
56 53 46
52 89 33
48 38 82
69 60 31
93 96 92
85 36 99
]]></test_input>
<test_output><![CDATA[11 285
17 284
29 281
23 271
5 269
]]></test_output>
<test_input><![CDATA[40
79 68 96
38 58 92
90 83 71
87 68 39
70 66 82
62 75 58
98 33 33
96 65 89
42 73 59
82 91 85
73 80 50
70 60 32
31 38 33
30 55 71
61 59 93
85 97 91
78 63 39
71 33 59
93 64 43
45 41 62
93 95 36
57 49 63
96 93 86
92 66 65
91 68 66
98 97 44
76 81 62
34 68 97
75 80 93
50 58 47
65 90 67
46 50 64
46 91 94
76 40 49
55 52 43
84 84 33
48 62 39
66 86 97
33 96 83
56 39 56
]]></test_input>
<test_output><![CDATA[23 275
16 273
10 258
8 250
38 249
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛普及组-2007年NOIP全国联赛普及组]]></source>
		<solution language="C++"><![CDATA[#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cstdlib>
#include<cmath>
#include<algorithm>
using namespace std;
struct student{
    int a,b,c;
    int num,ans;
};
student s[101];
bool comp(student x,student y){
    if(x.ans!=y.ans) return x.ans>y.ans;
    if(x.a!=y.a) return x.a>y.a;
    return x.num<y.num;
}
int main(){
    int i,n;
    scanf("%d",&n);
    for(i=1;i<=n;i++){
        scanf("%d%d%d",&s[i].a,&s[i].b,&s[i].c);
        s[i].ans=s[i].a+s[i].b+s[i].c;
        s[i].num=i;
    }
    sort(s+1,s+1+n,comp);
    for(i=1;i<6;i++)
        printf("%d %d\n",s[i].num,s[i].ans);
    return 0;
}]]></solution>
			<solution language="Pascal"><![CDATA[var x,a,d:array[0..300]of longint;n,i,j,b,c,t:longint; 
begin
 read(n); 
 for i:=1 to n do
  begin
   read(a[i],b,c); 
   x[i]:=a[i]+b+c; 
   d[i]:=i; 
  end; 
 for i:=1 to n-1 do
  for j:=i+1 to n do
   if (x[i]<x[j])or(x[i]=x[j])and(a[i]<a[j]) 
      or(x[i]=x[j])and(a[i]=a[j])and(d[i]>d[j])then
       begin
        t:=a[i];a[i]:=a[j];a[j]:=t; 
        t:=x[i];x[i]:=x[j];x[j]:=t; 
        t:=d[i];d[i]:=d[j];d[j]:=t; 
       end; 
 for i:=1 to 5 do writeln(d[i],' ',x[i]); 
end.]]></solution>
	</item>
</fps>
