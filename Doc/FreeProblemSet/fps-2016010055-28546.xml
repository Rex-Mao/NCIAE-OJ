<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[ [ZJOI2008]瞭望塔]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<img><src><![CDATA[http://tk.hustoj.com:80/admin/../upload/pimg28546_1.png]]></src><base64><![CDATA[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]]></base64></img><description><![CDATA[<p>
	致力于建设全国示范和谐小村庄的H村村长dadzhi，决定在村中建立一个瞭望塔，以此加强村中的治安。
</p>
<p>
	我们将H村抽象为一维的轮廓。如下图所示
</p>
<p>
	<img src="http://tk.hustoj.com:80/admin/../upload/pimg28546_1.png" alt="" /> 
</p>
<p>
	<img src="http://naive.hustoj.com:80/admin/../https://www.luogu.org/problemnew/show/https://cdn.luogu.org/upload/pic/1710.png" alt="" /> 
</p>
<p>
	我们可以用一条山的上方轮廓折线(x1, y1), (x2, y2), …. (xn, yn)来描述H村的形状，这里x1 &lt; x2 &lt; …&lt; xn。瞭望塔可以建造在[x1, xn]间的任意位置, 但必须满足从瞭望塔的顶端可以看到H村的任意位置。可见在不同的位置建造瞭望塔，所需要建造的高度是不同的。为了节省开支，dadzhi村长希望建造的塔高度尽可能小。
</p>
<p>
	请你写一个程序，帮助dadzhi村长计算塔的最小高度。
</p>
<h2>
	输入输出格式
</h2>
<strong>输入格式：</strong><br />
<p>
	<br />
</p>
<p>
	输入文件tower.in第一行包含一个整数n，表示轮廓折线的节点数目。接下来第一行n个整数, 为x1 ~ xn. 第三行n个整数，为y1 ~ yn。
</p>
<p>
	<br />
</p>
<strong>输出格式：</strong><br />
<p>
	<br />
</p>
<p>
	输出文件tower.out仅包含一个实数，为塔的最小高度，精确到小数点后三位。
</p>
<p>
	<br />
</p>
<h2>
	输入输出样例
</h2>
<div class="am-g">
	<div class="am-u-md-6 copy-region">
		<strong>输入样例#1：</strong> <a class="am-badge am-radius lg-bg-orange sample-copy">复制</a> 
<pre>6
1 2 4 5 6 7
1 2 2 4 2 1
</pre>
	</div>
	<div class="am-u-md-6 copy-region">
		<strong>输出样例#1：</strong> <a class="am-badge am-radius lg-bg-orange sample-copy">复制</a> 
<pre>1.000</pre>
	</div>
</div>
<h2>
	说明
</h2>
<p>
	对于60%的数据， N ≤ 60；
</p>
<p>
	对于100%的数据， N ≤ 300，输入坐标绝对值不超过106，注意考虑实数误差带来的问题。
</p>
<div class="lg-article-sub am-g" id="sub">
</div>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[]]></sample_output>
  <test_input><![CDATA[102
122 179 512 622 639 829 1137 1377 1735 1896 2152 2446 2552 2893 2978 3113 3308 3399 3447 3651 3901 4106 4234 4588 4864 4915 4982 5262 5514 5852 6008 6269 6546 6627 6664 6891 7111 7316 7365 7490 7521 7656 7781 7873 7924 8038 8235 8525 8565 8717 8836 8872 9106 9353 9413 9624 9906 10220 10257 10467 10485 10786 10946 11058 11429 11451 11780 12085 12289 12572 12855 13190 13331 13367 13406 13617 13752 13788 14087 14377 14718 14980 15120 15329 15569 15769 16101 16158 16401 16445 16785 16828 17015 17187 17212 17574 17709 17913 18041 18066 18162 18481
19773 27832 30368 24020 8099 8543 32350 22973 26046 18387 11772 14904 28044 20195 28312 25400 27979 11692 19826 5459 10822 16151 31064 17768 495 30371 13409 6021 2350 21093 3550 264 13817 11853 30862 22020 18213 23722 4369 17894 24187 10224 10399 2904 271 8633 26618 21349 29133 25355 7841 8158 6741 8665 4679 10493 30217 16332 25219 585 13155 13891 21705 1721 32653 920 7321 20508 12331 32165 29686 15800 16251 11654 6170 20018 20129 6305 32360 20654 8764 6884 21922 12598 19773 13902 10076 25696 32249 31665 11697 13867 8573 28854 12596 43 20769 5921 809 2790 15968 31062
]]></test_input>
<test_output><![CDATA[3784013.664
]]></test_output>
<test_input><![CDATA[4
0 3 7 13
4 17 23 3
]]></test_input>
<test_output><![CDATA[7.145
]]></test_output>
<test_input><![CDATA[57
161 522 858 908 1224 1370 1615 1831 2184 2249 2316 2408 2673 2830 2861 3168 3445 3566 3925 4149 4240 4417 4453 4761 4914 4935 5005 5351 5596 5700 5802 5889 6197 6366 6736 6887 7050 7372 7678 7879 8223 8304 8480 8841 9163 9369 9621 9636 9790 9826 10023 10259 10505 10531 10789 10805 10890
13287 22132 1073 10489 9749 19477 8971 8312 18868 12331 16950 14320 7840 28843 3874 16674 24932 651 27459 5827 17592 17711 4535 15239 25672 14884 16425 28544 21687 25872 26357 12198 29924 26601 9357 21431 25708 12134 4123 15937 17264 17331 5992 21244 8088 4457 29692 10078 12887 16061 31623 8554 21617 24824 20351 30921 19131
]]></test_input>
<test_output><![CDATA[1438777.004
]]></test_output>
<test_input><![CDATA[120
274 289 535 654 663 859 1148 1493 1574 1654 1784 2130 2262 2484 2504 2569 2917 3023 3342 3469 3511 3787 3814 4017 4245 4518 4552 4663 4876 5010 5269 5336 5544 5821 5939 5952 6211 6370 6483 6644 6898 7267 7616 7922 8277 8592 8719 8775 9141 9358 9454 9459 9488 9509 9726 9900 9922 10133 10207 10561 10672 10819 10884 10978 11213 11226 11565 11636 11703 11908 12135 12486 12525 12770 12989 13289 13523 13881 14068 14356 14561 14761 14912 15010 15176 15426 15783 16033 16043 16225 16522 16863 17015 17216 17287 17604 17955 17963 18290 18404 18524 18800 19138 19239 19544 19910 19931 20291 20574 20757 21116 21302 21319 21563 21874 22210 22294 22522 22637 22752
1025 19726 17048 16982 27326 24724 16408 29670 24856 16545 10715 7960 4946 18110 6238 19266 14587 9105 13244 4581 4126 15687 10367 4145 6330 19765 24246 4555 9329 190 10056 22733 3716 8567 21383 9999 12287 2185 27400 27813 25649 24919 29619 16296 12639 32609 22 314 27066 19304 30718 21444 22669 3028 20297 18050 20411 3154 7926 23106 10601 26817 21630 17256 4600 32591 27495 3382 11830 19935 25878 586 29141 16047 29413 32360 14876 10295 1653 3450 220 1108 15430 31701 15270 8869 21636 15294 15163 23093 11812 17453 8004 32347 30768 19665 12867 6879 3423 2899 16842 15198 11753 21983 18155 16880 2969 20193 29423 4359 23588 32268 29770 3227 26041 31393 1999 13956 14809 2798
]]></test_input>
<test_output><![CDATA[8480328.389
]]></test_output>
<test_input><![CDATA[11
0 1 2 3 4 5 6 7 8 9 10
45 12 65 23 87 12 87 12 65 1 400
]]></test_input>
<test_output><![CDATA[89.000
]]></test_output>
<test_input><![CDATA[299

3016 1565 16587 15342 4210 10953 5896 22447 8191 6388 9821 2939 4487 1759 22862 12235 21352 517 15809 14341 29766 25609 30234 28424 15696 5102 17828 25093 16837 26502 15411 28050 1975 14637 17671 8441 11792 1463 7412 27606 13266 9894 29632 18913 17571 31904 15565 24840 11912 7713 29431 17857 25841 24174 21440 22942 13558 16586 21931 30753 3808 11243 24037 26067 2283 29103 31018 13712 32586 32524 7143 6181 30060 18501 11676 18973 7294 17764 25477 5079 9009 4836 11897 4060 12989 2734 16402 11120 15654 26951 27406 5479 189 21319 25333 3898 25835 20237 7932 21594 5162 1713 25642 3012 30548 26170 15033 30678 30240 27153 21183 22625 8425 12726 7182 13055 10162 10930 5464 30119 17000 26573 5783 10110 28262 30848 6827 7152 9535 21677 19525 23552 28855 12430 23045 14812 18 19692 21983 17077 8850 6033 9155 717 19259 12287 15229 20434 473 9314 16858 3434 25924 31428 15628 8207 8931 23168 26703 541 1903 27129 27341 12073 3321 13451 30143 22933 2607 11458 3542 7777 26331 7882 985 11076 31148 10023 24719 2812 29497 422 18399 3042 31299 17556 5942 29889 23866 23597 17193 31720 32003 23127 14428 13438 21753 28305 17314 26134 17458 6694 17765 643 31747 29862 13385 11758 14278 5270 13068 3366 8666 28775 15793 20022 2540 19365 12765 7997 20597 1137 13953 1914 11140 21809 18105 22183 10430 24198 25588 7816 4259 3455 13142 27331 3859 12812 2650 10994 17680 22965 11964 759 10181 17035 19862 30095 20679 31327 28105 7467 9116 32307 24990 26363 27770 28142 31661 1099 23632 10324 2814 1554 1547 25396 25199 22216 16658 5091 28501 1657 5394 15338 9062 7448 4865 28156 13783 26389 16221 7979 32705 28721 29109 6235 30665 8338 19819 7158 4352 12306 14264 5089 264 25565 28400 23471 12665
]]></test_input>
<test_output><![CDATA[25392077.271
]]></test_output>
<test_input><![CDATA[30
53462 72143 73280 206419 227903 304744 310640 345509 564677 602191 604699 644919 646211 678375 738962 739889 740176 763596 782787 789069 809966 810281 820616 827736 865880 903750 913911 938476 953989 996103
56742 45411 48099 59027 52809 55276 45570 45336 56077 56573 61862 60429 62267 56984 51458 46242 47061 58357 44664 47655 57045 50224 59243 49600 56922 61954 56038 50345 58852 48352
]]></test_input>
<test_output><![CDATA[1567601.219
]]></test_output>
<test_input><![CDATA[220
27 120 382 468 669 707 881 930 992 1253 1406 1584 1869 2236 2417 2734 2796 2808 2944 2995 3228 3448 3492 3726 4028 4259 4393 4585 4919 5050 5202 5314 5530 5667 5716 5987 6200 6396 6554 6671 7034 7166 7300 7465 7509 7821 7869 8096 8329 8496 8503 8572 8675 9028 9209 9471 9597 9602 9876 10213 10281 10581 10869 10968 11044 11383 11711 11832 11859 12088 12144 12283 12440 12682 12699 13035 13248 13574 13816 13993 14075 14373 14447 14807 14886 15171 15253 15389 15660 15882 16103 16387 16515 16755 16800 16893 17113 17244 17366 17614 17919 18096 18230 18295 18543 18868 19122 19348 19707 19982 20050 20095 20351 20710 20981 21132 21390 21511 21736 21800 22065 22393 22681 23040 23249 23562 23674 23966 24183 24414 24576 24939 25034 25102 25313 25543 25801 25969 26245 26325 26364 26508 26744 26960 27059 27280 27534 27658 27661 27732 27860 28011 28098 28422 28569 28912 29276 29640 29858 30024 30214 30388 30661 30791 30852 31029 31164 31179 31310 31539 31656 31744 32050 32073 32317 32438 32709 32771 33055 33228 33394 33728 34070 34095 34353 34361 34662 34887 35174 35412 35664 35740 36071 36219 36363 36646 36652 36664 36822 36982 37108 37125 37146 37434 37793 38163 38287 38594 38844 39070 39280 39295 39659 39888 40226 40419 40437 40656 40783 40862
23790 10400 21784 4728 32179 20194 27620 18338 11976 4642 17889 22706 32705 28409 11094 29347 6206 8916 1803 11246 28771 21147 603 79 28040 1169 10123 14795 14129 29052 32346 27378 22592 28933 22233 24162 105 1377 13949 8076 31207 18993 7027 187 10093 19111 2611 16978 7776 747 6488 16212 12611 4285 28591 17194 32371 22363 26766 27809 22292 6821 21095 16947 4683 21887 31644 23431 8365 20343 405 17467 29688 13736 5649 31712 3841 15069 11961 14150 20974 762 21243 18170 22181 23960 31765 18190 29061 5104 15216 31768 10835 19962 6960 381 16759 21206 27913 11504 5480 10346 31572 19253 31845 22093 20578 6699 26214 20451 2064 9225 23378 18890 24475 24552 10610 32373 30646 15234 22566 9751 31962 29241 13014 9667 10718 21851 44 14801 22727 27044 14720 8067 5601 32260 22164 489 26895 8099 386 11777 18783 3875 18162 21027 28385 6949 5776 19612 30394 1038 10174 19866 3444 19723 5765 20552 5016 7762 19666 12089 28799 7339 3039 22538 1893 23087 10735 25155 703 17488 22590 3455 27086 13082 1336 27341 13429 32185 12009 13653 20808 14394 14773 7743 20965 32406 8009 4048 12679 28908 2513 11222 27096 17678 12139 2375 18951 4415 476 29989 17435 13371 1667 15012 9351 32376 27275 13967 26622 172 10084 14824 9096 9103 19315 32719 13014 27874
]]></test_input>
<test_output><![CDATA[17225739.169
]]></test_output>
<test_input><![CDATA[4
0 1 99999 100000
0 100000 100000 0
]]></test_input>
<test_output><![CDATA[4999900000.000
]]></test_output>
<test_input><![CDATA[3
2134 45674 76543
3425 65342 532
]]></test_input>
<test_output><![CDATA[0.000
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[ZJOI2008 省选 高级]]></source>
		<solution language="C++"><![CDATA[#include<cstdio>
#include<iostream>
#include<cstring>
#include<cmath>
#include<cstdlib>
#define d double
#define ld long double
using namespace std;
const int maxn=323;
const d eps=1e-7;
struct poi{
    int x,y;
}a[maxn];
d ansx,ansaddy,nowx,nowy;int posl,posr;
int i,j,k,n,m;

int ra,fh;char rx;
inline int read(){
    rx=getchar(),ra=0,fh=1;
    while((rx<'0'||rx>'9')&&rx!='-')rx=getchar();
    if(rx=='-')fh=-1,rx=getchar();
    while(rx>='0'&&rx<='9')ra*=10,ra+=rx-48,rx=getchar();return ra*fh;
}

inline d randlf(){
    return rand()%10000/10000.0;
}
bool judge(){
    int i;
    for(i=1;i<posl;i++)if((nowy-a[i].y)*(nowx-a[i+1].x)>(nowy-a[i+1].y)*(nowx-a[i].x))
        return 0;
    for(i=posr;i<n;i++)if((a[i].y-nowy)*(a[i+1].x-nowx)>(a[i+1].y-nowy)*(a[i].x-nowx))
        return 0;
    return 1;
}
inline d geth(){
    int L=1,R=n,MID;ld sy,l,r,mid;
    while(L<R)
        if(a[(MID=(L+R+1)>>1)].x<=nowx)L=MID;else R=MID-1;
    posl=L,posr=L+1;
    if(a[L].x==nowx)posl--,sy=a[L].y;else sy=a[posl].y+(a[posr].y-a[posl].y)*(nowx-a[posl].x)/(a[posr].x-a[posl].x);
    l=0,r=1e11;//printf("geth:  x:%.8lf   l r:%d %d   sy:%.3lf\n",nowx,a[posl].x,a[posr].x,sy);
    while(l+1e-7<r){
        mid=(l+r)/2;nowy=sy+mid;
        if(judge())r=mid;//,printf("success:  %.2lf %.2lf   %.9lf\n",nowx,(d)sy,(d)mid);
        else l=mid;//,printf("failed:  %.2lf %.2lf   %.9lf  %.9lf %.9lf\n",nowx,(d)sy,(d)mid,(d)l,(d)r);
    }
    if(l<ansaddy)ansaddy=l,ansx=nowx;
    return l;
}//<n*64
inline void SA(){
    d T=a[n].x-a[1].x,prex,tmpaddy,nowaddy;
    nowx=ansx=(a[n].x+a[1].x)/2.0;nowaddy=geth();//printf("   %.2lf\n",nowx);
    while(T>1e-5){
        T*=0.99;//printf("!  %d\n",fabs(nowaddy-geth())<=eps);
        prex=nowx,nowx+=T*(randlf()*2-1);
    //    printf("try:%.3lf\n",nowx);
        if(nowx<a[1].x||nowx>a[n].x){nowx=prex;T/=0.991;continue;}
        tmpaddy=geth();
        
        if(tmpaddy>nowaddy&&exp((nowaddy-tmpaddy)/T)<randlf())
            nowx=prex;
        else nowaddy=tmpaddy;
    }
    for(int i=1;i<=1023;i++){
        nowx=ansx+T*(randlf()*2-1);//printf("try1:%.3lf\n",nowx);
        if(nowx<a[1].x||nowx>a[n].x)continue;
        geth();
    }
}
int main(){
    n=read();srand(233);
//    srand(19980406);
    for(i=1;i<=n;i++)a[i].x=read();
    for(i=1;i<=n;i++)a[i].y=read();ansaddy=1e11;
    SA();
    printf("%.3lf\n",ansaddy+eps);//printf("ansx:  %.3lf\n",ansx);
    return 0;
}]]></solution>
	<spj language="C"><![CDATA[#include<stdio.h>
#include<math.h>
int main(int argc,char ** argv){
    FILE *fo=fopen(argv[2],"r");
    FILE *fu=fopen(argv[3],"r");
//    FILE *fd=fopen("diff.out","w");
    double o,u;
    while(fscanf(fo,"%lf",&o)!=EOF){
	if(EOF!=fscanf(fu,"%lf",&u)){
	   if(fabs(u-o)>1e-2){
	//	fprintf(fd,"%s\nout:%lf your:%lf\n",argv[1],o,u);		
	//	fclose(fd);
		return 1;
	   }
	}else{
		return 1;
	}

    }
    return 0;
}
]]></spj></item>
</fps>
