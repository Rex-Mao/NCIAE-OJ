<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[过河]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[125]]></memory_limit>

<description><![CDATA[<p>
	在河上有一座独木桥，一只青蛙想沿着独木桥从河的一侧跳到另一侧。在桥上有一些石子，青蛙很讨厌踩在这些石子上。由于桥的长度和青蛙一次跳过的距离都是正整数，我们可以把独木桥上青蛙可能到达的点看成数轴上的一串整点：0，1，...，L（其中L是桥的长度）。坐标为0的点表示桥的起点，坐标为L的点表示桥的终点。青蛙从桥的起点开始，不停的向终点方向跳跃。一次跳跃的距离是S到T之间的任意正整数（包括S,T）。当青蛙跳到或跳过坐标为L的点时，就算青蛙已经跳出了独木桥。
</p>
<p>
	题目给出独木桥的长度L，青蛙跳跃的距离范围S、T，桥上石子的位置。你的任务是确定青蛙要想过河，最少需要踩到的石子数。
</p>
<p>
	<br />
</p>]]></description>
<input><![CDATA[<p>
	每组输入的第一行有一个正整数L（1&lt;=L&lt;=109），表示独木桥的长度。第二行有三个正整数S，T，M，分别表示青蛙一次跳跃的最小距离，最大距离，及桥上石子的个数，其中1&lt;=S&lt;=T&lt;=10，1&lt;=M&lt;=100。第三行有M个不同的正整数分别表示这M个石子在数轴上的位置（数据保证桥的起点和终点处没有石子）。所有相邻的整数之间用一个空格隔开。
</p>
<p>
	<span style="line-height:1.5;"><br />
</span> 
</p>
<p>
	<span style="line-height:1.5;">数据规模：</span> 
</p>
<p>
	对于30%的数据，L&lt;=10000；
</p>
<p>
	对于全部的数据，L&lt;=109。
</p>
<p>
	<br />
</p>]]></input> 
<output><![CDATA[<p>
	每组输出只包括一个整数，表示青蛙过河最少需要踩到的石子数。
</p>
<p>
	<br />
</p>]]></output>
<sample_input><![CDATA[10
2 3 5
2 3 5 6 7]]></sample_input>
<sample_output><![CDATA[2]]></sample_output>
  <test_input><![CDATA[10000
1 5 100
4061 4062 4066 4065 4068 6356 4070 6832 4063 3688 4268 3854 4060 1530 3949 4064 1299 3377 2435 4069 2985 2978 2983 2986 2979 3235 2987 2751 3031 2981 4794 8545 3946 2988 6706 3718 9091 5657 5362 7000 4714 4713 7637 4718 4719 8677 4709 4710 8951 4711 6599 4717 4712 7558 940 7679 5401 4715 4716 9153 1018 1020 1016 1025 1024 1015 1019 7198 9163 1021 7944 1017 2594 1023 6139 2503 1022 2919 6712 1486 3740 3732 3733 2959 3731 3730 3736 2287 3737 1276 8941 3146 3735 6697 2884 9576 9134 9754 3734 3739
]]></test_input>
<test_output><![CDATA[6
]]></test_output>
<test_input><![CDATA[10000
9 10 100
8888 8869 8872 2548 8875 8887 8881 8877 8876 6410 8883 7480 5887 5221 2416 5665 8878 1343 1718 8884 8910 8908 8776 8907 8905 8903 8899 8902 577 9347 9387 8906 4685 8893 8891 9849 5767 8892 2071 8890 1502 1483 1500 1492 1496 1501 1489 5917 1486 1498 9364 5195 8715 1497 5639 5699 3602 1618 9208 9780 1490 1479 1480 1472 1484 2872 1475 1473 7318 565 6137 555 9377 8026 1482 1487 8695 1476 7813 6271 6260 6261 6259 6241 6253 6248 6244 6254 936 6258 6250 6245 4746 2531 6017 6255 6686 508 5697 9613
]]></test_input>
<test_output><![CDATA[2
]]></test_output>
<test_input><![CDATA[10000
7 7 100
1111 1118 1114 1117 3010 7508 1119 1105 899 1112 9667 3238 1108 5178 4627 2116 2089 9184 1115 8887 3565 3560 3559 3562 2410 3564 3571 565 3561 3566 3573 7432 9485 4484 7258 4555 8812 1291 3567 3221 5252 5253 5244 797 5251 7885 5245 9340 5255 6537 7737 5243 9316 5246 6694 6773 5247 6031 5256 5249 5484 5482 7513 5485 5479 5481 5480 5489 381 2572 9255 7624 5821 8606 7829 5488 442 5490 5492 8098 483 482 481 478 469 474 4054 472 471 4407 479 7006 475 470 3147 6933 9097 7781 473 2221
]]></test_input>
<test_output><![CDATA[10
]]></test_output>
<test_input><![CDATA[1000000000
3 4 100
194253472 194253476 194253479 311701501 556872207 14927650 968889621 194253477 194253480 194253475 91134194 218484377 281965281 40187586 739934785 262376631 874914691 26932501 36410480 31809451 150826127 150826130 150826122 150826129 353234007 150826125 297734698 698222561 150702229 12024661 9018376 111853422 787993195 303205992 150826123 240875251 150826128 93505537 392766193 276111100 925758768 925758771 925758770 925758765 581984833 27682257 925758773 289946455 925758769 33150001 72944236 925758767 849958123 69048401 278416585 50140238 318979576 202517511 510099001 925758766 415617408 415617405 415617407 415617401 59549281 415617406 234408889 415617403 415617402 500339654 21185699 10062911 415617409 143479009 184168741 415617404 328136945 158638748 277668121 16890898 846893282 846893285 341678833 846893284 846893281 385765966 1483126 846893287 846893283 215645947 471651 112881781 171070081 485932771 846893286 295207254 846893288 91758151 559990145 210141661
]]></test_input>
<test_output><![CDATA[6
]]></test_output>
<test_input><![CDATA[1000000000
1 4 100
208917736 208917733 342702175 53219456 208917741 208917737 208917738 143016145 183226951 225809641 632389141 99660988 208917735 208917739 145074829 208917734 71302141 208917740 888671824 110565001 99468748 99468751 99468756 99468750 99468754 282449329 71259362 187499521 227739556 99468752 3694969 170951023 389082541 34492533 211139759 223504088 99468755 71924403 94599025 7894840 90047641 90047642 90047646 5562143 437697781 90047644 3776207 8629881 90047649 451844437 491577398 90047643 861867938 228425563 435345679 45460186 90047645 90047647 384986573 549380836 340920113 340920119 340920117 340920112 283045625 340920115 340920118 95526133 355238494 356030951 150187411 391371085 340920114 12504922 4535551 40127849 119061502 77660686 47209046 226699696 121891180 121891183 121891179 121891182 121891184 121891177 251337442 282931426 361836991 48778815 271396933 3797761 204700651 1114673 452541451 112420571 67994753 121891181 11278894 141150181
]]></test_input>
<test_output><![CDATA[5
]]></test_output>
<test_input><![CDATA[1000000000
3 5 100
119108517 119108519 119108521 119108522 119108518 119108523 7330813 119108516 40394400 810630073 119108520 435150209 983795707 119108525 460758185 119108515 119108524 147449005 47314756 523250218 3568016 3568024 3568015 3568021 3568022 3568019 901731521 3568018 247224133 515587801 486569601 3568020 282184681 3568014 32381269 570868866 9443323 316334901 167588029 668949776 255861625 255861622 255861616 255861618 255861626 325035031 180570826 255861620 493822129 107249842 406586290 550560625 372291841 141001441 38515915 13424840 124348477 23263221 623632470 290897883 43168086 43168091 62985755 43168082 43168089 43168090 43168081 187576501 168613305 39023161 43168087 43168084 43168085 456898234 10790741 510130324 3471859 422267 592211029 134135152 25657881 25657886 25657887 25657889 25657891 25657882 182313098 364732829 45163681 437572144 258360505 25657888 64966903 225658384 25657884 301058545 27893449 596266273 39505741 89161801
]]></test_input>
<test_output><![CDATA[3
]]></test_output>
<test_input><![CDATA[1000000000
4 6 100

]]></test_input>
<test_output><![CDATA[3
]]></test_output>
<test_input><![CDATA[1000000000
3 3 100
13520773 56094979 13520774 227976321 265496617 442376089 75633637 755273022 13520776 118969221 13520775 223470050 13520779 309230626 13520778 227821627 323384010 464493511 13006833 38464786 22468188 22468189 22468184 40726315 22468185 46533247 362046553 22468186 186797905 22468183 83900881 22468187 238372675 36963460 120782179 164780764 96336028 93071798 235996153 289499761 80849268 80849264 80849265 80849267 80849266 360646416 404779932 102138401 452830357 861912985 101219980 80849263 201729701 428246578 285733009 158489031 80849269 61746153 149475946 62126761 322939304 322939305 322939309 86362289 322939303 86982281 43487096 322939308 2016334 231956257 322939306 831473893 507077633 488620131 441998539 5091269 4230631 166445335 856091641 20602497 379166901 379166904 379166905 350006398 538645865 379166906 230693193 77311297 15299369 379166907 136615430 379166903 310980450 325796383 545034951 379166902 549046187 287315857 153214531 440026249
]]></test_input>
<test_output><![CDATA[25
]]></test_output>
<test_input><![CDATA[1000000000
1 2 100
179783935 179783937 179783936 24405235 25782563 179783938 181037301 464200929 179783939 406978601 57637009 481706849 246165923 65295297 119091241 232603141 655989983 347207941 24870801 305959739 179430294 179430297 179430293 364608283 467460001 83169256 898162903 179430296 328716741 40416706 416332671 179430295 124924146 87586851 448313416 269661865 601712110 514098256 70215652 129118826 166731882 166731885 166731883 166731884 648167185 275119909 166731881 133715098 266349913 840913433 149098351 159605473 293995141 13321451 268020833 980490938 35222293 454277291 80137981 288284664 624108797 624108794 584888963 624108798 74310643 562138466 4785193 624108795 830441 522467853 242868565 624108796 7676314 123588121 47412781 46102966 544369588 770964607 195155445 860620308 347339763 347339764 686665839 347339761 17129113 547666537 347339765 664013000 183266113 347339762 121221361 21131517 21743997 281893821 4969945 475366169 16082019 99881101 42027005 45449160
]]></test_input>
<test_output><![CDATA[10
]]></test_output>
<test_input><![CDATA[1000000000
9 10 100

]]></test_input>
<test_output><![CDATA[1
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛提高组 2005年NOIP全国联赛提高组]]></source>
		<solution language="C++"><![CDATA[#include<iostream>
#include<algorithm>
using namespace std;
int a[110];
int stone[11000]={0};
int f[11000]={0};
int s,t,m,l,ans;

void solve()
{
	int d=0,k=s*t,x;//d表示平移量，k表示s和t的公倍数
	for(int i=1;i<=m+1;i++)//平移操作 
	{
		x=a[i]-d-a[i-1];//x表示第i个石子和第i-1个石子距离 
		if(x>k) d+=x-k;//超过公倍数得部分就平移 
		a[i]=a[i]-d; 
		stone[a[i]]=1; 
	} 
	stone[a[m+1]]=0;//注意桥尾不是石子 
	f[0]=0;
	for(int i=1;i<=a[m+1]+t-1;i++)
	{
		f[i]=105;
		for (int j=s;j<=t;j++)
		  if(i>=j) f[i]=min(f[i],f[i-j]);
		  f[i]+=stone[i]; 
	}
	ans=101;
	for(int i=a[m+1];i<=a[m+1]+t-1;i++)//最后的落脚点可能不在终点可能在终点以外的地方 
	  ans=min(ans,f[i]);
	cout<<ans<<endl;
}

int main()
{
	cin>>l>>s>>t>>m;
	ans=0;
	a[0]=0;a[m+1]=l;
	for(int i=1;i<=m;i++) cin>>a[i];
	sort(a+1,a+1+m);//对桥中间的石子排序 
	if(s==t){//此时只需要考虑石子位置是否为其倍数即可 
		for(int i=1;i<=m;i++)
		if(a[i]%s==0)
		ans++;
		cout<<ans<<endl;
	} 
	else solve();
	return 0;
}

//裴蜀定理 ]]></solution>
	</item>
</fps>
