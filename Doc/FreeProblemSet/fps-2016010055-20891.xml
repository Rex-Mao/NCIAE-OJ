<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[砝码称重]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[125]]></memory_limit>

<description><![CDATA[<p class="MsoNormalIndent">
	设有<span>1g</span>、<span>2g</span>、<span>3g</span>、<span>5g</span>、<span>10g</span>、<span>20g</span>的砝码各若干枚（其总重<span>&lt;=1000</span>）。<span></span>
</p>
<p class="MsoNormalIndent">
	现在给你这六种砝码的数量，请你计算<span>用这些砝码能称出的不同重量的个数，但不包括一个砝码也不用的情况。</span>
</p>
<p class="MsoNormalIndent">
	<br />
</p>
<p class="MsoNormalIndent">
	如输入：<span>1 1 0 0 0 0</span><span></span>
</p>
<p>
	输出：<span>Total</span>=3 &nbsp;表示可以称出1g，2g，3g三种不同的重量。
</p>
<p>
	<br />
</p>]]></description>
<input><![CDATA[<p>
	每个测试文件只包含一组测试数据，每组输入六个整数，例如：
</p>
<p>
	输入&nbsp;<span>a1&nbsp; a2&nbsp; a3&nbsp; a4&nbsp; a5&nbsp; a6</span>
</p>
<p>
	<span><span>&nbsp; &nbsp; &nbsp; （表示</span><span>1g</span><span>砝码有</span><span>a1</span><span>个，</span><span>2g</span><span>砝码有</span><span>a2</span><span>个，…，</span><span>20g</span><span>砝码有</span><span>a6</span><span>个）</span></span>
</p>
<p>
	<span><br />
</span>
</p>]]></input> 
<output><![CDATA[<p>
	对于每组输入数据，输出&nbsp;<span style="line-height:1.5;">Total=N。</span><span style="line-height:1.5;">（N表示用这些砝码能称出的不同重量的个数，但不包括一个砝码也不用的情况）</span>
</p>
<p>
	<span style="line-height:1.5;"><br />
</span>
</p>]]></output>
<sample_input><![CDATA[1 1 0 0 0 0]]></sample_input>
<sample_output><![CDATA[Total=3]]></sample_output>
  <test_input><![CDATA[2 2 2 2 2 2

]]></test_input>
<test_output><![CDATA[Total=82
]]></test_output>
<test_input><![CDATA[1 1 0 0 0 0

]]></test_input>
<test_output><![CDATA[Total=3
]]></test_output>
<test_input><![CDATA[3 4 0 5 0 0

]]></test_input>
<test_output><![CDATA[Total=36
]]></test_output>
<test_input><![CDATA[1 2 3 4 5 6

]]></test_input>
<test_output><![CDATA[Total=204
]]></test_output>
<test_input><![CDATA[1 0 3 0 0 0

]]></test_input>
<test_output><![CDATA[Total=7
]]></test_output>
<test_input><![CDATA[2 2 0 0 0 0

]]></test_input>
<test_output><![CDATA[Total=6
]]></test_output>
<test_input><![CDATA[0 3 2 7 4 5

]]></test_input>
<test_output><![CDATA[Total=185
]]></test_output>
<test_input><![CDATA[10 10 10 10 1 1

]]></test_input>
<test_output><![CDATA[Total=140
]]></test_output>
<test_input><![CDATA[6 5 4 3 2 1

]]></test_input>
<test_output><![CDATA[Total=83
]]></test_output>
<test_input><![CDATA[0 6 3 4 2 1

]]></test_input>
<test_output><![CDATA[Total=79
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛提高组-1996年NOIP全国联赛提高组]]></source>
		<solution language="C"><![CDATA[#include<stdio.h>  
#include<string.h>
int main()  
{  
    int dp[2000];  
    int c[2000],num[7];  
    int weight[7]={0, 1, 2, 3, 5, 10, 20};  
	int i,j,sum=0;  
    memset(dp,0,sizeof(dp));  
    for(i=1;i<=6;i++)  
    {  
       scanf("%d",&num[i]);  
        sum+=num[i]*weight[i];  
    }
	c[0]=0;
	for(i=1;i<=6;i++)  
    {  
       for(j=1;j<num[i];num[i]-=j,j<<=1)  
         c[++c[0]]=weight[i]*j;  
       if(num[i])
		   c[++c[0]]=weight[i]*num[i];  
     }
	dp[0]=1;
	for(i=1;i<=c[0];i++)  
		for(j=sum;j>=c[i];j--)  
			dp[j]=(dp[j]||dp[j-c[i]]);  
    int ret=0;  
        for(i=1;i<=sum;i++)  
            ret+=dp[i];  
    printf("Total=%d\n",ret);
	return 0;
}  ]]></solution>
			<solution language="C++"><![CDATA[#include <iostream>
using namespace std;
int main()
{
	int arr[1000]={0},total=0;
	int a,b,c,d,e,f;
	cin>>a>>b>>c>>d>>e>>f;
	//a=1,b=1,c=d=e=f=0;
	for(int i=0;i<=a;i++)
		for(int j=0;j<=b;j++)
			for(int k=0;k<=c;k++)
				for(int l=0;l<=d;l++)
					for(int m=0;m<=e;m++)
						for(int n=0;n<=f;n++)
						{
							int sum=i+2*j+3*k+5*l+10*m+20*n;
							if(!arr[sum])
							{
								arr[sum]+=1;
								total++;
							}
						}
	cout<<"Total="<<total-1<<endl;
	return 0;
}]]></solution>
			<solution language="Pascal"><![CDATA[const a:array[1..6]of longint=(1,2,3,5,10,20); 
var i,j,k,ans:longint; 
    b,p:array[-1000..1000]of longint; 
begin
 for i:=1 to 6 do read(b[i]); 
 p[0]:=1; 
 for i:=1 to 6 do
  for j:=1000 downto a[i] do
   for k:=0 to b[i] do
   if p[j-a[i]*k]=1 then p[j]:=1; 
 for i:=1 to 1000 do if p[i]=1 then inc(ans); 
 writeln('Total=',ans); 
end. ]]></solution>
			<solution language="Java"><![CDATA[import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {
	public static void main(String args[]) throws Exception {

		Scanner scanner = new Scanner(System.in);
		String input = scanner.nextLine();
		String[] array = input.split(" ");
		List<Integer> inputList = new ArrayList<Integer>();
		for (int i = 0; i < array.length; i++) {
			for (int j = 0; j < Integer.parseInt(array[i]); j++) {
				if (i == 0) {
					inputList.add(1);
				} else if (i == 1) {
					inputList.add(2);
				} else if (i == 2) {
					inputList.add(3);
				} else if (i == 3) {
					inputList.add(5);
				} else if (i == 4) {
					inputList.add(10);
				} else if (i == 5) {
					inputList.add(20);
				}
			}
		}
		System.out.println("Total=" + fun(inputList).size());
	}

	public static List<Integer> fun(List<Integer> inputList) {
		List<Integer> retList = new ArrayList<Integer>();
		if (inputList.size() == 1) {
			return inputList;
		}

		List<Integer> subList = inputList.subList(1, inputList.size());
		List<Integer> subRetList = fun(subList);
		retList.addAll(subRetList);
		for (Integer subRet : subRetList) {
			if (!retList.contains(inputList.get(0))) {
				retList.add(inputList.get(0));
			}
			if (!retList.contains(subRet + inputList.get(0))) {
				retList.add(subRet + inputList.get(0));
			}
		}
		return retList;
	}
}
]]></solution>
	</item>
</fps>
