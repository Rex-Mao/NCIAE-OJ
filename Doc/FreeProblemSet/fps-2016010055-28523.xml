<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[ [ZJOI2010]贪吃的老鼠]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p>
	奶酪店里最近出现了m只老鼠！它们的目标就是把生产出来的所有奶酪都吃掉。奶酪店中一天会生产n块奶酪，其中第i块的大小为pi，会在第ri秒被生产出来，并且必须在第di秒之前将它吃掉。第j只老鼠吃奶酪的速度为sj，因此如果它单独吃完第i快奶酪所需的时间为pi/sj。老鼠们吃奶酪的习惯很独特，具体来说：
</p>
<p>
	(1) 在任一时刻，一只老鼠最多可以吃一块奶酪；
</p>
<p>
	(2) 在任一时刻，一块奶酪最多被一只老鼠吃。
</p>
<p>
	由于奶酪的保质期常常很短，为了将它们全部吃掉，老鼠们需要使用一种神奇的魔法来延长奶酪的保质期。将奶酪的保质期延长T秒是指所有的奶酪的di变成di+T。同时，使用魔法的代价很高，因此老鼠们希望找到最小的T使得可以吃掉所有的奶酪。
</p>
<h2>
	输入输出格式
</h2>
<strong>输入格式：</strong><br />
<p>
	<br />
</p>
<p>
	输入文件的第一行包含一个整数K，表示输入文件中数据的组数。
</p>
<p>
	每组数据的第一行包含两个整数n和m，分别表示奶酪和老鼠的数量。接下来的n行每行包含三个整数pi,ri,di。最后m行每行包含一个整数，表示sj。pi,ri,di,sj的含义如上文所述。
</p>
<p>
	<br />
</p>
<strong>输出格式：</strong><br />
<p>
	<br />
</p>
<p>
	包含K 行，每行包含一个实数，表示你找到的最小的T。你的答案和标准答案的绝对误差不应超过10−4。
</p>
<p>
	<br />
</p>
<h2>
	输入输出样例
</h2>
<div class="am-g">
	<div class="am-u-md-6 copy-region">
		<strong>输入样例#1：</strong> <a class="am-badge am-radius lg-bg-orange sample-copy">复制</a> 
<pre>2
2 2
13 0 4
10 1 3
4
2
1 1
1 0 2
1
</pre>
	</div>
	<div class="am-u-md-6 copy-region">
		<strong>输出样例#1：</strong> <a class="am-badge am-radius lg-bg-orange sample-copy">复制</a> 
<pre>0.5
0
</pre>
	</div>
</div>
<h2>
	说明
</h2>
<p>
	样例说明
</p>
<p>
	第一组数据中：
</p>
<p>
	 第0到第1秒：第一只老鼠吃第一块奶酪；
</p>
<p>
	 第1到第3.5秒：
</p>
<ul>
	<li>
		<p>
			第一只老鼠吃第二块奶酪；
		</p>
	</li>
	<li>
		第二只老鼠吃第一块奶酪；
	</li>
</ul>
<p>
	 第3.5到第4.5秒：第一只老鼠吃第一块奶酪。
</p>
<p>
	数据规模
</p>
<p>
	30%的数据中，1≤n,m≤5；
</p>
<p>
	<span style="color:#333333;font-family:&quot;font-size:15px;background-color:rgba(255, 255, 255, 0.8);">100%的数据中，1≤K≤5,1≤n,m≤30,1≤pi≤10^5, 0 ≤ri&lt;di≤10^7,1≤sj≤10^5。</span><di≤10^7,1≤sj≤10^5。< p=""></di≤10^7,1≤sj≤10^5。<>
</p>
<div class="lg-article-sub am-g" id="sub">
</div>]]></description>
<input><![CDATA[]]></input> 
<output><![CDATA[]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[]]></sample_output>
  <test_input><![CDATA[5
2 2
4 0 1
3 0 1
4
3
2 2
10 0 1
10 0 1
6
4
1 24
10657 6689113 6689114
44
91
39
91
83
33
69
49
47
40
42
22
55
1
28
99
3
72
4
9
37
72
11
11
11 1
79905 4236156 4236157
52077 2880662 2880663
43786 5394467 5394468
1223 7892784 7892785
98684 6819198 6819199
49948 7597339 7597340
18863 5868037 5868038
30400 1187193 1187194
42412 6544697 6544698
95145 7780079 7780080
23024 1164901 1164902
44
11 16
58690 2290995 2290996
96204 2024192 2554630
18804 2834607 2834608
76566 1985033 1985034
3393 8294011 8294012
56756 1357994 1357995
34141 8369757 8369758
53079 4853043 4853044
13107 4869133 4869134
12824 9275219 9275220
8992 945691 945692
61
27
10
97
89
35
17
30
99
20
35
89
20
36
68
98
]]></test_input>
<test_output><![CDATA[0.0
1.0
106.64647
2241.81819
772.39394
]]></test_output>
<test_input><![CDATA[3
10 23
22289 7916546 7916547
68654 873396 873397
488 3770970 3770971
56069 6049611 6049612
83408 9874054 9874055
91701 5583740 5583741
81092 3855515 3855516
95503 9064755 9064756
84600 3995044 3995045
14559 1684170 2910353
31
41
24
53
79
57
65
96
96
95
23
93
40
2
91
85
17
72
74
100
89
96
66
26 19
55132 8074776 8074777
77466 2420849 2420850
3241 658220 658221
57163 4345495 4345496
18983 7567359 7567360
27830 4655612 4655613
35741 8209740 8209741
3344 1927613 5000616
94227 8023570 8023571
8231 8328607 8328608
68214 8947463 8947464
37400 2090688 2090689
53001 8349356 8349357
9535 9832569 9832570
55116 8797268 8797269
38302 7332082 7332083
77295 8174753 8174754
83167 8067728 8067729
10962 6305342 6305343
3482 2270766 2270767
27727 2644971 4665805
74491 394900 394901
53015 8538126 8538127
34835 4383838 4958902
98535 7140117 7140118
71609 2278543 3819760
94
36
7
34
74
20
26
29
11
69
17
92
28
63
19
82
14
49
57
19 30
51785 6835345 6835346
20285 8070690 8070691
84870 5736111 5736112
31580 9108159 9108160
47015 3084313 3084314
73882 7213015 7213016
76169 860320 860321
24857 8621528 8621529
35397 5053852 5053853
28598 9133634 9133635
58699 60868 60869
99194 7586675 7586676
10463 1396569 1396570
12486 199647 199648
48629 1116411 1492022
14945 2581193 2581194
57651 3190844 3190845
91749 1261875 1261876
68691 1529100 1529101
1
79
72
96
6
83
93
6
94
24
20
75
9
84
90
32
84
86
93
49
9
55
19
7
2
64
91
39
93
62
30 30
64145 5685006 5685007
43875 8595917 8595918
99919 7364788 7364789
25539 3200124 3904590
70139 8341708 8341709
59161 4745723 5516069
15279 9266392 9266393
92898 7302651 7302652
83157 9680174 9680175
60647 346544 769120
69159 4813218 4813219
65622 206197 355039
34835 6189749 6189750
59553 5051667 6838193
66623 4398713 5929054
11924 5655262 5655263
75545 1580354 4515374
46747 4938910 5897382
40239 2127134 2868203
49455 27318 27319
98658 7356756 7356757
31472 148922 148923
64607 3814208 4312455
16178 134068 6991280
13885 7773552 7773553
51784 4726263 4911388
28462 8605102 8605103
59130 9338126 9338127
58489 2676761 5288711
53481 5176293 5176294
52
69
60
17
63
72
8
17
12
73
27
8
32
9
84
11
6
26
99
37
14
96
8
76
96
73
1
88
66
84
10 11
80786 9066880 9066881
79464 8958400 8958401
95191 6601188 6601189
80552 8884064 8884065
36068 4273895 4273896
72528 9453730 9453731
95739 1926668 4327602
81845 2458596 2458597
33341 1409652 1722585
2095 4111997 4834982
60
75
46
22
59
49
45
92
77
6
76
]]></test_input>
<test_output><![CDATA[954.03
1047.24469
1032.27084
1008.28283
1033.68479
]]></test_output>
<test_input><![CDATA[5
2 30
37457 8313970 8313971
31422 7113110 7113111
86
34
78
20
11
96
62
49
13
96
33
38
96
40
32
97
54
61
37
54
36
70
35
30
35
74
12
64
66
87
11 5
64755 2179106 2179107
22334 2565203 2765628
66310 1359782 1359783
74384 4576410 4576411
69086 9787244 9787245
43886 5412270 5412271
25234 5982205 5982206
2850 2415583 2415584
61351 1580261 3306649
41346 5317312 5317313
98458 1979673 1979674
57
51
57
23
61
30 8
98496 6122988 6122989
50394 447755 447756
99471 6227600 6227601
67660 3602044 3602045
1803 8317675 8317676
95938 8236482 8236483
67269 5743974 5743975
53257 6221080 6221081
1605 5286286 5286287
59116 4173039 4173040
75609 5311007 5311008
818 7166712 7166713
84894 9709981 9709982
86404 9614033 9614034
94428 4276196 4276197
68983 9574956 9574957
67941 1258700 1258701
31137 100486 100487
62509 3211023 3211024
18270 6939009 6939010
65005 834891 834892
86788 1478577 1478578
24971 2671627 2671628
20272 4855867 4855868
11886 2867320 2867321
70733 3684551 3684552
74053 9194839 9194840
21245 9756529 9756530
39491 8862644 8862645
24858 2357111 2357112
99
64
52
72
92
57
58
67
4 21
28127 9986149 9986150
94517 5649073 5649074
29075 1472238 6926137
97857 8371536 8519784
89
33
54
8
38
66
37
89
57
1
9
79
64
62
32
82
66
36
10
4
42
6 2
37038 7232472 7232473
29768 3136133 3136134
14005 9553102 9553103
83741 959686 1823203
48413 2863614 2863615
79766 2914141 2914142
52
77
]]></test_input>
<test_output><![CDATA[385.15464
1613.06558
1003.75758
1060.98877
1034.92208
]]></test_output>
<test_input><![CDATA[5
4 19
44742 823400 3567020
83512 6204780 6204781
25908 3307789 3307790
32297 8265431 8265432
49
27
49
22
26
15
41
64
48
76
13
94
59
82
73
88
100
22
44
5 19
39844 5332063 5332064
7715 8780845 8780846
16117 4528285 4528286
96592 6648188 6648189
57891 2735219 2735220
15
31
9
49
75
11
71
17
23
63
26
56
19
86
9
17
20
67
12
1 6
33307 3367272 3367273
75
23
77
59
76
31
27 16
30515 356864 356865
34187 210712 210713
55122 6704362 6704363
44213 4641301 4641302
30206 2033753 2033754
56112 5274245 5274246
25586 716523 5066874
86584 776438 776439
53887 1569807 1569808
53342 4562648 4562649
77331 8593743 8593744
63909 6761994 6761995
41104 9598090 9598091
41050 5477936 5477937
64633 2436378 2436379
48275 3956798 4455646
73678 2658429 2658430
27750 5862454 5862455
79767 773814 1039108
98518 8336966 8336967
68516 4626864 4626865
30180 3955074 3955075
83887 5194656 5194657
45200 3074205 3391154
82386 5238649 5238650
80376 3796013 3796014
40203 1679138 1738112
68
80
16
26
99
31
95
32
64
39
97
18
61
33
57
84
21 6
46166 5112737 5716531
40730 5701559 5701560
63467 233622 5345845
6687 6512891 6512892
20149 2176819 6763320
11773 2259211 4821122
30213 2570471 3883439
36123 8252310 8252311
86803 6314544 6779549
10484 5976045 6057746
29678 6155064 6807868
84494 7174943 7174944
86211 222921 222922
11883 7184216 7184217
27114 2856966 3626110
12718 9403725 9403726
95064 1984714 4145124
19296 1151782 6839724
74011 8701382 8701383
80720 8229455 8229456
79368 2888858 2888859
81
10
25
6
5
46
]]></test_input>
<test_output><![CDATA[834.12
1122.1628
431.55845
994.13132
1063.33334
]]></test_output>
<test_input><![CDATA[2
2 2
4 0 2
2 0 1
1
2
3 1
93 876 877
4 906 907
72 877 878
61
30 1
14662 66503 9923827
100000 168869 2482652
100000 617751 3922313
100000 926581 3190805
100000 1136644 4174909
100000 1287688 9410697
85246 1945503 3697201
100000 2170453 7694723
100000 2547507 2554512
100000 2854776 7776940
20361 3096542 4164079
100000 3165360 8801381
100000 3972339 6465828
100000 4451977 6891914
80831 4590255 4677753
41700 4719378 5952929
100000 4765919 5697428
100000 5007021 5920211
73710 5441753 9599049
100000 5609943 7503831
100000 6095561 8048670
72969 6421928 7557055
100000 6834253 9242606
6936 7182382 9137986
70166 7948493 9039549
100000 8098784 9671854
100000 8559345 9660844
100000 8737559 9254796
100000 9202221 9931591
100000 9619618 9717280
1
30 1
100000 131604 9883959
23053 1011116 3999957
100000 1085201 5848094
62543 1341461 1532449
100000 1409511 8639694
35546 1700549 4072233
100000 1801534 6044190
31056 2712288 7275416
100000 2860629 5283824
100000 3804454 6728939
100000 4192902 8015244
5616 4471555 9570679
67558 5032009 7641934
6900 5645975 7240882
42519 5786887 8844269
40743 6014636 8163220
6254 6072591 8747750
100000 6146405 9034295
100000 6506327 8475561
24137 7247553 7943530
100000 7283457 8423124
100000 7997471 8985071
97000 8159188 9913427
90467 8266716 9519064
100000 8391390 9081154
26792 8751908 8980828
100000 9042151 9467562
84799 9303494 9657622
6361 9400314 9783418
82506 9627656 9659420
1
30 1
100000 435649 1818089
100000 1167382 2088127
100000 1465445 2241299
100000 1627464 9591208
100000 1822435 3856736
91538 2770098 9704421
80409 2889074 8295255
16679 3050572 8581295
100000 3178395 8349581
100000 4205239 8419180
10723 4460649 8923004
25643 4771495 7758318
100000 5088657 6268546
100000 5273769 6353997
100000 5770383 5980085
9864 6226303 7182220
63913 6471553 7786533
100000 6710591 8607025
43376 7144658 8626208
100000 7256056 8505095
100000 7453940 9134465
100000 7855498 8533205
100000 8001450 8534491
41461 8519215 8921010
21627 8757391 9657013
302 8843090 9288383
76601 8904603 9791556
100000 9002287 9582497
51156 9613644 9691873
71564 9850175 9902434
1
]]></test_input>
<test_output><![CDATA[0.33334
0.70492
92995.0
50742.0
19305.0
]]></test_output>
<test_input><![CDATA[3
2 2
13 0 4
10 1 3
4
2
1 1
1 0 1
1
2 2
10 0 1
10 0 1
6
4
30 30
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
30 30
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
]]></test_input>
<test_output><![CDATA[0.5
0.0
1.0
0.0
99999.0
]]></test_output>
<test_input><![CDATA[5
9 3
75813 5216366 5692378
51643 498100 498101
22749 3930830 3930831
80092 3961672 3983823
65815 9123978 9123979
26808 6739454 6739455
6913 9019024 9019025
10047 8771854 8771855
26215 2588151 2588152
18
3
46
14 3
73362 3432283 7549168
49589 673697 836829
6470 8302119 8302120
69603 7165145 7663815
41706 8797907 8797908
15584 3420122 7050795
43735 482910 8777161
36169 1068046 8088585
10164 7034813 8488562
14834 7657494 8407205
37777 9443825 9443826
66499 1670599 5193871
80694 4299237 4824159
329 1716063 4109317
12
40
44
20 23
88484 5770875 5770876
99748 8231466 8231467
8525 1393437 1393438
92355 6112051 6112052
67938 3325160 3325161
80928 4172896 4172897
119 9670357 9670358
90083 3053248 3053249
86030 1227789 1227790
21636 5160628 5160629
33654 1346231 1346232
55263 5551119 5551120
46827 2602525 2602526
83108 8968970 8968971
97562 8512841 8512842
18714 3795927 3795928
86214 186084 1139678
40865 5153374 5153375
72286 2017593 2017594
22708 7243296 7243297
33
42
9
20
58
67
1
21
94
64
13
53
73
70
86
70
5
87
88
87
76
91
69
30 3
30675 4200307 7199795
59628 6972470 7727738
66357 8375979 8375980
37043 1738125 1738126
45347 1538804 4563788
84159 9862282 9862283
92967 2924205 4392777
59108 5393206 7684756
95510 7764201 7764202
72048 9917419 9917420
53534 6272538 6272539
32673 6599399 6599400
83194 2969931 5489822
85656 87928 87929
19104 1209750 5399457
34263 2864906 2864907
61035 7561630 7561631
35009 8014104 8014105
48024 4920544 6205098
8077 1451146 4997633
45926 847098 3329054
34622 4254521 6781954
15489 2549612 2549613
38658 9241450 9241451
25771 3163447 7241152
15348 3235510 5714346
1710 56351 6205118
92433 4170739 7599707
71988 6114996 7128131
2454 1769938 5810535
49
69
36
5 16
11617 3097998 3097999
79382 4954239 6653634
29135 4873228 4873229
80364 6740374 6740375
79666 1267292 1358369
21
23
23
11
29
48
8
75
67
38
78
37
57
46
57
65
]]></test_input>
<test_output><![CDATA[1429.76087
946.86364
1060.14894
1383.2029
1029.3077
]]></test_output>
<test_input><![CDATA[5
30 30
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000 0 1
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
30 1
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
100000 9999999 10000000
1
1 1
100000 0 1
100000
1 30
100000 0 1
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
1 30
1 0 1
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
100000
]]></test_input>
<test_output><![CDATA[0.0
2999999.0
0.0
0.0
0.0
]]></test_output>
<test_input><![CDATA[5
2 1
51 927 928
7 927 928
77
3 2
47 135 136
79 899 900
48 899 900
96
52
5 3
57 289 6621
81 9998 10000
94 450 4307
50 9998 9999
92 7108 9792
47
7
39
4 3
84 223 224
47 8625 8626
48 5764 5765
8 8625 8626
70
72
92
5 1
65 3104 3105
47 8916 8917
91 9779 9780
70 9319 9320
42 9843 9844
1
]]></test_input>
<test_output><![CDATA[0.0
0.0
0.06383
0.0
90.0
]]></test_output>
<test_input><![CDATA[4
30 30
4592 3577818 3577819
43309 3464889 3464890
11927 5173468 5173469
80671 7104031 7104032
38202 656483 834965
83521 2591485 2591486
18965 2640388 2640389
24682 1794841 1794842
62856 1426979 1426980
71589 3029461 3029462
71709 2987627 2987628
74617 6070853 6070854
19325 7475009 7475010
47115 9811809 9811810
97404 2615930 2615931
14935 6567892 6567893
66751 4670966 4670967
71862 1287957 1287958
64550 3663916 3663917
39797 2360123 2360124
81647 4377846 4377847
88653 1249499 1249500
46632 6172933 6172934
44844 7718946 7718947
86212 3943798 3943799
29419 4635475 4635476
35241 1497010 2218379
17342 1082997 1082998
8483 9983198 9983199
89810 8313530 8313531
40
3
30
36
85
80
95
83
44
43
22
7
15
52
95
50
93
72
9
29
59
1
40
54
18
18
7
56
21
55
12 11
82979 1718028 1718029
66427 7707525 7707526
63736 7516037 7516038
95829 6194593 6194594
32046 1282995 1282996
95667 7328552 7328553
11570 7528139 7528140
96046 8269401 8269402
27097 4541435 4541436
9180 7332701 7332702
99450 2023090 2023091
11347 9854117 9854118
36
80
9
16
12
21
57
25
48
38
45
5 21
56159 7259074 7259075
59737 6079935 6079936
83897 3439293 3439294
21407 6052713 6052714
30708 7743209 7743210
24
86
3
81
74
6
77
3
25
94
32
74
48
45
58
80
57
62
82
84
75
11 2
28904 7470833 7470834
24331 6374639 6374640
64343 1210189 1210190
25969 9506432 9506433
33513 4175289 4175290
43301 5681076 5681077
52601 2982762 2982763
1675 805672 805673
20936 2291397 2291398
36101 7135524 7135525
48064 7108711 7108712
45
5
28 13
60920 4059769 4059770
31158 5869201 5869202
58894 6890826 6890827
75646 6879483 6879484
65019 4245337 5989293
84834 442331 5291256
3012 3868902 5215709
87012 2297789 2488840
10872 3598161 7273838
87604 3001813 4641871
5268 288008 2264680
33160 7598333 7598334
21516 9214606 9214607
74425 5170850 5170851
39267 1812874 4219792
94275 4188746 5956298
52330 5362136 7554034
63360 452185 2021550
36795 8052165 8052166
73009 3776625 7197957
79684 1537215 7071834
75289 200288 200289
37707 3696972 7064402
89596 1655980 3745334
21176 9115492 9115493
93503 1965171 6079441
5467 7017918 7017919
99956 9967736 9967737
40
17
95
2
88
78
100
39
79
57
3
46
8
]]></test_input>
<test_output><![CDATA[1024.30527
1242.125
891.52128
1428.84445
998.56
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[ZJOI2010 ZJOI 省选 高级]]></source>
		<solution language="C++"><![CDATA[#pragma GCC optimize ("O2")
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <functional>
#include <vector>
#include <cmath>

using namespace std;

const int MAXN = 30;
const int MAXM = 30;
const int MAXP = 100000;
const int MAXV = 2 * MAXN * MAXN + MAXN + MAXM + 2;

const int ITER = 40;
const int FLOW_ITER = 40;
const double EPS = 1e-9;
const double DEPS = 1e-8; // Double contains at most 15 decimal digits

struct tEdge {
	double c, f;
	int to, r;
	tEdge(int _to = -1, double _c = 0.0, int _r = -1) : c(_c), f(0.0), to(_to), r(_r) {}
};

int n, m, p[MAXN], r[MAXN], d[MAXN], s[MAXM];
vector<tEdge> c[MAXV];
int vs, vt, nv;
bool u[MAXV];

inline int dcmp(double d1, double d2) {
	return fabs(d1 - d2) <= DEPS;
}

inline int addV() { 
	c[nv].clear(); 
	return nv++; 
}

inline void addE(int a, int b, double ca) {
	c[a].push_back(tEdge(b, ca, c[b].size()));
	c[b].push_back(tEdge(a, 0, c[a].size() - 1));
}

bool DFS(int v, double delta) {
	if (v == vt) return true;
	u[v] = true;
	for (int i = 0; i < (int)c[v].size(); ++i) {
		tEdge &t = c[v][i];
 		if (t.f + delta <= t.c && !u[t.to] && DFS(t.to, delta)) {
			t.f += delta; 
			c[t.to][t.r].f -= delta;
			return true;
		}
	}
  	return false;
}

double maxFlow() {
	double cu = 1 << 20, sum = 0;
	for (int i = 0; i < FLOW_ITER; ++i, cu *= 0.5) {
		while (1) {
			memset(u, 0, sizeof(u));
			if (!DFS(vs, cu)) break;
			sum += cu;
		}
	}
  	return sum;
}

bool check(double add) {
	nv = 0;
	vs = addV();
	vt = addV();
	int vj = nv;
	for (int i = 0; i < n; ++i)
		addE(addV(), vt, (double)p[i]);
	
	vector<double> ti;
	for (int i = 0; i < n; ++i) {
		ti.push_back((double)r[i]);
		ti.push_back(d[i] + add);
	}
  
	/* remove duplicate values */
	sort(ti.begin(), ti.end());
	ti.erase(unique(ti.begin(), ti.end(), dcmp), ti.end());
  
	for (int i = 1; i < (int)ti.size(); ++i) {
		double dt = ti[i] - ti[i - 1];
		int vc = nv;
		for (int j = 0; j < m; ++j)
			addE(vs, addV(), dt * s[j] * (j + 1));
		for (int j = 0; j < m; ++j)
			for (int k = 0; k < n; ++k)
				if (r[k] - EPS <= ti[i - 1] && ti[i] <= d[k] + add + EPS)
					addE(vc + j, vj + k, dt * s[j]);
	}
	
	int need = 0;
	for (int i = 0; i < n; ++i) need += p[i];
	
	return fabs(maxFlow() - need) < EPS;
}

int main() {
	///freopen("cheese.in", "r", stdin);
	//freopen("cheese.out", "w", stdout);

	int testcases;
	int __maxn = 0, __maxm = 0;

	scanf("%d", &testcases);
	while (testcases--) {
		scanf("%d %d", &n, &m);
		__maxn>n?:__maxn = n;
		__maxm >m?:__maxm = m;
		for (int i = 0; i < n; ++i)
    		scanf("%d %d %d", &p[i], &r[i], &d[i]);
  	
	  	for (int i = 0; i < m; ++i) 
    		scanf("%d", &s[i]);
    	
		sort(s, s + m, greater<int>());
  		for (int i = 0; i < m - 1; ++i)	
		    s[i] -= s[i + 1];
	    
		double mi = 0.0, ma = MAXN * MAXP;
  		for (int i = 0; i < ITER; ++i) {
			double av = (mi + ma) * 0.5;
			if (check(av))
				ma = av;
			else
				mi = av;
		}
		printf("%.7lf\n", mi);
	}

	printf("%d %d\n", __maxn, __maxm);

	return 0;
}

]]></solution>
	<spj language="C"><![CDATA[#include <stdio.h>
#include <math.h>

double x;
double answer;
int ret=0;
int main(int argc, char **argv)
{
	FILE *fpout = fopen(argv[3], "r");
	FILE *fpans = fopen(argv[2], "r");
	//FILE *fpscore = fopen(argv[4], "w");

	fscanf(fpout, "%lf", &x);
	fscanf(fpans, "%lf", &answer);

	if (fabs(x - answer) <= 1e-4)
		;	//fprintf(fpscore, "10\n");
	else
		ret=1;//fprintf(fpscore, "0\n");

	fclose(fpout);
	fclose(fpans);
	//fclose(fpscore);

	return ret;
}
]]></spj></item>
</fps>
