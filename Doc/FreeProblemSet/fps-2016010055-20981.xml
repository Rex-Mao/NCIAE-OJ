<?xml version="1.0" encoding="UTF-8"?>   
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[笨小猴]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[50]]></memory_limit>

<description><![CDATA[<p>
	笨小猴的词汇量很小，所以每次做英语选择题的时候都很头疼。但是他找到了一种方法，经试验证明，用这种方法去选择选项的时候选对的几率非常大！
</p>
<p>
	这种方法的具体描述如下：假设maxn是单词中出现次数最多的字母的出现次数，minn是单词中出现次数最少的字母的出现次数，如果maxn-minn是一个质数，那么笨小猴就认为这是个Lucky Word，这样的单词很可能就是正确的答案。
</p>
<p>
	<br />
</p>]]></description>
<input><![CDATA[<p>
	每组输入数据只有一行，是一个单词，其中只可能出现小写字母，并且长度小于100。
</p>
<p>
	<br />
</p>]]></input> 
<output><![CDATA[每组输出共两行，第一行是一个字符串，假设输入的的单词是Lucky Word，那么输出“Lucky Word”，否则输出“No Answer”；<br />
<p>
	<span style="line-height:1.5;">第二行是一个整数，如果输入单词是Lucky Word，输出maxn-minn的值，否则输出0。</span> 
</p>
<p>
	<span style="line-height:1.5;"><br />
</span> 
</p>
<p>
	<span style="line-height:1.5;">下面是对样例数据的解释：</span> 
</p>
<p>
	<span style="line-height:1.5;">样例一：</span> 
</p>
<p>
	<span style="line-height:1.5;">单词error中出现最多的字母r出现了3次，出现次数最少的字母出现了1次，3-1=2，2是质数。</span> 
</p>
<p>
	<span style="line-height:1.5;">样例二：</span> 
</p>
<p>
	<span style="line-height:1.5;">单词olympic中出现最多的字母i出现了2次，出现次数最少的字母出现了1次，2-1=1，1不是质数。<br />
</span> 
</p>
<p>
	<span style="line-height:1.5;"><br />
</span> 
</p>]]></output>
<sample_input><![CDATA[error

olympic]]></sample_input>
<sample_output><![CDATA[Lucky Word
2

No Answer
0]]></sample_output>
  <test_input><![CDATA[thistimeitisyourfault
]]></test_input>
<test_output><![CDATA[Lucky Word
3
]]></test_output>
<test_input><![CDATA[ubuntuubuntuubuntuubuntuubuntuu
]]></test_input>
<test_output><![CDATA[Lucky Word
11
]]></test_output>
<test_input><![CDATA[agriculture
]]></test_input>
<test_output><![CDATA[No Answer
0
]]></test_output>
<test_input><![CDATA[ubuntu
]]></test_input>
<test_output><![CDATA[Lucky Word
2
]]></test_output>
<test_input><![CDATA[beijing
]]></test_input>
<test_output><![CDATA[No Answer
0
]]></test_output>
<test_input><![CDATA[prideandprejudice
]]></test_input>
<test_output><![CDATA[Lucky Word
2
]]></test_output>
<test_input><![CDATA[aabbccddeeffgg
]]></test_input>
<test_output><![CDATA[No Answer
0
]]></test_output>
<test_input><![CDATA[nationality
]]></test_input>
<test_output><![CDATA[No Answer
0
]]></test_output>
<test_input><![CDATA[aaabbccddeeffggg
]]></test_input>
<test_output><![CDATA[No Answer
0
]]></test_output>
<test_input><![CDATA[whatishybridshortfor
]]></test_input>
<test_output><![CDATA[Lucky Word
2
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[NOIP全国联赛提高组-2008年NOIP全国联赛提高组]]></source>
		<solution language="C"><![CDATA[#include<stdio.h>
#include<string.h>
int main()
{
	char a[101];int i,j,count,max=0,min=100,s,t;
	scanf("%s",a);
	getchar();
	for(i=0;i<strlen(a);i++)
	{
		count=0;
		for(j=0;j<strlen(a);j++)
		{
			if(a[i]==a[j])
				count++;
		}
		if(count>max)
			max=count;
		if(count<min)
			min=count;
	}
	t=max-min;s=0;
	for(i=1;i<t;i++)
	{
		if(t%i==0)
			s++;
	}
	if(s==1)
		printf("Lucky Word\n%d\n",t);
	else
		printf("No Answer\n0\n");
	return 0;
}]]></solution>
			<solution language="C++"><![CDATA[#include<stdio.h>
#include<string.h>
char a[110],b[26];
int sushu(int t)
{
	int i;
	if(t==0||t==1)
		return 0;
	if(t==2)
		return 1;
	for(i=2;i<t/2;i++)
	{
		if(t%2==0)
			return 0;
	}
	return 1;
}
int main()
{
	int i,c[27],max,min,j;
	while(scanf("%s",a)!=EOF)
	{
		memset(c,0,sizeof(c));
		for(i=0;i<strlen(a);i++)
		{
			c[a[i] - 'a'+1]++;
		}
		max = -1;
		min = 1000;
		for(i=1;i<=26;i++)
		{
			if(c[i])
			{
				if(c[i] > max)
					max = c[i];
				if(c[i] < min)
					min = c[i];
			}
			
		}
		if(sushu(max-min))
		{
			printf("Lucky Word\n");
			printf("%d\n",max-min);
		}
		else
		{
			printf("No Answer\n");
			printf("0\n");
		}
	}
	return 0;
}
]]></solution>
			<solution language="Java"><![CDATA[import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class Search{
	public boolean ReSearch(int n){
		int i;
		for(i=2;i<Math.sqrt(n)+1;i++)
			if(n%i == 0) return false;
			return true;
	}
}
public class Main {
	public static void main(String args[]){
			char [] a = new char [100];
			String s;
			int i =0,t,len = 0,max = 0,min = 1000;
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			try {
					s = br.readLine();
					len = s.length();
					a = s.toCharArray();
					for(char c='a';c<='z';++c){
						t = 0;
						for(i = 0;i<len;i++)
							if (a[i] == c)        ++t;
							if(t>max && t!=0)     max = t;
							if(t<min && t!=0)     min = t;
					}
						t = max - min;
						Search find = new Search();
						if(t == 0 || t == 1){
							System.out.print("No Answer\n"+"0\n");
						}
						else if(find.ReSearch(t) || t == 2){
							System.out.println("Lucky Word\n"+t+"\n");
						}
						else
							System.out.print("No Answer\n"+"0\n");
			} catch (IOException e) {
				// TODO 自动生成的 catch 块
				e.printStackTrace();
			}
	}
}
]]></solution>
	</item>
</fps>
